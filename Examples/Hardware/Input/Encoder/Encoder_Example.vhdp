/*
    Name: Encoder Example
    Rev: 1.0
    Creator: Leon Beier
    Date: 06.08.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of 
    this hdl code and associated documentation files (the "HDL Code"), to deal in the 
    HDL Code without restriction, including without limitation the rights to use, 
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
*/

Main
(
    A           : IN  STD_LOGIC; 
    B           : IN  STD_LOGIC;
    Set_Origin  : IN  STD_LOGIC;
    
    led         : OUT   STD_LOGIC_VECTOR(7 downto 0);           --Counter Output    
)
{
    SIGNAL Encoder_Controller_Direction                : STD_LOGIC;
    SIGNAL Encoder_Controller_Position                 : INTEGER   RANGE -128 TO 127;
    
    NewComponent Encoder_Controller 
    (
        Positions                => 128,           -- -128 to 127
        Debounce_Time            => 12000,         -- 1ms  @ 12MHz
        Set_Origin_Debounce_Time => 120000,        -- 10ms @ 12MHz

        A                        => A,
        B                        => B,
        Set_Origin               => Set_Origin,
        Direction                => Encoder_Controller_Direction,
        Position                 => Encoder_Controller_Position,
    );
    
    Process ()
    {
        led <= STD_LOGIC_VECTOR(TO_SIGNED(Encoder_Controller_Position, led'LENGTH));
    }
}