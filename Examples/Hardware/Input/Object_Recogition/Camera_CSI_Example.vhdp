/*
    Name: Camera CSI Example
    Rev: 1.0
    Creator: Leon Beier
    Date: 06.06.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Description: This example takes video data from a camera and outputs it via HDMI
 */

--Statt Column und Row HS und VS Signal

Main
(
    Camera_CLK_Lane      : IN     STD_LOGIC;
    Camera_Data_Lane     : IN     STD_LOGIC_VECTOR (1 downto 0);
    Camera_Enable        : OUT    STD_LOGIC;
    Camera_SCL           : INOUT  STD_LOGIC;
    Camera_SDA           : INOUT  STD_LOGIC;
    
    oHDMI_TX             : OUT    STD_LOGIC_VECTOR(2 downto 0);
    oHDMI_CLK            : OUT    STD_LOGIC;
    iHDMI_HPD            : IN     STD_LOGIC;
)
{

    --!!!Probieren Area Blur für beliebig viele Farben in einem Component zu realisieren, sodass nur ein RAM mit einer Adresse benötigt wird

    CONSTANT MAX_Area    : NATURAL := 24; --area blur
    CONSTANT MIN_Area    : NATURAL := 4;
    
    CONSTANT blob_number : NATURAL := 32; --max number in buffer
    
    CONSTANT capture_compression : NATURAL := 2;

    SIGNAL color_select : NATURAL range 0 to 2;
    
    color_select <= TO_INTEGER(UNSIGNED(ISSP1_source));
    
    ISSP_probe  <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blobs_Out, 32));
    ISSP1_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_X0_Out, 32));
    ISSP2_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_X1_Out, 32));
    ISSP3_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_Y0_Out, 32));
    ISSP4_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_Y1_Out, 32));
    
    Blob_Detect_Blob_Addr_Yellow <= TO_INTEGER(UNSIGNED(ISSP_source));
    Blob_Detect_Blob_Addr_Black  <= TO_INTEGER(UNSIGNED(ISSP_source));
    Blob_Detect_Blob_Addr_Blue   <= TO_INTEGER(UNSIGNED(ISSP_source));
    Blob_Detect_Blob_Addr_White  <= TO_INTEGER(UNSIGNED(ISSP_source));
    
    --Camera Interface-------------------------------------------------------------------
    
    Camera_Enable <= '1';

    --Receive CSI Data
    SIGNAL Camera_Stream         : rgb_stream;
    
    NewComponent CSI_Camera
    (
        CLK_Frequency => 48000000,
        
        Reset         => '0',
        CLK_Lane      => Camera_CLK_Lane,
        Data_Lane     => Camera_Data_Lane,
        SCL           => Camera_SCL,
        SDA           => Camera_SDA,
        
        Pixel_R       => Camera_Stream.R,
        Pixel_G       => Camera_Stream.G,
        Pixel_B       => Camera_Stream.B,
        Column        => Camera_Stream.Column,
        Row           => Camera_Stream.Row,
        New_Pixel     => Camera_Stream.New_Pixel,
    );
    
    --Color Filter-----------------------------------------------------------------------
    
    SIGNAL Color_Correction_Filter_Stream     : rgb_stream;

    --Color_Correction_Filter_Stream <= Camera_Stream;
    NewComponent Color_Correction_Filter
    (
        CLK_Edge     => false,
        
        R_Multiplier => 1,
        R_Divider    => 1,
        R_Add        => 0,
        G_Multiplier => 3,--TO_INTEGER(UNSIGNED(ISSP1_source)),--2,
        G_Divider    => 5,--TO_INTEGER(UNSIGNED(ISSP2_source)),--3,
        G_Add        => 0,
        B_Multiplier => 1,--TO_INTEGER(UNSIGNED(ISSP3_source)),--5,
        B_Divider    => 1,--TO_INTEGER(UNSIGNED(ISSP4_source)),--6,
        B_Add        => 0,
        
        iStream      => Camera_Stream,
        oStream      => Color_Correction_Filter_Stream,
    );
    
    
    --Blur-------------------------------------------------------------------------------

    SIGNAL Compression_Filter_oStream    : rgb_stream;

    Compression_Filter_oStream <= Color_Correction_Filter_Stream;
    /*
    SIGNAL Compression_Filter_iStream    : rgb_stream;
    NewComponent Row_Compression
    (
        compression => compression,
        Color_Depth => 8,
        CLK_Edge    => true,
        
        iStream     => Compression_Filter_iStream,
        oStream     => Compression_Filter_oStream,
    );
     */
    --Convert color space (for color detection)------------------------------------------
    
    SIGNAL RGB2HSV_oHSV       : rgb_stream;
    SIGNAL RGB2HSV_iRGB       : rgb_stream;

    RGB2HSV_iRGB <= Compression_Filter_oStream;
    
    NewComponent RGB2HSV_Filter
    (
        CLK_Edge => true,
        
        iStream  => RGB2HSV_iRGB,
        oStream  => RGB2HSV_oHSV,
    );
    
    --Color detection--------------------------------------------------------------------

    SIGNAL Color_Threshold_Filter_iStream    : rgb_stream;
    SIGNAL Color_Threshold_Filter_iHSV       : rgb_stream;
    
    --Color_Threshold_Filter_iHSV <= RGB2HSV_oHSV when ISSP1_source(2) = '0' else Gaussian_Filter_oPixel;
    --Color_Threshold_Filter_iHSV  <= Gaussian_Filter_oStream;
    Color_Threshold_Filter_iHSV  <= RGB2HSV_oHSV;
    
    SIGNAL Yellow_Filter_oStream             : rgb_stream;
    Yellow_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Yellow_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Yellow_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 170, --TO_INTEGER(UNSIGNED(ISSP1_source)), --170 --10
        H_Max      => 40,  --TO_INTEGER(UNSIGNED(ISSP2_source)), --40  --30
        S_Min      => 100, --TO_INTEGER(UNSIGNED(ISSP3_source)), --100 --220
        S_Max      => 255, --TO_INTEGER(UNSIGNED(ISSP4_source)), --255 --255
        V_Min      => 60,  --TO_INTEGER(UNSIGNED(ISSP3_source)), --30
        V_Max      => 255, --TO_INTEGER(UNSIGNED(ISSP4_source)), --255
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Yellow_Filter_oStream.R,
        oPixel_G   => Yellow_Filter_oStream.G,
        oPixel_B   => Yellow_Filter_oStream.B,
    );
    
    SIGNAL Black_Filter_oStream     : rgb_stream;
    Black_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Black_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Black_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 0,
        H_Max      => 255,
        S_Min      => 0,
        S_Max      => 255,
        V_Min      => 0,
        V_Max      => 40,

        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Black_Filter_oStream.R,
        oPixel_G   => Black_Filter_oStream.G,
        oPixel_B   => Black_Filter_oStream.B,
    );
    
    SIGNAL Blue_Filter_oStream     : rgb_stream;
    Blue_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Blue_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Blue_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 105,--TO_INTEGER(UNSIGNED(ISSP1_source)), --105, --80, --105
        H_Max      => 150,--TO_INTEGER(UNSIGNED(ISSP2_source)), --180, --150, --135
        S_Min      => 120,--TO_INTEGER(UNSIGNED(ISSP1_source)), --120, --40, --50
        S_Max      => 255,--TO_INTEGER(UNSIGNED(ISSP2_source)), --255, --255,
        V_Min      => 60,--TO_INTEGER(UNSIGNED(ISSP3_source)), --60, --20,
        V_Max      => 255,--TO_INTEGER(UNSIGNED(ISSP4_source)), --255, --200,
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Blue_Filter_oStream.R,
        oPixel_G   => Blue_Filter_oStream.G,
        oPixel_B   => Blue_Filter_oStream.B,
    );
    
    
    SIGNAL White_Filter_oStream     : rgb_stream;
    White_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    White_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    White_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 0,
        H_Max      => 255,
        S_Min      => 0,
        S_Max      => 120,
        V_Min      => 150,
        V_Max      => 255,
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => White_Filter_oStream.R,
        oPixel_G   => White_Filter_oStream.G,
        oPixel_B   => White_Filter_oStream.B,
    );
    
    --Threshold Compression--------------------------------------------------------------
    
    SIGNAL Area_Compression_Pixel     : STD_LOGIC_VECTOR(3 downto 0);
    SIGNAL Area_Compression_New_Pixel : STD_LOGIC;
    SIGNAL Area_Compression_Column    : NATURAL range 0 to 639;
    SIGNAL Area_Compression_Row       : NATURAL range 0 to 479;
    
    NewComponent AreaLimitedCompression
    (
        Image_Width => 640,
        MAX_Area_O  => 250,  --10x10 = 100 -> 60/100 = min 60% blue
        MAX_Area    => MAX_Area,
        MIN_Area    => MIN_Area,
        Start_Row   => 0,
        Colors      => 4,
        CLK_Edge    => false,
        
        iNew_Pixel  => Yellow_Filter_oStream.New_Pixel,
        iColumn     => Yellow_Filter_oStream.Column,
        iRow        => Yellow_Filter_oStream.Row,
        
        iPixel(0)   => Yellow_Filter_oStream.R(0),
        iPixel(1)   => Black_Filter_oStream.R(0),
        iPixel(2)   => Blue_Filter_oStream.R(0),
        iPixel(3)   => White_Filter_oStream.R(0),
        
        oNew_Pixel  => Area_Compression_New_Pixel,
        oColumn     => Area_Compression_Column,
        oRow        => Area_Compression_Row,
        
        oPixel      => Area_Compression_Pixel,
    );
    
    --Blob detection---------------------------------------------------------------------
    
    SIGNAL Blob_Detect_Blobs_Yellow           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_Addr_Yellow       : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0_Yellow         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1_Yellow         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0_Yellow         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1_Yellow         : NATURAL   range 0 to 480-1;
    
    NewComponent Blob_Detect
    (
        Blob_Number     => blob_number,
        Blob_Buffer     => 8,
        Width           => 640,
        Height          => 480,
        Min_Blob_Width  => 0,
        Min_Blob_Height => 0,
        Max_Blob_Width  => 640,
        Max_Blob_Height => 480,
        
        New_Pixel       => Area_Compression_New_Pixel,
        Pixel_In        => Area_Compression_Pixel(0),
        Column          => Area_Compression_Column,
        Row             => Area_Compression_Row,
        Blobs           => Blob_Detect_Blobs_Yellow,
        Blob_Addr       => Blob_Detect_Blob_Addr_Yellow,
        Blob_X0         => Blob_Detect_Blob_X0_Yellow,
        Blob_X1         => Blob_Detect_Blob_X1_Yellow,
        Blob_Y0         => Blob_Detect_Blob_Y0_Yellow,
        Blob_Y1         => Blob_Detect_Blob_Y1_Yellow,
    );
    
    SIGNAL Blob_Detect_Blobs_Black           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_Addr_Black       : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0_Black         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1_Black         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0_Black         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1_Black         : NATURAL   range 0 to 480-1;
    
    NewComponent Blob_Detect
    (
        Blob_Number     => blob_number,
        Blob_Buffer     => 8,
        Width           => 640,
        Height          => 480,
        Min_Blob_Width  => 0,
        Min_Blob_Height => 0,
        Max_Blob_Width  => 640,
        Max_Blob_Height => 480,
        
        New_Pixel       => Area_Compression_New_Pixel,
        Pixel_In        => Area_Compression_Pixel(1),
        Column          => Area_Compression_Column,
        Row             => Area_Compression_Row,
        Blobs           => Blob_Detect_Blobs_Black,
        Blob_Addr       => Blob_Detect_Blob_Addr_Black,
        Blob_X0         => Blob_Detect_Blob_X0_Black,
        Blob_X1         => Blob_Detect_Blob_X1_Black,
        Blob_Y0         => Blob_Detect_Blob_Y0_Black,
        Blob_Y1         => Blob_Detect_Blob_Y1_Black,
    );
    
    SIGNAL Blob_Detect_Blobs_Blue           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_Addr_Blue       : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0_Blue         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1_Blue         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0_Blue         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1_Blue         : NATURAL   range 0 to 480-1;
    
    NewComponent Blob_Detect
    (
        Blob_Number     => blob_number,
        Blob_Buffer     => 8,
        Width           => 640,
        Height          => 480,
        Min_Blob_Width  => 0,
        Min_Blob_Height => 0,
        Max_Blob_Width  => 640,
        Max_Blob_Height => 480,
        
        New_Pixel       => Area_Compression_New_Pixel,
        Pixel_In        => Area_Compression_Pixel(2),
        Column          => Area_Compression_Column,
        Row             => Area_Compression_Row,
        Blobs           => Blob_Detect_Blobs_Blue,
        Blob_Addr       => Blob_Detect_Blob_Addr_Blue,
        Blob_X0         => Blob_Detect_Blob_X0_Blue,
        Blob_X1         => Blob_Detect_Blob_X1_Blue,
        Blob_Y0         => Blob_Detect_Blob_Y0_Blue,
        Blob_Y1         => Blob_Detect_Blob_Y1_Blue,
    );
    
    SIGNAL Blob_Detect_Blobs_White           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_Addr_White       : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0_White         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1_White         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0_White         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1_White         : NATURAL   range 0 to 480-1;
    
    NewComponent Blob_Detect
    (
        Blob_Number     => blob_number,
        Blob_Buffer     => 8,
        Width           => 640,
        Height          => 480,
        Min_Blob_Width  => 0,
        Min_Blob_Height => 0,
        Max_Blob_Width  => 640,
        Max_Blob_Height => 480,
        
        New_Pixel       => Area_Compression_New_Pixel,
        Pixel_In        => Area_Compression_Pixel(3),
        Column          => Area_Compression_Column,
        Row             => Area_Compression_Row,
        Blobs           => Blob_Detect_Blobs_White,
        Blob_Addr       => Blob_Detect_Blob_Addr_White,
        Blob_X0         => Blob_Detect_Blob_X0_White,
        Blob_X1         => Blob_Detect_Blob_X1_White,
        Blob_Y0         => Blob_Detect_Blob_Y0_White,
        Blob_Y1         => Blob_Detect_Blob_Y1_White,
    );
    
    --Select camera output---------------------------------------------------------------
    
    SIGNAL Camera_Capture_iStream     : rgb_stream;
    
    SIGNAL ISSP_source  : std_logic_vector (7 downto 0) := "00000000";
    SIGNAL ISSP1_source : std_logic_vector (7 downto 0) := "01001000";
    SIGNAL ISSP2_source : std_logic_vector (7 downto 0) := "00010001";
    SIGNAL ISSP3_source : std_logic_vector (7 downto 0) := "01001000";
    SIGNAL ISSP4_source : std_logic_vector (7 downto 0) := "00010001";
    SIGNAL ISSP_probe   : std_logic_vector (31 downto 0);
    SIGNAL ISSP1_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP2_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP3_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP4_probe  : std_logic_vector (31 downto 0);
    
    NewComponent ISSP
    (
        source => ISSP_source,
        probe  => ISSP_probe,
    );

    NewComponent ISSP
    (
        source => ISSP1_source,
        probe  => ISSP1_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP2_source,
        probe  => ISSP2_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP3_source,
        probe  => ISSP3_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP4_source,
        probe  => ISSP4_probe,
    );

    --Camera_Capture_iStream <= Camera_Stream;
    --Camera_Capture_iStream <= Color_Correction_Filter_Stream;
    --Camera_Capture_iStream <= Blue_Filter_oStream;
    --Camera_Capture_iStream <= AreaCompression;
    Camera_Capture_iStream <= Square_oStream;
    --Camera_Capture_iStream <= Gaussian_Filter_oStream;
    --Camera_Capture_iStream <= (R => RGB2HSV_oHSV.R, G => RGB2HSV_oHSV.R, B => RGB2HSV_oHSV.R, Column => RGB2HSV_oHSV.Column, Row => RGB2HSV_oHSV.Row, New_Pixel => RGB2HSV_oHSV.New_Pixel);
    --Camera_Capture_iStream <= (R => Gaussian_Filter_oStream.R, G => Gaussian_Filter_oStream.R, B => Gaussian_Filter_oStream.R, Column => Gaussian_Filter_oStream.Column, Row => Gaussian_Filter_oStream.Row, New_Pixel => Gaussian_Filter_oStream.New_Pixel);

    --color_select <= 2;
    
    SIGNAL Blob_Detect_Blobs_Out           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0_Out         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1_Out         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0_Out         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1_Out         : NATURAL   range 0 to 480-1;

    Square_iStream.R(7)      <= Area_Compression_Pixel(color_select);
    Square_iStream.Column    <= Area_Compression_Column;
    Square_iStream.Row       <= Area_Compression_Row;
    Square_iStream.New_Pixel <= Area_Compression_New_Pixel;
    
    Blob_Detect_Blobs_Out <= Blob_Detect_Blobs_Yellow when color_select = 0
    else Blob_Detect_Blobs_Black when color_select = 1
    else Blob_Detect_Blobs_Blue  when color_select = 2
    else Blob_Detect_Blobs_White;
    
    Blob_Detect_Blob_X0_Out <= Blob_Detect_Blob_X0_Yellow when color_select = 0
    else Blob_Detect_Blob_X0_Black when color_select = 1
    else Blob_Detect_Blob_X0_Blue  when color_select = 2
    else Blob_Detect_Blob_X0_White;
    
    Blob_Detect_Blob_X1_Out <= Blob_Detect_Blob_X1_Yellow when color_select = 0
    else Blob_Detect_Blob_X1_Black when color_select = 1
    else Blob_Detect_Blob_X1_Blue  when color_select = 2
    else Blob_Detect_Blob_X1_White;
    
    Blob_Detect_Blob_Y0_Out <= Blob_Detect_Blob_Y0_Yellow when color_select = 0
    else Blob_Detect_Blob_Y0_Black when color_select = 1
    else Blob_Detect_Blob_Y0_Blue  when color_select = 2
    else Blob_Detect_Blob_Y0_White;
    
    Blob_Detect_Blob_Y1_Out <= Blob_Detect_Blob_Y1_Yellow when color_select = 0
    else Blob_Detect_Blob_Y1_Black when color_select = 1
    else Blob_Detect_Blob_Y1_Blue  when color_select = 2
    else Blob_Detect_Blob_Y1_White;
    
    SIGNAL Square_iStream : rgb_stream;
    SIGNAL Square_oStream : rgb_stream;
    
    Square_oStream.New_Pixel <= Square_iStream.New_Pixel;
    Square_oStream.Column    <= Square_iStream.Column;
    Square_oStream.Row       <= Square_iStream.Row;
    
    NewComponent Draw_Square
    (
        Width     => 4,
        Color     => x"FF0000",
        
        Square_X0 => Blob_Detect_Blob_X0_Out,
        Square_X1 => Blob_Detect_Blob_X1_Out,
        Square_Y0 => Blob_Detect_Blob_Y0_Out,
        Square_Y1 => Blob_Detect_Blob_Y1_Out,
        iColumn   => Square_iStream.Column,
        iRow      => Square_iStream.Row,
        iPixel_R  => Square_iStream.R,
        iPixel_G  => Square_iStream.G,
        iPixel_B  => Square_iStream.B,
        oPixel_R  => Square_oStream.R,
        oPixel_G  => Square_oStream.G,
        oPixel_B  => Square_oStream.B,
    );
    
    --Output image with HDMI-------------------------------------------------------------

    --Save images in RAM
    SIGNAL Camera_Capture_Read_Column    : NATURAL          range 0 to 639;
    SIGNAL Camera_Capture_Read_Row       : NATURAL          range 0 to 479;
    SIGNAL Camera_Capture_Read_Data      : STD_LOGIC_VECTOR (23 downto 0);
    SIGNAL Camera_Capture_SDRAM_Read_Ena : STD_LOGIC;

    NewComponent Camera_Capture
    (
        Compression => capture_compression,--4,
        Width       => 1,--8,--4,
        Full_Image  => true,
        RGB         => false,
        CLK_Edge    => true,

        New_Pixel   => Camera_Capture_iStream.New_Pixel,
        Column      => Camera_Capture_iStream.Column,
        Row         => Camera_Capture_iStream.Row,
        Pixel_R     => Camera_Capture_iStream.R,--Yellow_Filter_oStream.R,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.R,
        Pixel_G     => Camera_Capture_iStream.G,--Yellow_Filter_oStream.G,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.G,--Camera_Capture_iPixel.G,
        Pixel_B     => Camera_Capture_iStream.B,--Yellow_Filter_oStream.B,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.B,--Camera_Capture_iPixel.B,

        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
    );

    
    --Read images from RAM to create video stream
    NewComponent CRT_Controller
    (
        image_size_div => 1,
        
        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
        Read_Ena    => Camera_Capture_SDRAM_Read_Ena,
        VS_PCLK     => HDMI_Out_VS_PCLK,
        VS_SCLK     => HDMI_Out_VS_SCLK,
        VS_R        => HDMI_Out_VS_R,
        VS_G        => HDMI_Out_VS_G,
        VS_B        => HDMI_Out_VS_B,
        VS_HS       => HDMI_Out_VS_HS,
        VS_VS       => HDMI_Out_VS_VS,
        VS_DE       => HDMI_Out_VS_DE,
    );

    --Output video stream with hdmi interface
    SIGNAL HDMI_Out_VS_PCLK   : STD_LOGIC;
    SIGNAL HDMI_Out_VS_SCLK   : STD_LOGIC;
    SIGNAL HDMI_Out_VS_R      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_G      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_B      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_HS     : STD_LOGIC;
    SIGNAL HDMI_Out_VS_VS     : STD_LOGIC;
    SIGNAL HDMI_Out_VS_DE     : STD_LOGIC;

    NewComponent HDMI_Out
    (
        VS_PCLK    => HDMI_Out_VS_PCLK,
        VS_SCLK    => HDMI_Out_VS_SCLK,
        VS_R       => HDMI_Out_VS_R,
        VS_G       => HDMI_Out_VS_G,
        VS_B       => HDMI_Out_VS_B,
        VS_HS      => HDMI_Out_VS_HS,
        VS_VS      => HDMI_Out_VS_VS,
        VS_DE      => HDMI_Out_VS_DE,
        oHDMI_DATA => oHDMI_TX,
        oHDMI_CLK  => oHDMI_CLK,
        iHDMI_HPD  => iHDMI_HPD,
    );

}
