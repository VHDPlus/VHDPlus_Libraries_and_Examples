/*
    Name: Camera CSI Example
    Rev: 1.0
    Creator: Leon Beier
    Date: 06.06.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Description: This example takes video data from a camera and outputs it via HDMI
 */

--Statt Column und Row HS und VS Signal

Main
(
    Camera_CLK_Lane      : IN     STD_LOGIC;
    Camera_Data_Lane     : IN     STD_LOGIC_VECTOR (1 downto 0);
    Camera_Enable        : OUT    STD_LOGIC;
    Camera_SCL           : INOUT  STD_LOGIC;
    Camera_SDA           : INOUT  STD_LOGIC;
    
    oHDMI_TX             : OUT    STD_LOGIC_VECTOR(2 downto 0);
    oHDMI_CLK            : OUT    STD_LOGIC;
    iHDMI_HPD            : IN     STD_LOGIC;
)
{

    --Camera Interface-------------------------------------------------------------------
    
    Camera_Enable <= '1';

    --Receive CSI Data
    SIGNAL Camera_Stream         : rgb_stream;
    
    NewComponent CSI_Camera
    (
        CLK_Frequency => 48000000,
        
        Reset         => '0',
        CLK_Lane      => Camera_CLK_Lane,
        Data_Lane     => Camera_Data_Lane,
        SCL           => Camera_SCL,
        SDA           => Camera_SDA,
        
        Pixel_R       => Camera_Stream.R,
        Pixel_G       => Camera_Stream.G,
        Pixel_B       => Camera_Stream.B,
        Column        => Camera_Stream.Column,
        Row           => Camera_Stream.Row,
        New_Pixel     => Camera_Stream.New_Pixel,
    );
    
    --Color Filter-----------------------------------------------------------------------
    
    SIGNAL Color_Correction_Filter_Stream     : rgb_stream;

    --Color_Correction_Filter_Stream <= Camera_Stream;
    NewComponent Color_Correction_Filter
    (
        CLK_Edge     => false,
        
        R_Multiplier => 1,
        R_Divider    => 1,
        R_Add        => 0,
        G_Multiplier => 3,--TO_INTEGER(UNSIGNED(ISSP1_source)),--2,
        G_Divider    => 5,--TO_INTEGER(UNSIGNED(ISSP2_source)),--3,
        G_Add        => 0,
        B_Multiplier => 1,--TO_INTEGER(UNSIGNED(ISSP3_source)),--5,
        B_Divider    => 1,--TO_INTEGER(UNSIGNED(ISSP4_source)),--6,
        B_Add        => 0,
        
        iStream      => Camera_Stream,
        oStream      => Color_Correction_Filter_Stream,
    );
    
    
    --Blur-------------------------------------------------------------------------------
    
    SIGNAL Gaussian_Filter_iStream    : rgb_stream;
    SIGNAL Gaussian_Filter_oStream    : rgb_stream;

    --Gaussian_Filter_iPixel <= Color_Correction_Filter_Stream when ISSP1_source(1) = '0' else RGB2HSV_oHSV;
    --Gaussian_Filter_iStream <= RGB2HSV_oHSV;
    Gaussian_Filter_oStream <= Color_Correction_Filter_Stream;
    /*
    Gaussian_Filter_iStream <= Color_Correction_Filter_Stream;
    NewComponent Gaussian_Filter2
    (
        Filter_Area => 3,--6,
        Color_Depth => 8,--6,
        Gaussian    => false,
        Compression => 1,
        HSV_Mode    => false,--true,
        CLK_Edge    => false,
        
        iStream => Gaussian_Filter_iStream,
        oStream => Gaussian_Filter_oStream,
    );
     */
    /*
    NewComponent Gaussian_RGB_Filter
    (
        iStream   => Gaussian_Filter_iStream,
        oStream   => Gaussian_Filter_oStream,
    );
     */
    
    --Convert color space (for color detection)------------------------------------------
    
    SIGNAL RGB2HSV_oHSV       : rgb_stream;
    SIGNAL RGB2HSV_iRGB       : rgb_stream;
    
    --RGB2HSV_iRGB <= Color_Correction_Filter_Stream when ISSP1_source(0) = '0' else Gaussian_Filter_oPixel;
    --RGB2HSV_iRGB <= Color_Correction_Filter_Stream;
    --RGB2HSV_iRGB <= Camera_Stream;
    RGB2HSV_iRGB <= Gaussian_Filter_oStream;
    
    NewComponent RGB2HSV_Filter
    (
        CLK_Edge => true,
        
        iStream  => RGB2HSV_iRGB,
        oStream  => RGB2HSV_oHSV,
    );
    
    --Color detection--------------------------------------------------------------------

    SIGNAL Color_Threshold_Filter_iStream    : rgb_stream;
    SIGNAL Color_Threshold_Filter_iHSV       : rgb_stream;
    
    --Color_Threshold_Filter_iHSV <= RGB2HSV_oHSV when ISSP1_source(2) = '0' else Gaussian_Filter_oPixel;
    --Color_Threshold_Filter_iHSV  <= Gaussian_Filter_oStream;
    Color_Threshold_Filter_iHSV  <= RGB2HSV_oHSV;
    
    SIGNAL Yellow_Filter_oStream             : rgb_stream;
    Yellow_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Yellow_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Yellow_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 170, --TO_INTEGER(UNSIGNED(ISSP1_source)), --170 --10
        H_Max      => 40,  --TO_INTEGER(UNSIGNED(ISSP2_source)), --40  --30
        S_Min      => 100, --TO_INTEGER(UNSIGNED(ISSP3_source)), --100 --220
        S_Max      => 255, --TO_INTEGER(UNSIGNED(ISSP4_source)), --255 --255
        V_Min      => 60,  --TO_INTEGER(UNSIGNED(ISSP3_source)), --30
        V_Max      => 255, --TO_INTEGER(UNSIGNED(ISSP4_source)), --255
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Yellow_Filter_oStream.R,
        oPixel_G   => Yellow_Filter_oStream.G,
        oPixel_B   => Yellow_Filter_oStream.B,
    );
    
    SIGNAL Black_Filter_oStream     : rgb_stream;
    Black_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Black_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Black_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 0,
        H_Max      => 255,
        S_Min      => 0,
        S_Max      => 255,
        V_Min      => 0,
        V_Max      => 40,

        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Black_Filter_oStream.R,
        oPixel_G   => Black_Filter_oStream.G,
        oPixel_B   => Black_Filter_oStream.B,
    );
    
    SIGNAL Blue_Filter_oStream     : rgb_stream;
    Blue_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    Blue_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    Blue_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 105,--TO_INTEGER(UNSIGNED(ISSP1_source)), --105, --80, --105
        H_Max      => 150,--TO_INTEGER(UNSIGNED(ISSP2_source)), --180, --150, --135
        S_Min      => 120,--TO_INTEGER(UNSIGNED(ISSP1_source)), --120, --40, --50
        S_Max      => 255,--TO_INTEGER(UNSIGNED(ISSP2_source)), --255, --255,
        V_Min      => 60,--TO_INTEGER(UNSIGNED(ISSP3_source)), --60, --20,
        V_Max      => 255,--TO_INTEGER(UNSIGNED(ISSP4_source)), --255, --200,
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => Blue_Filter_oStream.R,
        oPixel_G   => Blue_Filter_oStream.G,
        oPixel_B   => Blue_Filter_oStream.B,
    );
    
    
    SIGNAL White_Filter_oStream     : rgb_stream;
    White_Filter_oStream.Column    <= Color_Threshold_Filter_iHSV.Column;
    White_Filter_oStream.Row       <= Color_Threshold_Filter_iHSV.Row;
    White_Filter_oStream.New_Pixel <= Color_Threshold_Filter_iHSV.New_Pixel;
    
    NewComponent Color_Threshold_HSV_Filter
    (
        BW_Out     => true,
        
        H_Min      => 0,
        H_Max      => 255,
        S_Min      => 0,
        S_Max      => 120,
        V_Min      => 150,
        V_Max      => 255,
        
        iPixel_R   => Color_Threshold_Filter_iStream.R,
        iPixel_G   => Color_Threshold_Filter_iStream.G,
        iPixel_B   => Color_Threshold_Filter_iStream.B,

        iHSV_H     => Color_Threshold_Filter_iHSV.R,--Color_Threshold_Filter_iHSV.R,
        iHSV_S     => Color_Threshold_Filter_iHSV.G,--Color_Threshold_Filter_iHSV.G,
        iHSV_V     => Color_Threshold_Filter_iHSV.B,--Color_Threshold_Filter_iHSV.B,
        
        oPixel_R   => White_Filter_oStream.R,
        oPixel_G   => White_Filter_oStream.G,
        oPixel_B   => White_Filter_oStream.B,
    );
    
    --Threshold Compression--------------------------------------------------------------
    
    SIGNAL AreaCompression : rgb_stream;
    
    NewComponent AreaLimitedCompression
    (
        Image_Width => 640,
        MAX_Area_O  => 250,  --10x10 = 100 -> 60/100 = min 60% blue
        MAX_Area    => 24,
        MIN_Area    => 5,
        Start_Row   => 0,
        CLK_Edge    => false,
        
        iStream     => Blue_Filter_oStream,
        oStream     => AreaCompression,
    );
    
    --Select camera output---------------------------------------------------------------
    
    SIGNAL Camera_Capture_iStream     : rgb_stream;
    
    SIGNAL ISSP_source  : std_logic_vector (7 downto 0) := "00000000";
    SIGNAL ISSP1_source : std_logic_vector (7 downto 0) := "01001000";
    SIGNAL ISSP2_source : std_logic_vector (7 downto 0) := "00010001";
    SIGNAL ISSP3_source : std_logic_vector (7 downto 0) := "01001000";
    SIGNAL ISSP4_source : std_logic_vector (7 downto 0) := "00010001";
    SIGNAL ISSP_probe   : std_logic_vector (31 downto 0);
    SIGNAL ISSP1_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP2_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP3_probe  : std_logic_vector (31 downto 0);
    SIGNAL ISSP4_probe  : std_logic_vector (31 downto 0);
    
    NewComponent ISSP
    (
        source => ISSP_source,
        probe  => ISSP_probe,
    );

    NewComponent ISSP
    (
        source => ISSP1_source,
        probe  => ISSP1_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP2_source,
        probe  => ISSP2_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP3_source,
        probe  => ISSP3_probe,
    );
    
    NewComponent ISSP
    (
        source => ISSP4_source,
        probe  => ISSP4_probe,
    );
    
    /*
    ISSP 0:
    00 = Camera
    01 = After Color Correction
    02 = After Blob detection (ISSP1_source 0-31 sets which blob in buffer)
    03 = Hue (0 red => 30 yellow => 60 green => 90 turquoise => 120 Blue => 150 pink => 180 red)
    04 = Yellow filter with Hue output (Red 150 - 30 Green 30 - 90 Blue 90 - 150)
    05 = Yellow filter with RGB output
    06 = Black filter with Hue output (Red 150 - 30 Green 30 - 90 Blue 90 - 150)
    07 = Black filter with RGB output
    08 = Blue filter with Hue output (Red 150 - 30 Green 30 - 90 Blue 90 - 150)
    09 = Blue filter with RGB output
    0A = White filter with Hue output (Red 150 - 30 Green 30 - 90 Blue 90 - 150)
    0B = White filter with RGB output
    
    ISSP 1:
    (0) = 0: Directly HSV
    (0) = 1: First Gaussian then HSV
    (1) = 0: Directly Gauss
    (1) = 1: First HSV then Gauss
    (2) = 0: Use HSV output for threshold
    (2) = 1: Use Gauss output for threshold
    
    ISSP 2:
    00 = Yellow Blob
    01 = Black Blob
    02 = Blue Blob
    03 = White Blob
     */
    
    --Select filter step
    /*
    SIGNAL oStream_buf : rgb_stream;
    Camera_Capture_iStream.New_Pixel <= Camera_Stream.New_Pixel;
    Process ()
    {
        If(falling_edge(Camera_Stream.New_Pixel))
        {
            Camera_Capture_iStream.R <= oStream_buf.R;
            Camera_Capture_iStream.G <= oStream_buf.G;
            Camera_Capture_iStream.B <= oStream_buf.B;
            Camera_Capture_iStream.Column <= oStream_buf.Column;
            Camera_Capture_iStream.Row <= oStream_buf.Row;
            
            If(ISSP_source = x"00")
            {
                oStream_buf <= Camera_Stream;
            }
            Elsif(ISSP_source = x"01")
            {
                oStream_buf <= Gaussian_Filter_oStream;
            }
            Elsif(ISSP_source = x"02")
            {
                oStream_buf <= (R => Gaussian_Filter_oStream.R, G => Gaussian_Filter_oStream.R, B => Gaussian_Filter_oStream.R, Column => Gaussian_Filter_oStream.Column, Row => Gaussian_Filter_oStream.Row, New_Pixel => Gaussian_Filter_oStream.New_Pixel);
            }
            Elsif(ISSP_source = x"03")
            {
                oStream_buf <= (R => RGB2HSV_oHSV.R, G => RGB2HSV_oHSV.R, B => RGB2HSV_oHSV.R, Column => RGB2HSV_oHSV.Column, Row => RGB2HSV_oHSV.Row, New_Pixel => RGB2HSV_oHSV.New_Pixel);
            }
            Elsif(ISSP_source = x"04")
            {
                oStream_buf <= Yellow_Filter_oStream;
            }
            Elsif(ISSP_source = x"04")
            {
                oStream_buf <= Black_Filter_oStream;
            }
            Elsif(ISSP_source = x"04")
            {
                oStream_buf <= Blue_Filter_oStream;
            }
            Elsif(ISSP_source = x"04")
            {
                oStream_buf <= White_Filter_oStream;
            }
        }
    }
     */
    /*
    Camera_Capture_iStream <= Camera_Stream   when ISSP_source = x"00" else
    Gaussian_Filter_oStream                   when ISSP_source = x"01" else
    (R => Gaussian_Filter_oStream.R, G => Gaussian_Filter_oStream.R, B => Gaussian_Filter_oStream.R, Column => Gaussian_Filter_oStream.Column, Row => Gaussian_Filter_oStream.Row, New_Pixel => Gaussian_Filter_oStream.New_Pixel) when ISSP_source = x"02" else
    (R => RGB2HSV_oHSV.R, G => RGB2HSV_oHSV.R, B => RGB2HSV_oHSV.R, Column => RGB2HSV_oHSV.Column, Row => RGB2HSV_oHSV.Row, New_Pixel => RGB2HSV_oHSV.New_Pixel) when ISSP_source = x"03" else
    Yellow_Filter_oStream                    when ISSP_source = x"04" else
    Yellow_Filter_oStream                    when ISSP_source = x"05" else
    Black_Filter_oStream                     when ISSP_source = x"06" else
    Black_Filter_oStream                     when ISSP_source = x"07" else
    Blue_Filter_oStream                      when ISSP_source = x"08" else
    Blue_Filter_oStream                      when ISSP_source = x"09" else
    White_Filter_oStream                     when ISSP_source = x"0A" else
    White_Filter_oStream;
    --Select color filter color space
    Color_Threshold_Filter_iStream <= Gaussian_Filter_oStream;
     */
    --Camera_Capture_iStream <= Camera_Stream;
    --Camera_Capture_iStream <= Color_Correction_Filter_Stream;
    --Camera_Capture_iStream <= Blue_Filter_oStream;
    --Camera_Capture_iStream <= AreaCompression;
    Camera_Capture_iStream <= Square_oStream;
    --Camera_Capture_iStream <= Gaussian_Filter_oStream;
    --Camera_Capture_iStream <= (R => RGB2HSV_oHSV.R, G => RGB2HSV_oHSV.R, B => RGB2HSV_oHSV.R, Column => RGB2HSV_oHSV.Column, Row => RGB2HSV_oHSV.Row, New_Pixel => RGB2HSV_oHSV.New_Pixel);
    --Camera_Capture_iStream <= (R => Gaussian_Filter_oStream.R, G => Gaussian_Filter_oStream.R, B => Gaussian_Filter_oStream.R, Column => Gaussian_Filter_oStream.Column, Row => Gaussian_Filter_oStream.Row, New_Pixel => Gaussian_Filter_oStream.New_Pixel);
    --Color_Threshold_Filter_iStream <= (R => RGB2HSV_oHSV.R, G => RGB2HSV_oHSV.R, B => RGB2HSV_oHSV.R) when (ISSP_source = x"04" OR ISSP_source = x"06" OR ISSP_source = x"08" OR ISSP_source = x"0A")
    --else Gaussian_Filter_oPixel;
    
    
    --Blob detection---------------------------------------------------------------------

    ISSP_probe  <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blobs, 32));
    ISSP1_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_X0, 32));
    ISSP2_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_X1, 32));
    ISSP3_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_Y0, 32));
    ISSP4_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Blob_Detect_Blob_Y1, 32));
    
    Blob_Detect_Blob_Addr <= TO_INTEGER(UNSIGNED(ISSP_source));
    
    SIGNAL Blob_Detect_Blobs           : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_Addr       : NATURAL   range 0 to 64-1;
    SIGNAL Blob_Detect_Blob_X0         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_X1         : NATURAL   range 0 to 640-1;
    SIGNAL Blob_Detect_Blob_Y0         : NATURAL   range 0 to 480-1;
    SIGNAL Blob_Detect_Blob_Y1         : NATURAL   range 0 to 480-1;
    
    NewComponent Blob_Detect
    (
        Blob_Number     => 4,
        Width           => 640,
        Height          => 480,
        Min_Blob_Width  => 0,
        Min_Blob_Height => 0,
        Max_Blob_Width  => 640,
        Max_Blob_Height => 480,
        
        New_Pixel       => AreaCompression.New_Pixel,
        Pixel_In        => AreaCompression.R(0),
        Column          => AreaCompression.Column,
        Row             => AreaCompression.Row,
        Blobs           => Blob_Detect_Blobs,
        Blob_Addr       => Blob_Detect_Blob_Addr,
        Blob_X0         => Blob_Detect_Blob_X0,
        Blob_X1         => Blob_Detect_Blob_X1,
        Blob_Y0         => Blob_Detect_Blob_Y0,
        Blob_Y1         => Blob_Detect_Blob_Y1,
    );
    
    SIGNAL Square_iStream : rgb_stream;
    SIGNAL Square_oStream : rgb_stream;
    
    Square_iStream <= AreaCompression;
    
    Square_oStream.New_Pixel <= Square_iStream.New_Pixel;
    Square_oStream.Column    <= Square_iStream.Column;
    Square_oStream.Row       <= Square_iStream.Row;
    
    NewComponent Draw_Square
    (
        Width     => 4,
        Color     => x"FF0000",
        
        Square_X0 => Blob_Detect_Blob_X0,
        Square_X1 => Blob_Detect_Blob_X1,
        Square_Y0 => Blob_Detect_Blob_Y0,
        Square_Y1 => Blob_Detect_Blob_Y1,
        iColumn   => Square_iStream.Column,
        iRow      => Square_iStream.Row,
        iPixel_R  => Square_iStream.R,
        iPixel_G  => Square_iStream.G,
        iPixel_B  => Square_iStream.B,
        oPixel_R  => Square_oStream.R,
        oPixel_G  => Square_oStream.G,
        oPixel_B  => Square_oStream.B,
    );
    
    /*
    SIGNAL CLK_150MHz : STD_LOGIC;
    
    NewComponent PLL
    (
        inclk0 => CLK,
        c0     => CLK_150MHz,
    );
    
    
    SIGNAL blob_in : NATURAL range 0 to 255;
    
    blob_in <= (TO_INTEGER(UNSIGNED(Yellow_Filter_oStream.R)) + TO_INTEGER(UNSIGNED(Yellow_Filter_oStream.G)) + TO_INTEGER(UNSIGNED(Yellow_Filter_oStream.B)))/3 when ISSP2_source = x"00" else
    (TO_INTEGER(UNSIGNED(Black_Filter_oStream.R)) + TO_INTEGER(UNSIGNED(Black_Filter_oStream.G)) + TO_INTEGER(UNSIGNED(Black_Filter_oStream.B)))/3 when ISSP2_source = x"01" else
    (TO_INTEGER(UNSIGNED(Blue_Filter_oStream.R)) + TO_INTEGER(UNSIGNED(Blue_Filter_oStream.G)) + TO_INTEGER(UNSIGNED(Blue_Filter_oStream.B)))/3 when ISSP2_source = x"02" else
    (TO_INTEGER(UNSIGNED(White_Filter_oStream.R)) + TO_INTEGER(UNSIGNED(White_Filter_oStream.G)) + TO_INTEGER(UNSIGNED(White_Filter_oStream.B)))/3;
    
    SIGNAL hsync : STD_LOGIC;
    SIGNAL vsync : STD_LOGIC;
    
    hsync <= '1' when Gaussian_Filter_Column = 0 else '0';
    vsync <= '1' when Gaussian_Filter_Row = 0 else '0';
     */
    
    /*
    SIGNAL hsync : STD_LOGIC;
    SIGNAL vsync : STD_LOGIC;
    
    hsync <= '1' when AreaCompression.Column = 0 else '0';
    vsync <= '1' when AreaCompression.Row = 0 else '0';
    
    NewComponent blob_detection
    (
        LINE_SIZE      => 640,
        
        clk            => CLK_150MHz,
        resetn         => '1',
        pixel_in_clk   => AreaCompression.New_Pixel,
        pixel_in_hsync => hsync,
        pixel_in_vsync => vsync,
        pixel_in_data  => AreaCompression.R,
        blob_data      => blob_detection_blob_data,
        mem_addr       => blob_detection_mem_addr,
        mem_data       => blob_detection_mem_data,
        mem_wr         => blob_detection_mem_wr,
    );
    
    TYPE blob_pos IS RECORD
    x0 : NATURAL range 0 to 1024;
    y0 : NATURAL range 0 to 1024;
    x1 : NATURAL range 0 to 1024;
    y1 : NATURAL range 0 to 1024;
    END RECORD blob_pos;
    
    SIGNAL blob_detection_blob_data      : std_logic_vector (7 downto 0);
    SIGNAL blob_detection_mem_addr       : std_logic_vector (15 downto 0);
    SIGNAL blob_detection_mem_data       : std_logic_vector (15 downto 0);
    SIGNAL blob_detection_mem_wr         : std_logic;
    
    CONSTANT blob_buf_width : NATURAL := 32;
    
    TYPE blob_buf_type IS ARRAY (0 to blob_buf_width-1) OF blob_pos;
    SIGNAL blob_buf : blob_buf_type;
    
    SIGNAL blobs_in_buf : NATURAL range 0 to blob_buf_width-1 := 0;
    
    Process ()
    {
        If(rising_edge(CLK_150MHz))
        {
            VARIABLE wr_reg : STD_LOGIC;
            VARIABLE receive_cnt : NATURAL range 0 to 2 := 0;
            VARIABLE data_reg : STD_LOGIC_VECTOR(47 downto 0);
            If((wr_reg = '0' AND blob_detection_mem_wr = '1') OR receive_cnt > 0)
            {
                data_reg(16*receive_cnt + 15 downto 16*receive_cnt) := blob_detection_mem_data;
                
                If(receive_cnt < 2)
                {
                    receive_cnt := receive_cnt + 1;
                }
                Else
                {
                    --ISSP_probe <= data_reg(31 downto 0);
                    --ISSP1_probe(15 downto 0) <= data_reg(47 downto 32);
                    
                    VARIABLE blob_reg : blob_pos;
                    blob_reg.y0 := TO_INTEGER(UNSIGNED(data_reg(9 downto 0)));
                    blob_reg.x0 := TO_INTEGER(UNSIGNED(data_reg(19 downto 10)));
                    blob_reg.y1 := TO_INTEGER(UNSIGNED(data_reg(29 downto 20)));
                    blob_reg.x1 := TO_INTEGER(UNSIGNED(data_reg(39 downto 30)));
                    
                    --If(blob_reg.x0 - blob_reg.x1m> 2)
                    --{
                    --blob_buf(blobs_in_buf) <= blob_reg;
                    --blobs_in_buf <= blobs_in_buf + 1;
                    --}
                    
                    blob_buf(blobs_in_buf) <= blob_reg;
                    blobs_in_buf <= blobs_in_buf + 1;
                    receive_cnt := 0;
                }
            }
            wr_reg := blob_detection_mem_wr;
        }
    }
    
    ISSP1_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(blob_buf(TO_INTEGER(UNSIGNED(ISSP_source))).x0, 32));
    ISSP2_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(blob_buf(TO_INTEGER(UNSIGNED(ISSP_source))).x1, 32));
    ISSP3_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(blob_buf(TO_INTEGER(UNSIGNED(ISSP_source))).y0, 32));
    ISSP4_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(blob_buf(TO_INTEGER(UNSIGNED(ISSP_source))).y1, 32));
     */
    /*
    CONSTANT Square_Number : NATURAL := 4;
    
    Square_oPixel(0).R <= Color_Correction_Filter_Stream.R;
    Square_oPixel(0).G <= Color_Correction_Filter_Stream.G;
    Square_oPixel(0).B <= Color_Correction_Filter_Stream.B;

    TYPE Square_oPixel_type IS ARRAY (0 to Square_Number) OF rgb_data;
    SIGNAL Square_oPixel : Square_oPixel_type;
    
    SIGNAL Square_oStream : rgb_stream;
    Square_oStream.R <= Square_oPixel(Square_Number).R;
    Square_oStream.G <= Square_oPixel(Square_Number).G;
    Square_oStream.B <= Square_oPixel(Square_Number).B;
    Square_oStream.Column    <= Color_Threshold_Filter_iStream.Column;
    Square_oStream.Row       <= Color_Threshold_Filter_iStream.Row;
    Square_oStream.New_Pixel <= Color_Threshold_Filter_iStream.New_Pixel;
    
    Generate (for i in 0 to Square_Number-1)
    {
        NewComponent Draw_Square
        (
            Width     => 4,
            Color     => x"FF0000",
            
            Square_X0 => blob_buf(i).X0,
            Square_X1 => blob_buf(i).X1,
            Square_Y0 => blob_buf(i).Y0,
            Square_Y1 => blob_buf(i).Y1,
            iColumn   => Color_Correction_Filter_Stream.Column,
            iRow      => Color_Correction_Filter_Stream.Row,
            iPixel_R  => Square_oPixel(i).R,
            iPixel_G  => Square_oPixel(i).G,
            iPixel_B  => Square_oPixel(i).B,
            oPixel_R  => Square_oPixel(i+1).R,
            oPixel_G  => Square_oPixel(i+1).G,
            oPixel_B  => Square_oPixel(i+1).B,
        );
    }
     */

    --Output image with HDMI-------------------------------------------------------------

    --Save images in RAM
    SIGNAL Camera_Capture_Read_Column    : NATURAL          range 0 to 639;
    SIGNAL Camera_Capture_Read_Row       : NATURAL          range 0 to 479;
    SIGNAL Camera_Capture_Read_Data      : STD_LOGIC_VECTOR (23 downto 0);
    SIGNAL Camera_Capture_SDRAM_Read_Ena : STD_LOGIC;

    NewComponent Camera_Capture
    (
        Compression => 2,--4,
        Width       => 1,--8,--4,
        Full_Image  => true,
        RGB         => false,
        CLK_Edge    => true,

        New_Pixel   => Camera_Capture_iStream.New_Pixel,
        Column      => Camera_Capture_iStream.Column,
        Row         => Camera_Capture_iStream.Row,
        Pixel_R     => Camera_Capture_iStream.R,--Yellow_Filter_oStream.R,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.R,
        Pixel_G     => Camera_Capture_iStream.G,--Yellow_Filter_oStream.G,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.G,--Camera_Capture_iPixel.G,
        Pixel_B     => Camera_Capture_iStream.B,--Yellow_Filter_oStream.B,--Gaussian_Filter_oPixel.R,--Color_Correction_Filter_Stream.B,--Camera_Capture_iPixel.B,

        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
    );


    --Read images from RAM to create video stream
    NewComponent CRT_Controller
    (
        image_size_div => 1,
        
        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
        Read_Ena    => Camera_Capture_SDRAM_Read_Ena,
        VS_PCLK     => HDMI_Out_VS_PCLK,
        VS_SCLK     => HDMI_Out_VS_SCLK,
        VS_R        => HDMI_Out_VS_R,
        VS_G        => HDMI_Out_VS_G,
        VS_B        => HDMI_Out_VS_B,
        VS_HS       => HDMI_Out_VS_HS,
        VS_VS       => HDMI_Out_VS_VS,
        VS_DE       => HDMI_Out_VS_DE,
    );

    --Output video stream with hdmi interface
    SIGNAL HDMI_Out_VS_PCLK   : STD_LOGIC;
    SIGNAL HDMI_Out_VS_SCLK   : STD_LOGIC;
    SIGNAL HDMI_Out_VS_R      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_G      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_B      : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL HDMI_Out_VS_HS     : STD_LOGIC;
    SIGNAL HDMI_Out_VS_VS     : STD_LOGIC;
    SIGNAL HDMI_Out_VS_DE     : STD_LOGIC;

    NewComponent HDMI_Out
    (
        VS_PCLK    => HDMI_Out_VS_PCLK,
        VS_SCLK    => HDMI_Out_VS_SCLK,
        VS_R       => HDMI_Out_VS_R,
        VS_G       => HDMI_Out_VS_G,
        VS_B       => HDMI_Out_VS_B,
        VS_HS      => HDMI_Out_VS_HS,
        VS_VS      => HDMI_Out_VS_VS,
        VS_DE      => HDMI_Out_VS_DE,
        oHDMI_DATA => oHDMI_TX,
        oHDMI_CLK  => oHDMI_CLK,
        iHDMI_HPD  => iHDMI_HPD,
    );

}
