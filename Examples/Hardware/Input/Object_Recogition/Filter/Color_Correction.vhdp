Component Color_Correction_Filter
(
    Generic
    (
        R_Multiplier : NATURAL := 1;
        R_Divider    : NATURAL := 1;
        R_Add        : INTEGER := 0;
        
        G_Multiplier : NATURAL := 1;
        G_Divider    : NATURAL := 1;
        G_Add        : INTEGER := 0;
        
        B_Multiplier : NATURAL := 1;
        B_Divider    : NATURAL := 1;
        B_Add        : INTEGER := 0;
    );
    
    iPixel_R   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_G   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_B   : IN STD_LOGIC_VECTOR (7 downto 0);
    iColumn    : IN NATURAL range 0 to 639 := 0;
    iRow       : IN NATURAL range 0 to 479 := 0;
    iNew_Pixel : IN STD_LOGIC;
    
    oPixel_R   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_G   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_B   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oColumn    : BUFFER NATURAL range 0 to 639 := 0;
    oRow       : BUFFER NATURAL range 0 to 479 := 0;
    oNew_Pixel : BUFFER STD_LOGIC;
)
{
    Process R_Calc ()
    {
        If(rising_edge(iNew_Pixel))
        {
            VARIABLE pixel_buf : STD_LOGIC_VECTOR(8 downto 0);
            pixel_buf := STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_R))*R_Multiplier)/R_Divider + R_Add, pixel_buf'LENGTH));
            If(pixel_buf(8) = '1')
            {
                pixel_buf := (others => '1');
            }
            oPixel_R <= pixel_buf(7 downto 0);
        }
    }
    
    Process G_Calc ()
    {
        If(rising_edge(iNew_Pixel))
        {
            VARIABLE pixel_buf : STD_LOGIC_VECTOR(8 downto 0);
            pixel_buf := STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_G))*G_Multiplier)/G_Divider + G_Add, pixel_buf'LENGTH));
            If(pixel_buf(8) = '1')
            {
                pixel_buf := (others => '1');
            }
            oPixel_G <= pixel_buf(7 downto 0);
        }
    }
    
    Process B_Calc ()
    {
        If(rising_edge(iNew_Pixel))
        {
            VARIABLE pixel_buf : STD_LOGIC_VECTOR(8 downto 0);
            pixel_buf := STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_B))*B_Multiplier)/B_Divider + B_Add, pixel_buf'LENGTH));
            If(pixel_buf(8) = '1')
            {
                pixel_buf := (others => '1');
            }
            oPixel_B <= pixel_buf(7 downto 0);
        }
    }
    
    Process Col_Row_Shift ()
    {
        If(rising_edge(iNew_Pixel))
        {
            oColumn    <= iColumn;
            oRow       <= iRow;
        }
    }
    
    oNew_Pixel <= iNew_Pixel;
}