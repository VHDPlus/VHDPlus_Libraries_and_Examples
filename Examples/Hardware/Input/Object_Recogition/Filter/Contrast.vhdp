Component Contrast_Filter
(
    Factor_Multiplier : IN NATURAL range 0 to 15 := 1;
    Factor_Divider    : IN NATURAL range 0 to 15 := 1;
    Average           : IN NATURAL range 0 to 255 := 1;
    
    iPixel_R   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_G   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_B   : IN STD_LOGIC_VECTOR (7 downto 0);
    
    oPixel_R   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_G   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_B   : OUT STD_LOGIC_VECTOR (7 downto 0);
)
{

    SIGNAL pixel_buf_r : INTEGER range -100 to 355;
    SIGNAL pixel_buf_g : INTEGER range -100 to 355;
    SIGNAL pixel_buf_b : INTEGER range -100 to 355;
    pixel_buf_r <= ((TO_INTEGER(UNSIGNED(iPixel_R))-Average)*Factor_Multiplier)/Factor_Divider + Average;
    pixel_buf_g <= ((TO_INTEGER(UNSIGNED(iPixel_G))-Average)*Factor_Multiplier)/Factor_Divider + Average;
    pixel_buf_b <= ((TO_INTEGER(UNSIGNED(iPixel_B))-Average)*Factor_Multiplier)/Factor_Divider + Average;
    oPixel_R <= STD_LOGIC_VECTOR(TO_UNSIGNED(pixel_buf_r,8)) when pixel_buf_r <= 255 AND pixel_buf_r >= 0 else
    (others => '1') when pixel_buf_r > 255 else (others => '0');
    oPixel_G <= STD_LOGIC_VECTOR(TO_UNSIGNED(pixel_buf_g,8)) when pixel_buf_g <= 255 AND pixel_buf_g >= 0 else
    (others => '1') when pixel_buf_g > 255 else (others => '0');
    oPixel_B <= STD_LOGIC_VECTOR(TO_UNSIGNED(pixel_buf_b,8)) when pixel_buf_b <= 255 AND pixel_buf_b >= 0 else
    (others => '1') when pixel_buf_b > 255 else (others => '0');
    
}