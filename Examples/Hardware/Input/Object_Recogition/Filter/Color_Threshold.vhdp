Component Color_Threshold_Filter
(
    Generic
    (
        R_Min : NATURAL := 0;
        R_Max : NATURAL := 255;
        
        G_Min : NATURAL := 0;
        G_Max : NATURAL := 255;
        
        B_Min : NATURAL := 0;
        B_Max : NATURAL := 255;
    );
    
    iPixel_R   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_G   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_B   : IN STD_LOGIC_VECTOR (7 downto 0);
    iColumn    : IN NATURAL range 0 to 639 := 0;
    iRow       : IN NATURAL range 0 to 479 := 0;
    iNew_Pixel : IN STD_LOGIC;
    
    oPixel_R   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_G   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_B   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oColumn    : BUFFER NATURAL range 0 to 639 := 0;
    oRow       : BUFFER NATURAL range 0 to 479 := 0;
    oNew_Pixel : BUFFER STD_LOGIC;
)
{
    Process R_Calc ()
    {
        If(rising_edge(iNew_Pixel))
        {
            If(UNSIGNED(iPixel_R) >= R_Min AND UNSIGNED(iPixel_R) <= R_Max AND UNSIGNED(iPixel_G) >= G_Min AND UNSIGNED(iPixel_G) <= G_Max AND UNSIGNED(iPixel_B) >= B_Min AND UNSIGNED(iPixel_B) <= B_Max)
            {
                oPixel_R <= iPixel_R;
                oPixel_G <= iPixel_G;
                oPixel_B <= iPixel_B;
            }
            Else
            {
                oPixel_R <= (others => '0');
                oPixel_G <= (others => '0');
                oPixel_B <= (others => '0');
            }
        }
    }
    
    Process Col_Row_Shift ()
    {
        If(rising_edge(iNew_Pixel))
        {
            oColumn    <= iColumn;
            oRow       <= iRow;
        }
    }
    
    oNew_Pixel <= iNew_Pixel;
}