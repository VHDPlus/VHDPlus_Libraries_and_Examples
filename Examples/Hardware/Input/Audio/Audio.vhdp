--Connect your headset after programming

Main
(
    IRQ   : IN STD_LOGIC;
    SDA   : INOUT STD_LOGIC;
    SCL   : INOUT STD_LOGIC;
    MCLK  : OUT STD_LOGIC;
    BCLK  : IN STD_LOGIC;
    LRCLK : IN STD_LOGIC;
    SDOUT : IN STD_LOGIC;
    SDIN  : BUFFER STD_LOGIC;
    
    Debug_LRCLK  : OUT STD_LOGIC;
    Debug_BCLK   : OUT STD_LOGIC;
    Debug_SDOUT  : OUT STD_LOGIC;
    Debug_SDIN   : OUT STD_LOGIC;
    
    LED   : OUT STD_LOGIC;
)
{
    Debug_LRCLK <= LRCLK;
    Debug_BCLK <= BCLK;
    Debug_SDOUT <= SDOUT;
    Debug_SDIN <= SDIN;
    LED   <= LRCLK;
    
    CONSTANT Mute_Threshold : NATURAL := 1000;

    SIGNAL Audio_Codec_Component_ADC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_ADC_R : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_R : SIGNED  (15 downto 0);
    NewComponent Audio_Codec_Component
    (
        Microphone_Ena   => true,
        Line_In_Ena      => false,
        Differential_Out => false,
        
        Mic_In_Gain => 15,
        ADC_Volume => 0,
        
        Reset => '0',
        IRQ   => IRQ,
        SDA   => SDA,
        SCL   => SCL,
        MCLK  => MCLK,
        BCLK  => BCLK,
        LRCLK => LRCLK,
        SDOUT => SDOUT,
        SDIN  => SDIN,
        ADC_L => Audio_Codec_Component_ADC_L,
        ADC_R => Audio_Codec_Component_ADC_R,
        DAC_L => Audio_Codec_Component_DAC_L,
        DAC_R => Audio_Codec_Component_DAC_R,
    );
    
    Audio_Codec_Component_DAC_L <= Audio_Codec_Component_ADC_L when mic_en = '1' else (others => '0');
    Audio_Codec_Component_DAC_R <= Audio_Codec_Component_ADC_L when mic_en = '1' else (others => '0');
    
    --Automatic mute
    Process ()
    {
        Thread
        {
            SIGNAL mic_en : STD_LOGIC := '0';
            VARIABLE mic_delay_cnt : NATURAL range 0 to 12000000/4 := 12000000/4; --250ms
            Wait(500ms);
            While(true)
            {
                While(abs(Audio_Codec_Component_ADC_L) < Mute_Threshold){}
                mic_en <= '1';
                mic_delay_cnt := 0;
                While(mic_en = '1')
                {
                    If(abs(Audio_Codec_Component_ADC_L) > Mute_Threshold)
                    {
                        mic_delay_cnt := 0;
                    }
                }
                Wait(50ms);
            }
        }
        
        If(mic_delay_cnt < 12000000/4)
        {
            mic_delay_cnt := mic_delay_cnt + 1;
        }
        Else
        {
            mic_en <= '0';
        }
    }
    
    ISSP_probe <= x"0000" & STD_LOGIC_VECTOR(Audio_Codec_Component_ADC_L) when Audio_Codec_Component_ADC_L(15) = '0' else x"FFFF" & STD_LOGIC_VECTOR(Audio_Codec_Component_ADC_L);
    
    SIGNAL ISSP_source : std_logic_vector (7 downto 0);
    SIGNAL ISSP_probe  : std_logic_vector (31 downto 0);
    NewComponent ISSP
    (
        source => ISSP_source,
        probe  => ISSP_probe,
    );
}