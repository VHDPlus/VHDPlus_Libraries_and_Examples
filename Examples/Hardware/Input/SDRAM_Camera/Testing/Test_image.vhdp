Component Test_Image_Generator
(
    Generic
    (
        image_size_div : NATURAL := 1;
        pixel_clk_div  : NATURAL := 1; --1 = 1/2 CLK 2 = 1/4 CLK 3 = 1/6 CLK
    );
    
    oPixel_R   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_G   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_B   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oColumn    : OUT NATURAL range 0 to 639 := 0;
    oRow       : OUT NATURAL range 0 to 479 := 0;
    oNew_Pixel : OUT STD_LOGIC;
)
{
    SIGNAL pixel_clk : STD_LOGIC;
    --divide CLK by two for pixel_clk
    Process ()
    {
        VARIABLE pixel_clk_count : NATURAL range 0 to pixel_clk_div-1 := 0;
        If(pixel_clk_count < pixel_clk_div-1)
        {
            pixel_clk_count := pixel_clk_count + 1;
        }
        Else
        {
            pixel_clk <= NOT pixel_clk;
            pixel_clk_count := 0;
        }
    }
    
    oColumn    <= colum_count;
    oRow       <= row_count;
    oNew_Pixel <= pixel_clk;
    oPixel_R   <= out_pixel_buf(23 downto 16);
    oPixel_G   <= out_pixel_buf(15 downto 8);
    oPixel_B   <= out_pixel_buf(7 downto 0);
    
    Process ()
    {
        If(rising_edge(pixel_clk))
        {
            SIGNAL colum_count : NATURAL range 0 to 640/image_size_div-1 := 0;
            SIGNAL row_count   : NATURAL range 0 to 480/image_size_div-1 := 0;
            SIGNAL out_pixel_buf : STD_LOGIC_VECTOR(23 downto 0);
            Thread
            {
                SeqFor(row_count <= 0; row_count < 480/image_size_div-1; row_count <= row_count + 1)
                {
                    out_pixel_buf <= (others => '0');
                    SeqFor(colum_count <= 0; colum_count < 640/image_size_div-1; colum_count <= colum_count + 1)
                    {
                        out_pixel_buf <= STD_LOGIC_VECTOR(UNSIGNED(out_pixel_buf)+((2**24)/(639/image_size_div)));
                    }
                }
            }
        }
    }
}