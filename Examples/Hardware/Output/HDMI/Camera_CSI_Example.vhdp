Main
(
    Camera_CLK_Lane      : IN STD_LOGIC;
    Camera_Data_Lane     : IN STD_LOGIC_VECTOR (1 downto 0);
    Camera_Enable        : OUT STD_LOGIC;
    Camera_SCL           : INOUT STD_LOGIC;
    Camera_SDA           : INOUT STD_LOGIC;
    
    oHDMI_TX             : OUT STD_LOGIC_VECTOR(2 downto 0);
    oHDMI_CLK            : OUT STD_LOGIC;
    iHDMI_HPD            : IN  STD_LOGIC;
)
{
    Camera_Enable <= '1';

    SIGNAL Camera_Pixel_R       : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL Camera_Pixel_G       : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL Camera_Pixel_B       : STD_LOGIC_VECTOR (7 downto 0);
    SIGNAL Camera_Column        : NATURAL          range 0 to 639;
    SIGNAL Camera_Row           : NATURAL          range 0 to 479;
    SIGNAL Camera_New_Pixel     : STD_LOGIC;
    NewComponent CSI_Camera
    (
        CLK_Frequency => 48000000,
        
        Reset         => '0',
        CLK_Lane      => Camera_CLK_Lane,
        Data_Lane     => Camera_Data_Lane,
        SCL           => Camera_SCL,
        SDA           => Camera_SDA,
        
        Pixel_R       => Camera_Pixel_R,
        Pixel_G       => Camera_Pixel_G,
        Pixel_B       => Camera_Pixel_B,
        Column        => Camera_Column,
        Row           => Camera_Row,
        New_Pixel     => Camera_New_Pixel,
    );
    
    SIGNAL Camera_Capture_Read_Column : NATURAL          range 0 to 639;
    SIGNAL Camera_Capture_Read_Row    : NATURAL          range 0 to 479;
    SIGNAL Camera_Capture_Read_Data   : STD_LOGIC_VECTOR (23 downto 0);
    NewComponent Camera_Capture
    (
        New_Pixel   => Camera_New_Pixel,
        Column      => Camera_Column,
        Row         => Camera_Row,
        Pixel_R     => Camera_Pixel_R,
        Pixel_G     => Camera_Pixel_G,
        Pixel_B     => Camera_Pixel_B,
        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
    );
    
    NewComponent CRT_Controller
    (
        Read_Column => Camera_Capture_Read_Column,
        Read_Row    => Camera_Capture_Read_Row,
        Read_Data   => Camera_Capture_Read_Data,
        VS_PCLK     => iPCLK,
        VS_SCLK     => iSCLK,
        VS_R        => iRED,
        VS_G        => iGRN,
        VS_B        => iBLU,
        VS_HS       => iHS,
        VS_VS       => iVS,
        VS_DE       => iDE,
    );

    AttributeDeclaration
    {
        SIGNAL iPCLK  : STD_LOGIC;
        SIGNAL iSCLK  : STD_LOGIC;
        SIGNAL iRED   : STD_LOGIC_VECTOR(7 downto 0);
        SIGNAL iGRN   : STD_LOGIC_VECTOR(7 downto 0);
        SIGNAL iBLU   : STD_LOGIC_VECTOR(7 downto 0);
        SIGNAL iHS    : STD_LOGIC;
        SIGNAL iVS    : STD_LOGIC;
        SIGNAL iDE    : STD_LOGIC;
        VHDL
        {
            component DVI_OUT
            port (
                iPCLK  : IN STD_LOGIC;
                iSCLK  : IN STD_LOGIC;
                
                iRED   : IN STD_LOGIC_VECTOR(7 downto 0);
                iGRN   : IN STD_LOGIC_VECTOR(7 downto 0);
                iBLU   : IN STD_LOGIC_VECTOR(7 downto 0);
                iHS    : IN STD_LOGIC;
                iVS    : IN STD_LOGIC;
                iDE    : IN STD_LOGIC;
                
                oDVI_DATA : OUT STD_LOGIC_VECTOR(2 downto 0);
                oDVI_CLK  : OUT STD_LOGIC;
                iDVI_HPD  : IN  STD_LOGIC
            );
            end component;
        }
    }
    
    VHDL
    {
        u1: DVI_OUT port map
        (
            iPCLK     => iPCLK,
            iSCLK     => iSCLK,
            
            iRED      => iRED,
            iGRN      => iGRN,
            iBLU      => iBLU,
            iHS       => iHS,
            iVS       => iVS,
            iDE       => iDE,
            
            oDVI_DATA => oHDMI_TX,
            oDVI_CLK  => oHDMI_CLK,
            iDVI_HPD  => iHDMI_HPD
        );
    }
    
}