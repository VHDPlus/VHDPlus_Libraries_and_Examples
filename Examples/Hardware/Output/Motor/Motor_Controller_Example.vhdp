Main
(
    Encoder_L           : IN STD_LOGIC;
    Encoder_R           : IN STD_LOGIC;
    Motor_LF            : BUFFER STD_LOGIC;
    Motor_LB            : BUFFER STD_LOGIC;
    Motor_RF            : BUFFER STD_LOGIC;
    Motor_RB            : BUFFER STD_LOGIC;
    
    btn                 : in STD_LOGIC := '0';
    leds                : OUT STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
)
{
    --Motor controller settings
    CONSTANT Motor_Controller_Holes_In_Disk       : NATURAL := 20;    --21 Holes
    CONSTANT Motor_Controller_Gear_Ratio          : NATURAL := 90;    --1:90 Ratio
    CONSTANT Motor_Controller_Wheel_Circumference : NATURAL := 100;   --100mm circumference
    CONSTANT Motor_Controller_Max_Length          : NATURAL := 10000; --10m

    --Route definition
    SIGNAL Route_Length : NATURAL := 3;
    
    TYPE Route_Array IS ARRAY (natural range <>) OF Integer range (-1)*Motor_Controller_Max_Length to Motor_Controller_Max_Length;
    CONSTANT Route_L     : Route_Array :=   (
        500,
        -200,
        500
    );
    
    CONSTANT Route_R     : Route_Array :=   (
        500,
        200,
        500
    );
    
    CONSTANT Route_Speed : Route_Array :=   (
        220,
        220,
        220
    );
    
    --show some information with the leds
    leds(0) <= Motor_Controller_Error;
    leds(1) <= Motor_Controller_Finished;
    
    leds(2) <= Encoder_L;
    leds(3) <= Encoder_R;
    
    leds(4) <= Motor_LF;
    leds(5) <= Motor_LB;
    leds(6) <= Motor_RF;
    leds(7) <= Motor_RB;
    
    Process ()
    {
        Thread
        {
            While(btn = '1') {} --wait while button not pressed
            SeqFor(VARIABLE i : INTEGER := 0; i < Route_Length; i := i + 1)
            {
                --set route part
                Motor_Controller_Drive_L <= Route_L(i);
                Motor_Controller_Drive_R <= Route_R(i);
                Motor_Controller_Drive_Speed <= Route_Speed(i);
                
                --start driving
                Motor_Controller_RST_Drive <= '1';
                Step { Motor_Controller_RST_Drive <= '0'; }
                While(Motor_Controller_Finished = '1') {}
                While(Motor_Controller_Finished = '0') {}
            }
            While(btn = '0') {} --wait while button pressed
        }
    }
    
    --Motor controller signals and instance
    SIGNAL Motor_Controller_RST_Drive           : STD_LOGIC := '0';
    SIGNAL Motor_Controller_Drive_L             : INTEGER   range (-1)*Motor_Controller_Max_Length to Motor_Controller_Max_Length;
    SIGNAL Motor_Controller_Drive_R             : INTEGER   range (-1)*Motor_Controller_Max_Length to Motor_Controller_Max_Length;
    SIGNAL Motor_Controller_Drive_Speed         : NATURAL   range 0 to (2**8)-1;
    SIGNAL Motor_Controller_Driven_L            : NATURAL   range 0 to Motor_Controller_Max_Length;
    SIGNAL Motor_Controller_Driven_R            : NATURAL   range 0 to Motor_Controller_Max_Length;
    SIGNAL Motor_Controller_Correction          : INTEGER   range ((-1)*(2**8))-25 to (2**8)+25;
    SIGNAL Motor_Controller_Finished            : STD_LOGIC;
    SIGNAL Motor_Controller_Error               : STD_LOGIC;
    
	--Used with "12V Metal Gear Tank Encoder Motor"
    NewComponent Motor_Controller
    (
        CLK_Frequency       => 12000000,
        PWM_Frequency       => 100000,
        Bits_Resolution     => 8,
        Holes_In_Disk       => Motor_Controller_Holes_In_Disk,
        Gear_Ratio          => Motor_Controller_Gear_Ratio,
        Wheel_Circumference => Motor_Controller_Wheel_Circumference,
        Debounce_Cycles     => 500,
        Max_Length          => Motor_Controller_Max_Length,
        Error_Delay         => 500,
        Correction_Step     => 1,
        Correction_Cycles   => 20,
        Length_Corr_Step    => 25,
        Max_Length_Diff     => 10,
		
        Accel_Length        => 100,  --10cm acceleration
        Accel_Speed         => 50,   --170-220 speed acceleration
        Brake_Length        => 100,  --10cm braking
        Brake_Speed         => 80,   --220-140 speed braking
        
        Reset               => '0',
        Encoder_L           => Encoder_L,
        Encoder_R           => Encoder_R,
        Motor_LF            => Motor_LF,
        Motor_LB            => Motor_LB,
        Motor_RF            => Motor_RF,
        Motor_RB            => Motor_RB,
        Enable              => '1',
        RST_Drive           => Motor_Controller_RST_Drive,
        Drive_L             => Motor_Controller_Drive_L,
        Drive_R             => Motor_Controller_Drive_R,
        Drive_Speed         => Motor_Controller_Drive_Speed,
        Driven_L            => Motor_Controller_Driven_L,
        Driven_R            => Motor_Controller_Driven_R,
        Finished            => Motor_Controller_Finished,
        Error               => Motor_Controller_Error,
        Correction          => Motor_Controller_Correction,
    );
}