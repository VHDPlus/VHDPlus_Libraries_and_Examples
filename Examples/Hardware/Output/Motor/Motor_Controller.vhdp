/*
    Name: Motor Controller
    Rev: 1.0
    Creator: Leon Beier
    Date: 08.06.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Important:   -Motor_Encoder.vhdp and PWM.vhdp have to be added to your project
                 -Two dc motors with encoders are necessary for this component
    
    Description: -This component is build to drive an exact route with two motors with encoders
                 -The motors correct their speed in order to drive straight
                 -You can set the distance to drive for each motor and their speed
                 -While the motors are driving you get information about the driven distance and the current speed
    
    Insertion:   -Right click on Motor_Controller.vhdp, Motor_Encoder.vhdp and PWM.vhdp -> Add to avtive project
                 -Add NewComponent of Motor_Controller into your code
                 -Remove CLK_Frequency if you use a VHDP Core and no phase-locked loop (PLL) or set a frequency according to your clock frequency
                 -Remove or set the additional parameters (more information about their function next to the declaration or hover with your cursor over the parameters in your code)
                 -Set Holes_In_Disk, Gear_Ratio and Wheel_Circumference to the values of your motor to get values in mm,
                  otherwise Drive_L/R, Driven_L/R and Speed_L/R are given in encoder impules (per second).
                 -Right click Motor_Controller next to NewComponent and create the required signals (Max_Length, Bits_Resolution and Length_Corr_Step in the declaration have to be replaced with values of you choice or you have to use constants)
    
    Function:    1. Set DriveL/R to the distance the motor has to drive in mm or use the formula([Length]*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio)
                 2. Set the desired motor Speed. For Bits_Resolution set to 8, you can divide the speed into 255 steps. You are able to change the speed while the motor is driving.
                 3. Enable has to be set to '1'
                 4. Set RST_Drive to '1'. This parameter resets the driven distance.
                 5. Set RST_Drive to '0' in the next cycle. After that the driven distance is 0 so the motor starts driving in order to reach the set destination.

                    Example:
                    
                    Drive_L   <= 1000; --1m
                    Drive_R   <= 1000; --1m
                    Speed     <= 220;
                    RST_Drive <= '1';
                    Step{ RST_Drive <= '0'; }
                    
                 6. The program has to wait until Finished switches to '1'. If Error switches to '1' the motor has not moved for the time defined by Max_Time.
                    Example:
                    While (Finished = '1') {}
                    While (Finished = '0')
                    {
                        If (Error = '1')
                        {
                            Enable    <= '0';
                            Error_LED <= '1';
                        }
                    }
    
    Example:     Motor_Controller_Example
    
    Example settings:
        "6V 210RPM Encoder Motor with Wheel":
        Holes_In_Disk = 11
        Gear_Ratio = 34
        Wheel_Circumference = 204
        Correction_Step = 1
        Correction_Cycles = 1
        Debounce_Cycles     = 2000
        
        "12V Metal Gear Tank Encoder Motor":
        Holes_In_Disk = 20
        Gear_Ratio = 90
        Wheel_Circumference = 100
        Correction_Step = 1
        Correction_Cycles = 20
        Debounce_Cycles     = 500
 */

Component Motor_Controller
(
    Include();
    Generic
    (
        --General
        CLK_Frequency       : NATURAL := 12000000;   --system clock frequency in Hz
        --PWM Settings
        PWM_Frequency       : NATURAL := 100000;     --PWM switching frequency in Hz
        Bits_Resolution     : NATURAL := 8;          --bits of resolution setting the duty cycle
        --Wheel Settings
        Holes_In_Disk       : NATURAL := 1;          --Changes from Low to High for one turn (Holes in Encoder Disk or Poles)
        Gear_Ratio          : NATURAL := 1;          --20 = 1:20 Gear ratio
        Wheel_Circumference : NATURAL := 1;          --Diameter*π in mm or the unit you want to use for the outputs
        --Encoder Settings
        Debounce_Cycles     : NATURAL := 500;        --Only counts encoder edge if it keeps value for this amount of cycles
        Max_Length          : NATURAL := 10000;      --10.000 = 10m if you use mm as unit
        --Speed Correction Settings
        Error_Delay         : NATURAL := 500;        --time Controller waits with outputting error and stopping motors at the beginning (in ms)
        Correction_Step     : NATURAL := 1;          --Speed added to correct motor speed each rising edge of encoder
        Correction_Cycles   : NATURAL := 1;          --Cycles after correction_step is added
        Length_Corr_Step    : NATURAL := 25;         --Speed added if Length_L and Length_R are Max_Length_Diff apart (will take Length_Corr_Step encoder edges to go back to normal speed)
        Max_Length_Diff     : NATURAL := 10;         --If Length_L and Length_R are Max_Length_Diff apart Length_Corr_Step is added to speed to correct
        --Accelerate and Brake Settings
        Accel_Length        : NATURAL := 1;          --100 = 10cm acceleration at the beginning
        Brake_Length        : NATURAL := 1;          --100 = 10cm braking at the end
        Accel_Speed         : NATURAL := 1;          --100 = increases speed by 100 while acceleration
        Brake_Speed         : NATURAL := 1;          --100 = decreases speed by 100 while braking
        Max_Turn_Time       : NATURAL := 2000;       --2000 = If wheel needs longer than 2000ms to turn 360°, it doesn't tries to brake or accelerate
    );
    Reset           : IN  STD_LOGIC := '0';
    
    ----------------I/Os----------------
    Encoder_L       : IN  STD_LOGIC := '0';     --Encoder Input Left
    Encoder_R       : IN  STD_LOGIC := '0';     --Encoder Input Right
    
    Motor_LF        : OUT STD_LOGIC := '0';     --Motor Left Forward   (1.1 if conntected with left motor)
    Motor_LB        : OUT STD_LOGIC := '0';     --Motor Left Backward  (1.2)
    Motor_RF        : OUT STD_LOGIC := '0';     --Motor Right Forward  (2.1)
    Motor_RB        : OUT STD_LOGIC := '0';     --Motor Right Backward (2.2)
    
    ----------------Motor Control----------------
    Enable          : IN  STD_LOGIC := '1';     --Stops Motor on '0'
    RST_Drive       : IN  STD_LOGIC := '0';     --Resets Driven Length to drive next Length
    
    Drive_L         : IN  INTEGER range (-1)*Max_Length to Max_Length := 0; --Length to drive with left Motor in mm (when generic is correct)
    Drive_R         : IN  INTEGER range (-1)*Max_Length to Max_Length := 0; --Length to drive with right Motor in mm
    
    Drive_Speed     : IN  NATURAL range 0 to (2**Bits_Resolution)-1 := 0;   --Speed of both motors fom 0 to 2^Bits_Resolution
    
    ----------------Evaluation----------------
    Speed_L         : OUT NATURAL range 0 to Max_Length := 0;   --Left Speed If Holes_In_Disk, Gear_Ratio are correct and Wheel_Circumference is in mm -> mm/s
    Speed_R         : OUT NATURAL range 0 to Max_Length := 0;   --Right Speed
    
    Driven_L        : OUT NATURAL range 0 to Max_Length := 0;   --Driven Length of Left Motor
    Driven_R        : OUT NATURAL range 0 to Max_Length := 0;   --Driven Length of Right Motor
    
    Finished        : OUT STD_LOGIC := '0';                     --'1' if finished driving
    Error           : OUT STD_LOGIC := '0';                     --'1' if one encoder has a period time of more than Max_Time but should turn (waits 250ms on start)
    
    Correction      : OUT INTEGER range ((-1)*(2**Bits_Resolution))-Length_Corr_Step to (2**Bits_Resolution)+Length_Corr_Step := 0; --Negative = Left normaly runs faster, Positive = Right normaly is slowed down
)
{
    AttributeDeclaration
    {
        CONSTANT Max_Time : NATURAL := Max_Turn_Time*10000/(Holes_In_Disk*Gear_Ratio);
        
        SIGNAL Motor_Left_PWM       : STD_LOGIC := '0';
        SIGNAL Motor_Left_Speed     : STD_LOGIC_VECTOR(Bits_Resolution-1 DOWNTO 0) := (others => '0');
        SIGNAL Motor_Right_PWM      : STD_LOGIC := '0';
        SIGNAL Motor_Right_Speed    : STD_LOGIC_VECTOR(Bits_Resolution-1 DOWNTO 0) := (others => '0');
        
        SIGNAL Length_RST           : STD_LOGIC := '0';
        SIGNAL Length_Left          : NATURAL range 0 to Max_Length;
        SIGNAL New_Length_Left      : STD_LOGIC := '0';
        SIGNAL Length_Right         : NATURAL range 0 to Max_Length;
        SIGNAL New_Length_Right     : STD_LOGIC := '0';
        
        SIGNAL Time_Left            : NATURAL range 0 to Max_Time;
        SIGNAL Time_Right           : NATURAL range 0 to Max_Time;
        
        SIGNAL Correct              : STD_LOGIC := '0';     --If '1' corrects speed to have both motors run at same speed ('0' if only one motor runs)
        SIGNAL Correction_Buf       : INTEGER range ((-1)*(2**Bits_Resolution))-Length_Corr_Step to (2**Bits_Resolution)+Length_Corr_Step := 0;
        
        SIGNAL Accel_Brake_L        : NATURAL range 0 to 2**Bits_Resolution := 0;
        SIGNAL Accel_Brake_R        : NATURAL range 0 to 2**Bits_Resolution := 0;
        
        SIGNAL Stop_Right           : STD_LOGIC := '0';
        SIGNAL Stop_Left            : STD_LOGIC := '0';
        
        SIGNAL Error_Out            : STD_LOGIC := '0';
    }
    
    Connections
    {
        Encoder_L => LS_1, --E2.1
        Encoder_R => LS_2, --E1.1
        
        Motor_LF  => LS_6, --M2.1
        Motor_LB  => LS_8, --M2.2
        Motor_RF  => LS_5, --M1.2
        Motor_RB  => LS_3, --M1.1
    }
    
    --Starts route definded by Drive_L/Drive_R and Drive_Speed.
    --You still have to wait until Finished is '1'
    SeqFunction startRoute
    (
        rst_drive : STD_LOGIC;
        motor_fin : STD_LOGIC;
    )
    {
        rst_drive <= '1';
        Step { rst_drive <= '0'; }
        While(motor_fin = '1') {}
    }
    
    --Starts route definded by Drive_L/Drive_R and Drive_Speed and waits until finished is '1'
    SeqFunction driveRoute
    (
        rst_drive : STD_LOGIC;
        motor_fin : STD_LOGIC;
    )
    {
        NewFunction startRoute (rst_drive, motor_fin);
        While(motor_fin = '0') {}
    }
    
    Correction <= Correction_Buf;
    Driven_L   <= Length_Left;
    Driven_R   <= Length_Right;
    Error      <= Error_Out;
    
    NewComponent Motor_Encoder
    (
        CLK_Frequency       => CLK_Frequency,
        Holes_In_Disk       => Holes_In_Disk,
        Gear_Ratio          => Gear_Ratio,
        Wheel_Circumference => Wheel_Circumference,
        Max_Length          => Max_Length,
        Time_Invert_Divider => CLK_Frequency/1000000,
        Debounce_Cycles     => Debounce_Cycles,
        Max_Time            => Max_Time,
        
        Encoder_In          => Encoder_L,
        Reset               => Reset,
        Length_RST          => Length_RST,
        Length              => Length_Left,
        New_Length          => New_Length_Left,
        Time                => Time_Left,
        Speed               => Speed_L,
    );
    
    NewComponent Motor_Encoder
    (
        CLK_Frequency       => CLK_Frequency,
        Holes_In_Disk       => Holes_In_Disk,
        Gear_Ratio          => Gear_Ratio,
        Wheel_Circumference => Wheel_Circumference,
        Max_Length          => Max_Length,
        Time_Invert_Divider => CLK_Frequency/1000000,
        Debounce_Cycles     => Debounce_Cycles,
        Max_Time            => Max_Time,
        
        Encoder_In          => Encoder_R,
        Reset               => Reset,
        Length_RST          => Length_RST,
        Length              => Length_Right,
        New_Length          => New_Length_Right,
        Time                => Time_Right,
        Speed               => Speed_R,
    );
    
    NewComponent PWM_Generator
    (
        CLK_Frequency   => CLK_Frequency,
        PWM_Frequency   => PWM_Frequency,
        Bits_Resolution => Bits_Resolution,
        Phases          => 1,
        
        Reset           => Reset,
        Enable          => '1',
        Duty            => Motor_Left_Speed,
        PWM_Out(0)      => Motor_Left_PWM,
    );
    
    NewComponent PWM_Generator
    (
        CLK_Frequency   => CLK_Frequency,
        PWM_Frequency   => PWM_Frequency,
        Bits_Resolution => Bits_Resolution,
        Phases          => 1,
        
        Reset           => Reset,
        Enable          => '1',
        Duty            => Motor_Right_Speed,
        PWM_Out(0)      => Motor_Right_PWM,
    );
    
    SIGNAL Correct_Count : NATURAL range 0 to Correction_Cycles-1 := 0;
    SIGNAL Correct_Last  : NATURAL range 0 to 2 := 0;
    
    Process Accel_Brake_Controller_L ()
    {
        If(Reset = '1' OR RST_Drive = '1')
        {
            Accel_Brake_L <= 0;
        }
        Else
        {
            If(Holes_In_Disk*Gear_Ratio*Time_Left < Max_Turn_Time*1000)
            {
                If(Length_Left > abs(Drive_L)-Brake_Length)
                {
                    Accel_Brake_L <= (Brake_Length-(abs(Drive_L)-Length_Left))*(Brake_Speed/Brake_Length);
                }
                ElsIf(Length_Left < Accel_Length)
                {
                    Accel_Brake_L <= (Accel_Length-Length_Left)*(Accel_Speed/Accel_Length);
                }
                Else
                {
                    Accel_Brake_L <= 0;
                }
            }
            Else
            {
                Accel_Brake_L <= 0;
            }
        }
    }
    
    Process Accel_Brake_Controller_R ()
    {
        If(Reset = '1' OR RST_Drive = '1')
        {
            Accel_Brake_R <= 0;
        }
        Else
        {
            If(Holes_In_Disk*Gear_Ratio*Time_Right < Max_Turn_Time*1000)
            {
                If(Length_Right > abs(Drive_R)-Brake_Length)
                {
                    Accel_Brake_R <= (Brake_Length-(abs(Drive_R)-Length_Right))*(Brake_Speed/Brake_Length);
                }
                ElsIf(Length_Right < Accel_Length)
                {
                    Accel_Brake_R <= (Accel_Length-Length_Right)*(Accel_Speed/Accel_Length);
                }
                Else
                {
                    Accel_Brake_R <= 0;
                }
            }
            Else
            {
                Accel_Brake_R <= 0;
            }
        }
    }
    
    Process Speed_Controller ()
    {
        If(Correct = '1' AND Reset = '0') --Checks if Speed should be synchronized
        {
            If(New_Length_Left = '1' OR New_Length_Right = '1')     --Checks if new Time is available
            {
                VARIABLE Correct_Type : NATURAL range 0 to 2 := 0;
                
                If(Time_Left < Time_Right)    { Correct_Type := 1; }
                Elsif(Time_Right < Time_Left) { Correct_Type := 2; }
                Else                          { Correct_Type := 0; }
                
                If(Correct_Count < Correction_Cycles-1 AND Correct_Type = Correct_Last AND Correct_Type > 0)
                {
                    Correct_Count <= Correct_Count + 1;
                }
                Else
                {
                    If(Correct_Count = Correction_Cycles-1)
                    {
                        If(Correct_Type = 1 AND Correction_Buf > (-1)*(2**Bits_Resolution))   --Left is faster
                        {
                            Correction_Buf <= Correction_Buf - Correction_Step;         --slows left down
                        }
                        Elsif(Correct_Type = 2 AND Correction_Buf < (2**Bits_Resolution))     --Left is slower
                        {
                            Correction_Buf <= Correction_Buf + Correction_Step;         --slows right down
                        }
                    }
                    Correct_Count <= 0;
                }
                
                Correct_Last <= Correct_Type;
            }
            Elsif(abs(Length_Left-Length_Right) > Max_Length_Diff)              --Driven Length is more than Max_Length_Diff apart
            {
                If(Length_Left-Length_Right > Max_Length_Diff)                  --Left driven more than right
                {
                    If(Stop_Left = '0' AND Correction_Buf > (-1)*(2**Bits_Resolution))
                    {
                        Correction_Buf <= Correction_Buf - Length_Corr_Step;    --slows left down
                    }
                    Stop_Left  <= '1';
                    Stop_Right <= '0';
                }
                Else
                {
                    If(Stop_Right = '0' AND Correction_Buf < (2**Bits_Resolution))
                    {
                        Correction_Buf <= Correction_Buf + Length_Corr_Step;
                    }
                    Stop_Left  <= '0';
                    Stop_Right <= '1';
                }
            }
            Elsif(Stop_Left = '1' AND Length_Left <= Length_Right)              --until length correct again
            {
                Stop_Left  <= '0';
            }
            Elsif(Stop_Right = '1' AND Length_Right <= Length_Left)
            {
                Stop_Right  <= '0';
            }
        }
    }
    
    Process Drive_Controller
    (
        VARIABLE start_count    : NATURAL range 0 to Error_Delay*(CLK_Frequency/1000) := 0;
        VARIABLE problem_side   : NATURAL := 0;     --1 = left 2 = right
        VARIABLE l_stop         : STD_LOGIC := '0'; --0 = driving, 1 = finished
        VARIABLE r_stop         : STD_LOGIC := '0'; --0 = driving, 1 = finished
    )
    {
        If(Reset = '1' OR RST_Drive = '1')
        {
            Length_RST  <= '1';
            Motor_LF    <= '0';
            Motor_LB    <= '0';
            Motor_RF    <= '0';
            Motor_RB    <= '0';
            l_stop      := '0';
            r_stop      := '0';
            Correct     <= '0';
            Finished    <= '1';
            Error_Out   <= '0';
            start_count := 0;
            problem_side := 0;
        }
        Else
        {
            Length_RST <= '0';
            
            If(abs(Drive_L) > Length_Left OR abs(Drive_R) > Length_Right)   --Checks if finished route
            {
                Finished   <= '0';
            }
            Else
            {
                Finished   <= '1';
            }
            
            --Outputs error if start time over, a motor doesn't turn and the motor isn't ready with the route
            If(Error_Out = '0' AND start_count = Error_Delay*(CLK_Frequency/1000) AND Accel_Brake_L = 0 AND Accel_Brake_R = 0)
            {
                problem_side := 0;
                If(Time_Right = Max_Time AND abs(Drive_R) > Length_Right)
                {
                    problem_side := 2;
                }
                Elsif(Time_Left = Max_Time AND abs(Drive_L) > Length_Left)
                {
                    problem_side := 1;
                }
                
                If(problem_side > 0)
                {
                    Error_Out   <= '1';
                }
            }
            Elsif (Error_Out = '1' AND ((Time_Right < Max_Time AND problem_side = 2) OR (Time_Left < Max_Time AND problem_side = 2)))
            {
                Error_Out    <= '0';
                problem_side := 0;
                start_count  := 0;  --starts start time after error reset
            }
            
            If(Enable = '1')
            {
                If(start_count < Error_Delay*(CLK_Frequency/1000))
                {
                    start_count := start_count + 1;
                }
                
                --Isn't ready with route and the other motor turns (doesn't stop effected motor to see if problem fixed)
                If(abs(Drive_L) > Length_Left AND (Error_Out = '0' OR problem_side = 1))
                {
                    If(Drive_Speed+Correction_Buf-Accel_Brake_L > (2**Bits_Resolution)-1)     --Check if Speed with Correction is out of range
                    {
                        Motor_Left_Speed    <= (others => '1');
                    }
                    Elsif(Drive_Speed+Correction_Buf-Accel_Brake_L < 0)
                    {
                        Motor_Left_Speed    <= (others => '0');
                    }
                    Else
                    {
                        Motor_Left_Speed    <= STD_LOGIC_VECTOR(TO_UNSIGNED(Drive_Speed+Correction_Buf-Accel_Brake_L, Bits_Resolution));
                    }
                    
                    If(Drive_L > 0)                     --should go forward
                    {
                        Motor_LB <= '0';
                        Motor_LF <= Motor_Left_PWM;     --outputs pwm on forward output
                    }
                    Else                                --should go backward
                    {
                        Motor_LF <= '0';
                        Motor_LB <= Motor_Left_PWM;     --outputs pwm on backward output
                    }
                    
                    l_stop := '0';
                }
                Else
                {
                    Motor_Left_Speed    <= (others => '0'); --otherwise stops motor
                    Motor_LF            <= '0';
                    Motor_LB            <= '0';
                    l_stop              := '1';
                }
                
                If(abs(Drive_R) > Length_Right AND (Error_Out = '0' OR problem_side = 2))   --same as for left motor
                {
                    If(Drive_Speed-Correction_Buf-Accel_Brake_R > (2**Bits_Resolution)-1)
                    {
                        Motor_Right_Speed   <= (others => '1');
                    }
                    Elsif(Drive_Speed-Correction_Buf-Accel_Brake_R < 0)
                    {
                        Motor_Right_Speed   <= (others => '0');
                    }
                    Else
                    {
                        Motor_Right_Speed   <= STD_LOGIC_VECTOR(TO_UNSIGNED(Drive_Speed-Correction_Buf-Accel_Brake_R, Bits_Resolution));
                    }
                    
                    If(Drive_R > 0)
                    {
                        Motor_RB <= '0';
                        Motor_RF <= Motor_Right_PWM;
                    }
                    Else
                    {
                        Motor_RF <= '0';
                        Motor_RB <= Motor_Right_PWM;
                    }
                    
                    r_stop := '0';
                }
                Else
                {
                    Motor_Right_Speed   <= (others => '0');
                    Motor_RF            <= '0';
                    Motor_RB            <= '0';
                    r_stop              := '1';
                }
                
                If(r_stop = '0' AND l_stop = '0' AND Accel_Brake_L = 0 AND Accel_Brake_R = 0)       --if both motors are running the direction correction runs
                {
                    Correct <= '1';
                }
                Else
                {
                    Correct <= '0';
                }
            }
            Else
            {
                start_count := 0;
                problem_side := 0;
                Error_Out   <= '0';
                Correct     <= '0';
                Motor_LF    <= '0';
                Motor_LB    <= '0';
                Motor_RF    <= '0';
                Motor_RB    <= '0';
            }
        }
    }
}
