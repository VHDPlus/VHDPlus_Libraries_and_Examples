/*
    Name: Motor Encoder
    Rev: 1.0
    Creator: Leon Beier
    Date: 08.06.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of 
	this hdl code and associated documentation files (the "HDL Code"), to deal in the 
	HDL Code without restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
	HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
	subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
	WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
	
	Important:   -Depending on Holes_In_Disk, Gear_Ratio, Wheel_Circumference and the Max_Length, this component can use a lot of logic elements
				 -If you remove Holes_In_Disk, Gear_Ratio and Wheel_Circumference, the values are in encoder impulses and not mm
				 -This component doesn't uses two encoder inputs, so it cannot differ between for- and backward
	
	Description: -This Component counts the driven length with an encoder
	             -To check the speed of the encoder, you can either use Time that is updated every encoder impuls and is the time between the impulses
				  or you can use Speed that is updated every second and is the speed in mm/s (if Holes_In_Disk, Gear_Ratio and Wheel_Circumference are correct and in mm)
	
    Insertion:   -Right click on Motor_Encoder.vhdp -> Add to project
			     -Add NewComponent of Motor_Encoder in your code
			     -Remove CLK_Frequency if you use a VHDP Core and no PLL
			     -Remove or set the parameters (information next to the declaration)
			     -Set Holes_In_Disk, Gear_Ratio and Wheel_Circumference to the values of your Motor to get the values in mm,
			      otherwise Drive_L/R, Driven_L/R and Speed_L/R are in Encoder impules (per second), but you save Logic Elements.
			      You can set the length to drive by writing Drive_L/R <= ([Length]*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio)
			     -Add this to your Main IOs and connect them with the instance IOs and the Encoder Pins (modify the names if already in use)
			      Encoder_In		: IN  STD_LOGIC;
			     -Right click the name Motor_Encoder next to NewComponent and create the needed signals (Max_Length and Max_Time in the declarations have to be replaced with the values you chose or you have to use a constant)
	
    Function:    1. Read Length, Time and Speed if you need it or wait with If(New_Length = '1') { ... } outside of a Thread on new data
	             2. Set Length_RST to '1' (and '0' afterwards) to reset length to 0
	
    Example:     Motor_Controller
*/

Component Motor_Encoder
(
	Generic
	(
		CLK_Frequency		: NATURAL := 50000000;
		Holes_In_Disk 		: NATURAL := 1;			--Changes from Low to High for one turn (Holes in Encoder Disk or Poles)
		Gear_Ratio			: NATURAL := 1;			--34 = 1:34 Gear ratio
		Wheel_Circumference	: NATURAL := 1;			--Diameter*π in mm or the unit u want to use for the outputs
		Max_Length			: NATURAL := 10000;		--10m if you use mm as unit
		Time_Invert_Divider : NATURAL := 50;		--Cycles to count one up til next hole (50 + 50MHz = Time in µs)
		Max_Time			: NATURAL := 1000000	--Max_Time/(CLK_Frequency/Time_Invert_Divider) max seconds between holes
	);
	Encoder_In		: IN  STD_LOGIC := '0'; 		--Encoder Input
	
	Reset			: IN  STD_LOGIC := '0';			--Resets everything
	Length_RST		: IN  STD_LOGIC := '0';			--Resets counted length
	
	Length			: OUT NATURAL range 0 to Max_Length := 0;	--Length counted
	New_Length		: OUT STD_LOGIC := '0';                     --One cycle high on new length
	Time			: OUT NATURAL range 0 to Max_Time := Max_Time; --Time between last holes -> Lower = Higher Speed
	Speed			: OUT NATURAL range 0 to Max_Length := 0;	--Returns every second the driven Length (Length and Time update more frequently)
)
{
	AttributeDeclaration
	{
		CONSTANT Counts_For_Max_Length  : NATURAL := Max_Length*Holes_In_Disk*Gear_Ratio/Wheel_Circumference;
		
		SIGNAL OUT_Length               : NATURAL  range 0 to Max_Length := 0;
		SIGNAL OUT_New_Length			: STD_LOGIC := '0';
		SIGNAL OUT_Time                 : NATURAL  range 0 to Max_Time  := 0;
		
		SIGNAL Encoder_Trig				: STD_LOGIC := '0';
	}

	Length <= OUT_Length;
	Time   <= OUT_Time;
	New_Length <= OUT_New_Length;
	
	Process Time_Counter
	(
		VARIABLE div		: NATURAL range 0 to Time_Invert_Divider := 0;
		VARIABLE cnt		: NATURAL range 0 to Max_Time := 0;
	)
	{
		If(Reset = '1')
		{
			cnt	      := 0;
			div		  := 0;
			OUT_Time  <= 0;
		}
		Else
		{
			If(Encoder_Trig = '1')				--Returns Counter on rising edge of Encoder
			{
				OUT_Time  <= cnt;
				cnt       := 0;
				div		  := 0;
			}
			Else
			{
				If(div < Time_Invert_Divider)	--Counts until Time_Invert_Divider
				{
					div := div + 1;
				}
				Elsif (cnt < Max_Time)			--Increases cnt afterwards
				{
					div := 0;
					cnt := cnt + 1;
				}
				Else
				{
					OUT_Time  <= cnt;
				}
			}
		}
	}
	
	Process Speed_Counter 
	(
		VARIABLE cnt			: NATURAL range 0 to CLK_Frequency  := 0;
		VARIABLE l_Length		: NATURAL range 0 to Max_Length := 0;
	)
	{
		If(Reset = '1' OR Length_RST = '1')				--resets length on length_reset to prevent negative speed
		{
			cnt 		:= 0;
			l_Length	:= 0;
		}
		Else
		{
			If(cnt = CLK_Frequency)							--1s since last test
			{
				Speed    <= OUT_Length - l_Length;		--Speed = difference between last length
				l_Length := OUT_Length;					--updates last length
				cnt      := 0;							--starts waiting next second
			}
			Else
			{
				cnt      := cnt + 1;					--waits
			}
		}
	}
	
	Process Length_Counter
	(
		VARIABLE cnt			: NATURAL range 0 to Counts_For_Max_Length := 0;
	)
	{
		If(Reset = '1' OR Length_RST = '1')		--Resets Length on Reset and Length_RST
		{
			cnt        		:= 0;
			OUT_Length 		<= 0;
			OUT_New_Length 	<= '0';
		}
		Else
		{
			If(Encoder_Trig = '1' AND cnt < Counts_For_Max_Length)	--Increases cnt on rising edge of Encoder anf calculates driven Length 
			{
				cnt        		:= cnt + 1;
				OUT_Length 		<= ((cnt+1)*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio) + 1;
				OUT_New_Length	<= '1';
			}
			Else
			{
				OUT_New_Length <= '0';
			}
		}
	}
	
	Process Enocder_Trig_Generator 
	(
		VARIABLE l_Encoder		: STD_LOGIC_VECTOR (2 downto 0) := (others => '0');
	)
	{
		If(Reset = '1')
		{
			Encoder_Trig <= '0';
		}
		Else
		{
			If(l_Encoder(2) = '0' AND l_Encoder(1) = '1')			--Creates Trigger on rising encoder edge
			{
				Encoder_Trig <= '1';
			}
			Else
			{
				Encoder_Trig <= '0';
			}
			l_Encoder := l_Encoder(1 downto 0) & Encoder_In;		--Shifts in Encoder Values
		}
	}
}