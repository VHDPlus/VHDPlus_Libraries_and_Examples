/*
    Name: WS2812 LED Strip
    Rev: 1.0
    Creator: Leon Beier
    Date: 31.08.2020
    Copyright (c) 2020 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Important: -This interface is for LED Strips with WS2812 (5V) or Ws2811 (12V) LED
    
    Insertion: -Right click on WS2812_LED_Strip.vhdp -> Add to project
               -Add NewComponent of WS2812_Interface in your code
               -Right click the name WS2812_Interface next to NewComponent and create the signals
    
    Function:  -Set Update from '0' to '1' to update the LEDs and keep it '1' to keep updating
               -Wait for a rising edge of Pixel_CLK
               -Set the Color of the Pixel at the "Address" (0 - LEDs-1)
               -x"FF0000" = Red, X"00FF00" = Green ...
               
    Example:   -Examples/LED_Strip
 */

Component WS2812_Interface
(
    Include();
    Generic
    (
        CLK_Frequency : NATURAL := 12000000;
        LEDs          : NATURAL := 300;   --Number of LEDs in LED Strip
        WS2812        : BOOLEAN := true;  --If false -> WS2811
    );
    
    Data_Out : OUT STD_LOGIC := '0'; --Output to LED Strip

    Update     : IN  STD_LOGIC := '1';
    Pixel_CLK  : OUT STD_LOGIC;                                  --Set pixel for Address on rising edge
    Address    : OUT NATURAL range 0 to LEDs-1;                  --Current pixel address
    Pixel      : IN  STD_LOGIC_VECTOR(23 downto 0) := x"FFFFFF"; --RGB Color of current pixel
)
{
    Connections
    {
        Data_Out,
    }
    
    Process ()
    {
        Thread
        {
            If(Update = '1')
            {
                --Reset
                Data_Out <= '0';
                Wait((CLK_Frequency*60)/1000000); --Wait 60us for Reset
                For(VARIABLE a : NATURAL range 0 to LEDs := 0; a < LEDs-1; a := a + 1)   --Go through all addresses
                {
                    SIGNAL Pixel_Buffer : STD_LOGIC_VECTOR(23 downto 0);
                    If(WS2812) { Pixel_Buffer <= Pixel(15 downto 8) & Pixel(23 downto 16) & Pixel(7 downto 0); } --Flip Green and Red for WS2812
                    Else { Pixel_Buffer <= Pixel; }
                    For(VARIABLE i : INTEGER range -1 to 23  := 23; i > -1; i := i - 1)  --Send the pixel data sequentially
                    {
                        If(WS2812)
                        {
                            Data_Out <= '1';
                            If(Pixel_Buffer(i) = '1') { Wait((CLK_Frequency*8)/10000000 -3); } --Wait 1.2 us for 1 high (3 cycles for code until data = 0)
                            Else { Wait((CLK_Frequency*4)/10000000 -3); } --Wait 0.5 us for 0 high
                            Data_Out <= '0';
                            If(Pixel_Buffer(i) = '1') { Wait((CLK_Frequency*4)/10000000 -5); } --Wait 1.3 us for 1 high (5 cycles for code until data = 1)
                            Else { Wait((CLK_Frequency*8)/10000000 -5); } --Wait 2.0 us for 0 high
                        }
                        Else
                        {
                            Data_Out <= '1';
                            If(Pixel_Buffer(i) = '1') { Wait((CLK_Frequency*12)/10000000 -3); } --Wait 1.2 us for 1 high (3 cycles for code until data = 0)
                            Else { Wait((CLK_Frequency*5)/10000000 -3); } --Wait 0.5 us for 0 high
                            Data_Out <= '0';
                            If(Pixel_Buffer(i) = '1') { Wait((CLK_Frequency*13)/10000000 -5); } --Wait 1.3 us for 1 high (5 cycles for code until data = 1)
                            Else { Wait((CLK_Frequency*20)/10000000 -5); } --Wait 2.0 us for 0 high
                        }
                    }
                }
            }
        }
        
        --Address to set Pixel data is always one ahead
        If(a < LEDs-1) { Address <= a + 1; }
        Else { Address <= 0; }
        
        --In the middle of pixel transmission, the data of the next pixel can be set
        If(i < 12) { Pixel_CLK <= '0'; }
        Else { Pixel_CLK <= '1'; }
    }
}