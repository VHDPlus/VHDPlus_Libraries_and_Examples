/*
    Name: Motor Route Drive
    Rev: 1.0
    Creator: Leon Beier
    Date: 09.12.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
 */

Main
(
    Encoder_L           : IN STD_LOGIC;
    Encoder_R           : IN STD_LOGIC;
    Motor_LF            : BUFFER STD_LOGIC;
    Motor_LB            : BUFFER STD_LOGIC;
    Motor_RF            : BUFFER STD_LOGIC;
    Motor_RB            : BUFFER STD_LOGIC;
    
    Trigger             : OUT STD_LOGIC;
    EchoL               : IN STD_LOGIC;
    EchoF               : IN STD_LOGIC;
    EchoF1              : IN STD_LOGIC;
    EchoF2              : IN STD_LOGIC;
    EchoR               : IN STD_LOGIC;
    
    btn                 : in STD_LOGIC;
    RX                  : IN STD_LOGIC;
    TX                  : BUFFER STD_LOGIC;
)
{
    --Motor controller settings
    CONSTANT CLK_Frequency                        : NATURAL := 50000000; --12MHz
    CONSTANT Motor_Controller_Holes_In_Disk       : NATURAL := 11;    --11 = 11 Changes for one encoder turn
    CONSTANT Motor_Controller_Gear_Ratio          : NATURAL := 34;    --34 = 1:34 Gear ratio
    CONSTANT Motor_Controller_Wheel_Circumference : NATURAL := 204;   --204 = 65mm diameter*pi = 204mm circumference
    CONSTANT Motor_Controller_Max_Length          : NATURAL := 10000; --10m maximum route step length
    CONSTANT Motor_Controller_Route_Steps         : NATURAL := 10;    --10 steps maximum
    
    Process Route_Start_Process ()
    {
        --If object is closer than 12cm, the robot tries to surround it
        If(Ultrasonic_Controller_Dist_F < 12 OR Ultrasonic_Controller_Dist_F1 < 12 OR Ultrasonic_Controller_Dist_F2 < 12)
        {
            Motor_Collision <= '1';
        }
        Else
        {
            Motor_Collision <= '0';
        }

        --Start route by pressing button
        Motor_Route_Start <= NOT btn;
        
        --Define Route to 80cm + 20cm + turn 90Â° left + 50cm
        Motor_Route_L      <= (800,  200, -155, 500, 0, 0, 0, 0, 0, 0);
        Motor_Route_R      <= (800,  200,  155, 500, 0, 0, 0, 0, 0, 0);
        --Set speed to 200 for driving streight and 170 for turns
        Motor_Route_Speed  <= (200,  200,  170, 200, 0, 0, 0, 0, 0, 0);
        --Set number of route steps
        Motor_Route_Length <= 4;
    }
    
    SIGNAL UART_Interface_TX_Enable     : STD_LOGIC;
    SIGNAL UART_Interface_TX_Busy       : STD_LOGIC;
    SIGNAL UART_Interface_TX_Data       : STD_LOGIC_VECTOR (8-1 DOWNTO 0);
    SIGNAL UART_Interface_RX_Busy       : STD_LOGIC;
    SIGNAL UART_Interface_RX_Data       : STD_LOGIC_VECTOR (8-1 DOWNTO 0);
    SIGNAL UART_Interface_RX_Error      : STD_LOGIC;
    NewComponent UART_Interface
    (
        CLK_Frequency => 50000000,
        Baud_Rate     => 9600,
        OS_Rate       => 16,
        D_Width       => 8,
        Parity        => 0,
        Parity_EO     => '0',
        
        Reset         => '0',
        RX            => RX,
        TX            => TX,
        TX_Enable     => UART_Interface_TX_Enable,
        TX_Busy       => UART_Interface_TX_Busy,
        TX_Data       => UART_Interface_TX_Data,
        RX_Busy       => UART_Interface_RX_Busy,
        RX_Data       => UART_Interface_RX_Data,
        RX_Error      => UART_Interface_RX_Error,
    );
    
    --Uses more logic elements if true, but prints states with description and ultrasonic distances
    CONSTANT Output_Text : BOOLEAN := false;
    
    --Output current route step
    Process State_Output ()
    {
        Thread
        {
            VARIABLE state_buf : NATURAL range 0 to 255 := 255;
            --Check if the current state changed
            If(state_buf /= Motor_Route_State)
            {
                NewFunction newString (state_str);
                state_str.Length <= 0;
                If(NOT Output_Text)
                {
                    --Output current state number
                    NewFunction naturalToStringInst (Motor_Route_State, state_str, bcdEn, bcdBu, bcdBi, bcdDe);
                    NewFunction charAppend (s"\n", state_str);
                }
                Else
                {
                    --Output [distance left], [distance front], [distance right] [state discription]
                    NewFunction newString (distL);
                    NewFunction naturalToString (Ultrasonic_Controller_Dist_L, distL, bcdEn, bcdBu, bcdBi, bcdDe);
                    NewFunction stringAppend (distL, state_str);
                    NewFunction charAppend (s",", state_str);
                    NewFunction newString (distF);
                    NewFunction naturalToString (Ultrasonic_Controller_Dist_F, distF, bcdEn, bcdBu, bcdBi, bcdDe);
                    NewFunction stringAppend (distF, state_str);
                    NewFunction charAppend (s",", state_str);
                    NewFunction newString (distR);
                    NewFunction naturalToString (Ultrasonic_Controller_Dist_R, distR, bcdEn, bcdBu, bcdBi, bcdDe);
                    NewFunction stringAppend (distR, state_str);
                    NewFunction charAppend (s" ", state_str);
                    Case(Motor_Route_State)
                    {
                        When(0)
                        {
                            NewFunction assignString (s"Wait for route start\n", s0_text);
                            NewFunction stringAppend (s0_text, state_str);
                        }
                        When(1)
                        {
                            NewFunction assignString (s"Object is blocking route\n", s1_text);
                            NewFunction stringAppend (s1_text, state_str);
                        }
                        When(2)
                        {
                            NewFunction assignString (s"Try to surround object\n", s2_text);
                            NewFunction stringAppend (s2_text, state_str);
                        }
                        When(3)
                        {
                            NewFunction assignString (s"Error: Left and right way blocked\n", s3_text);
                            NewFunction stringAppend (s3_text, state_str);
                        }
                        When(4)
                        {
                            NewFunction assignString (s"Try other way around object\n", s4_text);
                            NewFunction stringAppend (s4_text, state_str);
                        }
                        When(5)
                        {
                            NewFunction assignString (s"Error: Couldn't drive back to initial Position\n", s5_text);
                            NewFunction stringAppend (s5_text, state_str);
                        }
                        When(6)
                        {
                            NewFunction assignString (s"Check if there is enought space to surround object\n", s6_text);
                            NewFunction stringAppend (s6_text, state_str);
                        }
                        When(7)
                        {
                            NewFunction assignString (s"Try to drive past the object\n", s7_text);
                            NewFunction stringAppend (s7_text, state_str);
                        }
                        When(8)
                        {
                            NewFunction assignString (s"Couldn't drive past the object\n", s8_text);
                            NewFunction stringAppend (s8_text, state_str);
                        }
                        When(9)
                        {
                            NewFunction assignString (s"Try to get to initial x position\n", s9_text);
                            NewFunction stringAppend (s9_text, state_str);
                        }
                        When(10)
                        {
                            NewFunction assignString (s"Error: Failed to get to initial x position\n", s10_text);
                            NewFunction stringAppend (s10_text, state_str);
                        }
                        When(11)
                        {
                            NewFunction assignString (s"Turn into final position\n", s11_text);
                            NewFunction stringAppend (s11_text, state_str);
                        }
                        When(12)
                        {
                            NewFunction assignString (s"Failed this check\n", s12_text);
                            NewFunction stringAppend (s12_text, state_str);
                        }
                        When(13)
                        {
                            NewFunction assignString (s"Success: Surrounded object\n", s13_text);
                            NewFunction stringAppend (s13_text, state_str);
                        }
                        When(others)
                        {
                            If(Motor_Route_State > 32)
                            {
                                SIGNAL current_Route_Step : NATURAL range 0 to 255;
                                current_Route_Step <= Motor_Route_State-32;
                                NewFunction newString (stepStr);
                                NewFunction naturalToString (current_Route_Step, stepStr, bcdEn, bcdBu, bcdBi, bcdDe);
                                NewFunction assignString (s"Start with route step ", so_text);
                                NewFunction stringConcat (so_text, stepStr, state_str);
                                NewFunction charAppend (s"\n", state_str);
                            }
                        }
                    }
                }
                NewFunction printString (state_str, UART_Interface_TX_Data, UART_Interface_TX_Busy, UART_Interface_TX_Enable);
            }
            state_buf := Motor_Route_State;
        }
    }
    
    SIGNAL Motor_Collision           : STD_LOGIC;
    SIGNAL Motor_Route_Start         : STD_LOGIC;
    SIGNAL Motor_Route_L             : Route_Array (0 to Motor_Controller_Route_Steps-1);
    SIGNAL Motor_Route_R             : Route_Array (0 to Motor_Controller_Route_Steps-1);
    SIGNAL Motor_Route_Speed         : Route_Array (0 to Motor_Controller_Route_Steps-1);
    SIGNAL Motor_Route_Length        : NATURAL     range 0 to Motor_Controller_Route_Steps;
    SIGNAL Motor_Route_Finished      : STD_LOGIC;
    SIGNAL Motor_Route_Error         : STD_LOGIC;
    SIGNAL Motor_Route_State         : NATURAL range 0 to 255;

    NewComponent Motor_Route_Drive
    (
        CLK_Frequency       => CLK_Frequency,
        Route_Steps         => Motor_Controller_Route_Steps,
        Max_Length          => Motor_Controller_Max_Length,
        --Left motor has to turn -15.5cm and right motor 15.5cm at speed 170/255 to make 90Â° with my robot
        Turn_Length         => 155,
        Turn_Speed          => 170,
        --Drive 15cm at speed 200/255 back when object in front of robot
        Back_Length         => 150,
        Back_Speed          => 200,
        --Has sensors on the right and left, so Side_Distances is true
        Side_Distances      => true,
        --Checks every 10cm if route is clear (drives 10cm further if yes)
        Check_Distance      => 100,
        Holes_In_Disk       => Motor_Controller_Holes_In_Disk,
        Gear_Ratio          => Motor_Controller_Gear_Ratio,
        Wheel_Circumference => Motor_Controller_Wheel_Circumference,
        --Don't check if wheel is turning for fist 500ms
        Error_Delay         => 500,
        --Correct speed every 10 encoder edges
        Correction_Step     => 1,
        Correction_Cycles   => 10,
        --If 2cm length difference, subtract 25/255 speed
        Length_Corr_Step    => 25,
        Max_Length_Diff     => 20,
        --Increase 10cm 100/255 speed for acceleration
        Accel_Length        => 100,
        Accel_Speed         => 100,
        --Decrease 10cm 100/255 speed for braking
        Brake_Length        => 100,
        Brake_Speed         => 100,
        --2s for one wheel turn is minimum speed while accelerating and braking + 20s for wheel turn to trigger error
        Max_Turn_Time       => 2000,
        
        Reset               => '0',
        Encoder_L           => Encoder_L,
        Encoder_R           => Encoder_R,
        Motor_LF            => Motor_LF,
        Motor_LB            => Motor_LB,
        Motor_RF            => Motor_RF,
        Motor_RB            => Motor_RB,
        Collision           => Motor_Collision,
        Distance_F          => Ultrasonic_Controller_Dist_F,
        Distance_L          => Ultrasonic_Controller_Dist_L,
        Distance_R          => Ultrasonic_Controller_Dist_R,
        Route_Start         => Motor_Route_Start,
        Route_Finished      => Motor_Route_Finished,
        Route_L             => Motor_Route_L,
        Route_R             => Motor_Route_R,
        Route_Speed         => Motor_Route_Speed,
        Route_Length        => Motor_Route_Length,
        Route_Error         => Motor_Route_Error,
        State               => Motor_Route_State,
    );
    
    SIGNAL Ultrasonic_Controller_Dist_L             : NATURAL   range 0 to 1000;
    
    NewComponent Ultrasonic_Controller
    (
        CLK_Frequency    => CLK_Frequency,
        Update_Frequency => 15,
        
        Reset            => '0',
        Trigger          => Trigger,
        Echo             => EchoL,
        Dist             => Ultrasonic_Controller_Dist_L,
    );
    
    SIGNAL Ultrasonic_Controller_Dist_F             : NATURAL   range 0 to 1000;
    
    NewComponent Ultrasonic_Controller
    (
        CLK_Frequency    => CLK_Frequency,
        Update_Frequency => 15,
        
        Reset            => '0',
        Echo             => EchoF,
        Dist             => Ultrasonic_Controller_Dist_F,
    );
    
    SIGNAL Ultrasonic_Controller_Dist_F1            : NATURAL   range 0 to 1000;
    
    NewComponent Ultrasonic_Controller
    (
        CLK_Frequency    => CLK_Frequency,
        Update_Frequency => 15,
        
        Reset            => '0',
        Echo             => EchoF1,
        Dist             => Ultrasonic_Controller_Dist_F1,
    );
    
    SIGNAL Ultrasonic_Controller_Dist_F2            : NATURAL   range 0 to 1000;
    
    NewComponent Ultrasonic_Controller
    (
        CLK_Frequency    => CLK_Frequency,
        Update_Frequency => 15,
        
        Reset            => '0',
        Echo             => EchoF2,
        Dist             => Ultrasonic_Controller_Dist_F2,
    );
    
    SIGNAL Ultrasonic_Controller_Dist_R             : NATURAL   range 0 to 1000;
    
    NewComponent Ultrasonic_Controller
    (
        CLK_Frequency    => CLK_Frequency,
        Update_Frequency => 15,
        
        Reset            => '0',
        Echo             => EchoR,
        Dist             => Ultrasonic_Controller_Dist_R,
    );
}