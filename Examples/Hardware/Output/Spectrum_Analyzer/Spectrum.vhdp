Main
(
    -----------inputs and outputs-----------
    column : OUT    STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
    row    : BUFFER STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
    adc_in : IN     STD_LOGIC_VECTOR (7 downto 0) := (others => '0');
)
{
    -----------parmeters-----------
    CONSTANT n   : NATURAL := 32;
    CONSTANT nl2 : NATURAL := 5;
    CONSTANT cfd : NATURAL := 4;
    CONSTANT sfd : NATURAL := 17;
    CONSTANT ofd : NATURAL := 17;
    CONSTANT sts : NATURAL := 4;
    
    -----------inputs and outputs-----------
    SIGNAL clk_cfd : STD_LOGIC := '0';
    SIGNAL clk_sfd : STD_LOGIC := '0';
    
    -----------states and stages-----------
    SIGNAL stage : UNSIGNED (sts-1 downto 0)     := (others => '0');
    SIGNAL cnt   : UNSIGNED (nl2-2 downto 0)     := (others => '0');
    SIGNAL state : UNSIGNED (nl2+sts-2 downto 0) := shift_left(TO_UNSIGNED(nl2+1, nl2+sts-1), (nl2-1));
    
    cnt   <= state(nl2-2 downto 0);
    stage <= state(nl2+sts-2 downto nl2-1);
    
    -----------samples and data-----------
    TYPE samples_type IS ARRAY (0 to n-1) OF SIGNED (7 downto 0);
    SIGNAL samples : samples_type := (others => (others => '0'));
    
    TYPE data_type IS ARRAY (0 to n-1) OF SIGNED (15 downto 0);
    SIGNAL data : data_type := (others => (others => '0'));
    
    SIGNAL i : INTEGER;
    
    -----------LUT-----------
    TYPE lut_type IS ARRAY (0 to n/2-1) OF SIGNED (15 downto 0);
    SIGNAL lut : lut_type :=
    (
        "0111111100000000",
        "0111110100011000",
        "0111011000110000",
        "0110101001000111",
        "0101101001011010",
        "0100011101101010",
        "0011000001110110",
        "0001100001111101",
        "0000000001111111",
        "1110011101111101",
        "1100111101110110",
        "1011100001101010",
        "1010010101011010",
        "1001010101000111",
        "1000100100110000",
        "1000001000011000"
    );
    
    -----------butterfly-----------
    SIGNAL bfin1, bfin2, tf, bfout1, bfout2 : SIGNED (15 downto 0);
    NewComponent Butterfly
    (
        in1  => bfin1,
        in2  => bfin2,
        tf   => tf,
        out1 => bfout1,
        out2 => bfout2,
    );
    
    -----------butterfly indice-----------
    SIGNAL ind1, ind2 : UNSIGNED (nl2-1 downto 0);
    SIGNAL tind       : UNSIGNED (nl2-2 downto 0);
    SIGNAL pos        : UNSIGNED (sts-1 downto 0);
    
    -----------indice selection-----------
    SIGNAL mask : UNSIGNED (nl2-1 downto 0);
    pos <= stage - 1;
    Function repeatLogic (return STD_LOGIC_VECTOR; arg : STD_LOGIC; n : INTEGER)
    {
        VARIABLE buf : STD_LOGIC_VECTOR (n-1 downto 0) := (others => arg);
        return buf;
    }
    mask <= shift_left(shift_right(UNSIGNED(repeatLogic('1', nl2)), TO_INTEGER(pos)), TO_INTEGER(pos));
    ind1 <= shift_left((('0' & cnt) and mask), 1) or (('0' & cnt) and (not mask));
    ind2 <= (ind1 or shift_left(TO_UNSIGNED(1, nl2), TO_INTEGER(pos)));
    tind <= shift_left(cnt, (nl2 - TO_INTEGER(stage)));
    
    -----------butterfly input selection-----------
    bfin1 <= data(TO_INTEGER(ind1));
    bfin2 <= data(TO_INTEGER(ind2));
    tf    <= lut(TO_INTEGER(tind));
    
    -----------bit reversal-----------
    
    TYPE c_type IS ARRAY (0 to n-1) OF UNSIGNED (nl2-1 downto 0);
    SIGNAL c : c_type;
    SIGNAL r : c_type;
    Generate (for k in 0 to n-1)
    {
        c(k) <= TO_UNSIGNED(k,nl2);
        Generate (for l in 0 to nl2-1)
        {
            r(k)(l) <= c(k)(nl2-1-l);
        }
    }
    
    -----------power value-----------
    SIGNAL val           : SIGNED (15 downto 0);
    SIGNAL re, im        : SIGNED (7 downto 0);
    SIGNAL re2, im2, sum : SIGNED (15 downto 0);
    SIGNAL aval          : SIGNED (7 downto 0);
    SIGNAL sc            : BOOLEAN;
    
    sc <= true when (TO_INTEGER(stage) = nl2+2) else false;
    val <= data(TO_INTEGER(cnt));
    re(7 downto 0) <= data(n/2)(15 downto 8) when sc else val(14 downto 8) & '0';
    im(7 downto 0) <= data(n/2)(7 downto 0)  when sc else val(6 downto 0) & '0';
    re2 <= resize(re, re2'LENGTH);
    im2 <= resize(im, im2'LENGTH);
    sum <= TO_SIGNED(TO_INTEGER(re2)**2 + TO_INTEGER(im2)**2, sum'LENGTH);
    aval <= sum(13 downto 6)-1 when sum(14) = '1' else sum(13 downto 6);
    
    -----------output calculation-----------
    SIGNAL summer : UNSIGNED (15 downto 0);
    TYPE outr_type IS ARRAY (0 to 7) OF UNSIGNED (7 downto 0);
    SIGNAL outr : outr_type;
    SIGNAL summed : UNSIGNED (15 downto 0);
    summed <= TO_UNSIGNED(TO_INTEGER(summer) + TO_INTEGER(aval), summed'LENGTH);
    
    --final output
    SIGNAL ocount : UNSIGNED (ofd+2 downto 0) := (others => '0');
    clk_cfd <= ocount(cfd);
    clk_sfd <= ocount(sfd);
    SIGNAL cur : UNSIGNED (7 downto 0);
    SIGNAL cc  : UNSIGNED (2 downto 0);
    cc     <= ocount(ofd+2 downto ofd);
    cur    <= outr(TO_INTEGER(cc));
    column <= STD_LOGIC_VECTOR(shift_right("10000000", TO_INTEGER(cc)));

    row(7) <= NOT cur(7);
    Generate (for i in 0 to 6)
    {
        row(i) <= row(i+1) AND (NOT cur(i));
    }
    
    -----------create clock-----------
    Process ()
    {
        If(ocount < (ofd+3)**2)
        {
            ocount <= ocount + 1;
        }
        Else
        {
            ocount <= (others => '0');
        }
    }
    
    -----------next state logic-----------
    Process ()
    {
        If(rising_edge(clk_cfd))
        {
            Case(stage)
            {
                When("0000")
                {
                    For(i IN 0 to n-1)
                    {
                        data(TO_INTEGER(c(i))) <= samples(TO_INTEGER(r(i))) & x"00";
                    }
                    state(nl2+sts-2 downto nl2-1) <= TO_UNSIGNED(1, sts);
                    state(nl2-2 downto 0) <= TO_UNSIGNED(0, nl2-1);
                }
                When("0111")
                {
                    outr(7) <= resize(summed, 8);
                    state <= (others => '0');
                }
                When("0110")
                {
                    Case(TO_INTEGER(cnt))
                    {
                        When(0)
                        {
                            summer <= resize(UNSIGNED(STD_LOGIC_VECTOR(aval)), summer'LENGTH);
                        }
                        When(2)
                        {
                            outr(0) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(4)
                        {
                            outr(1) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(6)
                        {
                            outr(2) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(8)
                        {
                            outr(3) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(10)
                        {
                            outr(4) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(12)
                        {
                            outr(5) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(14)
                        {
                            outr(6) <= resize(summed, 8);
                            summer <= (others => '0');
                        }
                        When(others)
                        {
                            summer <= summed;
                        }
                    }
                    state <= state + 1;
                }
                When(others)
                {
                    For(i IN 0 to n-1)
                    {
                        If(TO_INTEGER(ind1) = i)
                        {
                            data(i) <= bfout1;
                        }
                    }
                    For(i IN 0 to n-1)
                    {
                        If(TO_INTEGER(ind2) = i)
                        {
                            data(i) <= bfout2;
                        }
                    }
                    state <= state + 1;
                }
            }
        }
    }
    
    -----------sampling block-----------
    Process ()
    {
        If(rising_edge(clk_sfd))
        {
            For(i IN 1 to n-1)
            {
                samples(i) <= samples(i-1);
            }
            samples(0) <= TO_SIGNED(TO_INTEGER(SIGNED(adc_in)) - 128, 8);
        }
    }
}