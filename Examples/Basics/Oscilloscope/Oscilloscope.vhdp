/*
Important:
- UART baud rate is set to 1 mega baud
- Open the ISSP window if ISSP_Settings is true:
    1. Probe: ADC channel from 0 to 7
    2. Probe: Sample rate: 12 = 12MHz/12 = 1MSamples
*/

Main
(
    led           : OUT STD_LOGIC := '0';
    btn           : IN  STD_LOGIC := '0';
    TX            : OUT STD_LOGIC := '1';
)
{
    CONSTANT TimeUnit  : STD_LOGIC_VECTOR := s"us";
    CONSTANT NameChars : NATURAL := 13;
    CONSTANT UnitChars : NATURAL := 2;
    
    
    CONSTANT Sample_Rate   : NATURAL := 1000000; --1MHz
    CONSTANT ADC_Channel   : NATURAL := 0; --0-7
    
    ADC_MAX10_Single_Channel <= ADC_Channel;
    
    Logic_Analyzer_Rate_Div <= 12000000/Sample_Rate;

    led <= Logic_Analyzer_Full;
    
    SIGNAL ADC_MAX10_Single_Channel : NATURAL range 0 to 8 := 1;
    SIGNAL ADC_MAX10_Single_Data    : NATURAL range 0 to 4095 := 0;
    NewComponent ADC_MAX10_Single
    (
        Channel => ADC_MAX10_Single_Channel,
        Data    => ADC_MAX10_Single_Data,
    );
    
    Logic_Analyzer_Inputs <= STD_LOGIC_VECTOR(TO_UNSIGNED(ADC_MAX10_Single_Data, 12));
    
    SIGNAL Logic_Analyzer_Run           : STD_LOGIC := '0';
    SIGNAL Logic_Analyzer_Full          : STD_LOGIC := '0';
    SIGNAL Logic_Analyzer_Inputs        : STD_LOGIC_VECTOR (12-1 downto 0) := (others => '0');
    SIGNAL Logic_Analyzer_Address       : NATURAL          range 0 to 500 := 0;
    SIGNAL Logic_Analyzer_Outputs       : STD_LOGIC_VECTOR (12-1 downto 0);
    SIGNAL Logic_Analyzer_Rate_Div      : NATURAL          range 1 to 12000000 := 12;
    NewComponent Logic_Analyzer
    (
        Max_Samples   => 500,
        CLK_Frequency => 12000000,
        Channels      => 12,

        Rate_Div      => Logic_Analyzer_Rate_Div,
        Run           => Logic_Analyzer_Run,
        Full          => Logic_Analyzer_Full,
        Inputs        => Logic_Analyzer_Inputs,
        Address       => Logic_Analyzer_Address,
        Outputs       => Logic_Analyzer_Outputs,
    );
    
    
    Process ()
    {
        Thread
        {
            While(btn = '0')
            {
                Wait(10ms);
            }
            While(btn = '1')
            {
                Wait(10ms);
            }
            
            Logic_Analyzer_Run <= '1';
            While(Logic_Analyzer_Full = '0'){}
            Logic_Analyzer_Run <= '0';
            
            For(VARIABLE i : INTEGER := 0; i < 500; i := i + 1)
            {
                Plotter_Graph_Name <= s"ADC Channel 0"; --If string has fewer chars than 'NameChars': s"ADC Channel" & x"0000"; (x"0000" fills the 2 missing bytes)
                Plotter_Value      <= (ADC_MAX10_Single_Data*1000)/4096;  --From 12 bit value to mV
                Plotter_ValueUnit  <= s"mV";
                Plotter_Time       <= i-250;
                Plotter_Send <= '1';
                While(Plotter_Busy = '0'){}
                Plotter_Send <= '0';
                While(Plotter_Busy = '1'){}
                Wait(1s);
            }
        }
    }
    
    SIGNAL Plotter_Value         : INTEGER := 0;
    SIGNAL Plotter_Time          : INTEGER := 0;
    SIGNAL Plotter_Graph_Name    : STD_LOGIC_VECTOR (NameChars*8-1 downto 0);
    SIGNAL Plotter_ValueUnit     : STD_LOGIC_VECTOR (UnitChars*8-1 downto 0);
    SIGNAL Plotter_Send          : STD_LOGIC := '0';
    SIGNAL Plotter_Busy          : STD_LOGIC := '0';
    NewComponent Serial_Plotter_Interface
    (
        UseTime       => true,
        NameChars     => NameChars,
        UnitChars     => UnitChars,
        TimeUnit      => TimeUnit,
        CLK_Frequency => 12000000,
        Baud_Rate     => 1000000,

        Value         => Plotter_Value,
        Time          => Plotter_Time,
        Graph_Name    => Plotter_Graph_Name,
        ValueUnit     => Plotter_ValueUnit,
        Send          => Plotter_Send,
        Busy          => Plotter_Busy,
        TX            => TX,
    );
    
}
