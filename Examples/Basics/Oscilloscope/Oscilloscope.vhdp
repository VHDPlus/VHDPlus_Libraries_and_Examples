/*
Important:
- UART baud rate is set to 1 mega baud
- Set "Delete After" to 500
- To change the ADC channel: send "c0" for the 1. channel
- To change the sample rat: send "r1000000" for 1 mega samples per second
- To set the trigger level: send "t1000" for 1000mV
- To set rising or falling edge: send "f1" for falling and "f0" for rising
*/

Main
(
    TX            : OUT STD_LOGIC := '1';
    RX            : IN  STD_LOGIC := '1';
    
    Test_Signal   : OUT STD_LOGIC := '0';
)
{
    --Plotter settings
    CONSTANT GraphName : STD_LOGIC_VECTOR := s"ADC Channel ";
    CONSTANT TimeUnit  : STD_LOGIC_VECTOR := s"us";
    CONSTANT NameChars : NATURAL := 13;
    CONSTANT UnitChars : NATURAL := 2;
    
    --UART settings
    CONSTANT Baud_Rate : NATURAL := 1000000;
    CONSTANT CLK_Freq  : NATURAL := 12000000;
    
    --Trigger settings
    CONSTANT Trig_Timeout : NATURAL := 1200000; --Show output after 100ms if no trigger point
    
    --Default settings
    SIGNAL Sample_Rate   : NATURAL range 1 to 1000000 := 1000000; --1MHz
    SIGNAL ADC_Channel   : NATURAL range 0 to 8       := 0;       --channel 0
    SIGNAL Trig_Level    : NATURAL range 0 to 3300    := 1650;    --1,65V
    SIGNAL Trig_Falling  : NATURAL range 0 to 1       := 0;       --rising edge
    
    Process Oscilloscope ()
    {
        Thread
        {
            Wait(100ms);

            --Find trigger edge
            VARIABLE timeout_cntr : NATURAL range 0 to Trig_Timeout := 0;
            timeout_cntr := 0;
            While((TO_INTEGER(UNSIGNED(Logic_Analyzer_Inputs)) < Trig_Level XOR Trig_Falling = 0) AND timeout_cntr < Trig_Timeout){ timeout_cntr := timeout_cntr + 1; }
            While((TO_INTEGER(UNSIGNED(Logic_Analyzer_Inputs)) < Trig_Level XOR Trig_Falling = 1) AND timeout_cntr < Trig_Timeout){ timeout_cntr := timeout_cntr + 1; }
            
            --Fill logic analyzer with ADC data
            Logic_Analyzer_Start <= '1';
            While(Logic_Analyzer_Full = '0'){}
            Logic_Analyzer_Start <= '0';

            --Send saved data
            For(Logic_Analyzer_Address <= 0; Logic_Analyzer_Address < 500; Logic_Analyzer_Address <= Logic_Analyzer_Address + 1)
            {
                Plotter_Graph_Name <= GraphName & STD_LOGIC_VECTOR(TO_UNSIGNED(ADC_Channel+48, 8)); --If string has fewer chars than 'NameChars': ... & x"0000"; (x"0000" fills the 2 missing bytes)
                Plotter_Value      <= TO_INTEGER(UNSIGNED(Logic_Analyzer_Outputs));
                Plotter_ValueUnit  <= s"mV";     --If string has fewer chars than 'UnitChars': s"V" & x"00"
                Plotter_Time       <= (Logic_Analyzer_Address-250) * (1000000/Sample_Rate);      --Sample rate to micro seconds
                --Send to plotter
                Plotter_Send <= '1';
                While(Plotter_Busy = '0'){}
                Plotter_Send <= '0';
                While(Plotter_Busy = '1'){}
                
                --send trigger value
                Plotter_Graph_Name <= (others => '0');
                Plotter_Graph_Name(Plotter_Graph_Name'LENGTH-1 downto Plotter_Graph_Name'LENGTH-32) <= s"Trig";
                Plotter_Value      <= Trig_Level;
                --Send to plotter
                Plotter_Send <= '1';
                While(Plotter_Busy = '0'){}
                Plotter_Send <= '0';
                While(Plotter_Busy = '1'){}
            }
        }
    }
    
    Process Settings ()
    {
        Thread
        {
            --Read string from console in "readStr"
            NewFunction newString (readStr);                       --Create string
            NewFunction readString (readStr, UART_Interface_RX_Data, UART_Interface_RX_Busy);  --Read uart message in string
            SIGNAL channel_i : INTEGER;
            SIGNAL rate_i    : INTEGER;
            SIGNAL trig_i    : INTEGER;
            SIGNAL fall_i    : INTEGER;
            --Check if received string is channel or sample rate setting
            rate_i    <= -1;                                       --Set sample rate index to -1 if indexof is skipped
            NewFunction indexOf (readStr, s"c", 1, 0, channel_i);  --Find index of c: "c3" <- 0  "r10000" <- -1
            If(channel_i /= 0)                                     --check if message was channel setting
            {
                NewFunction indexOf (readStr, s"r", 1, 0, rate_i); --Find index of r: "r10000" <- 0
            }
            If(channel_i /= 0 AND rate_i /= 0)
            {
                NewFunction indexOf (readStr, s"t", 1, 0, trig_i); --Find index of t: "t1000" <- 0
            }
            If(channel_i /= 0 AND rate_i /= 0 AND trig_i /= 0)
            {
                NewFunction indexOf (readStr, s"f", 1, 0, fall_i); --Find index of t: "f1" <- 0
            }
            If(rate_i = 0 OR channel_i = 0 OR trig_i = 0 OR fall_i = 0) --check if received string is channel or sample rate setting
            {
                --Convert received string to value of new sample rate or adc channel
                NewFunction newString (convertStr);                --create string for the number in the message
                NewFunction substring (readStr, 1, readStr.Length-1, convertStr);  --remove first char in message: "c3" -> "3", "r10000" -> "10000"
                SIGNAL receivedValue : NATURAL;
                NewFunction stringToNatural (convertStr, receivedValue); --Convert string to number
                if(rate_i = 0 AND receivedValue > 0 AND receivedValue <= 1000000) --check if sample rate is from 1 - 1,000,000
                {
                    Sample_Rate <= receivedValue;                  --set new sample rate
                }
                Elsif(channel_i = 0 AND receivedValue < 9)         --check if channel is from 0 - 8
                {
                    ADC_Channel <= receivedValue;                  --set new adc channel
                }
                Elsif(trig_i = 0 AND receivedValue < 3301)         --check if trigger is from 0 - 3300
                {
                    Trig_Level <= receivedValue;                   --set new trigger level
                }
                Elsif(fall_i = 0 AND receivedValue < 2)            --check if falling/rising edge setting is 0 or 1
                {
                    Trig_Falling <= receivedValue;                 --set new trigger falling/rising edge setting
                }
            }
        }
    }
    
    --Create 10 kHz signal to test input
    Process Test ()
    {
        Thread
        {
            --A bit lower frequency because Wait and setting the value also take 1 clock cycle
            Test_Signal <= '0';
            Wait(50us);
            Test_Signal <= '1';
            Wait(50us);
        }
    }
    
    ADC_MAX10_Single_Channel <= ADC_Channel;

    SIGNAL ADC_MAX10_Single_Channel : NATURAL range 0 to 8 := 1;
    SIGNAL ADC_MAX10_Single_Data    : NATURAL range 0 to 4095 := 0;
    
    NewComponent ADC_MAX10_Single
    (
        Channel => ADC_MAX10_Single_Channel,
        Data    => ADC_MAX10_Single_Data,
    );

    Logic_Analyzer_Rate_Div <= 12000000/Sample_Rate;
    
    Logic_Analyzer_Inputs <= STD_LOGIC_VECTOR(TO_UNSIGNED((ADC_MAX10_Single_Data*3300/4096), 12)); --From 12 bit value to mV
    
    SIGNAL Logic_Analyzer_Start           : STD_LOGIC := '0';
    SIGNAL Logic_Analyzer_Full          : STD_LOGIC := '0';
    SIGNAL Logic_Analyzer_Inputs        : STD_LOGIC_VECTOR (12-1 downto 0) := (others => '0');
    SIGNAL Logic_Analyzer_Address       : NATURAL          range 0 to 500 := 0;
    SIGNAL Logic_Analyzer_Outputs       : STD_LOGIC_VECTOR (12-1 downto 0);
    SIGNAL Logic_Analyzer_Rate_Div      : NATURAL          range 1 to 12000000 := 12;
    NewComponent Logic_Analyzer
    (
        Max_Samples   => 500,
        CLK_Frequency => CLK_Freq,
        Channels      => 12,
        Start_Offset  => 250,

        Rate_Div      => Logic_Analyzer_Rate_Div,
        Start         => Logic_Analyzer_Start,
        Full          => Logic_Analyzer_Full,
        Inputs        => Logic_Analyzer_Inputs,
        Address       => Logic_Analyzer_Address,
        Outputs       => Logic_Analyzer_Outputs,
    );
    
    SIGNAL Plotter_Value         : INTEGER := 0;
    SIGNAL Plotter_Time          : INTEGER := 0;
    SIGNAL Plotter_Graph_Name    : STD_LOGIC_VECTOR (NameChars*8-1 downto 0);
    SIGNAL Plotter_ValueUnit     : STD_LOGIC_VECTOR (UnitChars*8-1 downto 0);
    SIGNAL Plotter_Send          : STD_LOGIC := '0';
    SIGNAL Plotter_Busy          : STD_LOGIC := '0';
    NewComponent Serial_Plotter_Interface
    (
        UseTime       => true,
        NameChars     => NameChars,
        UnitChars     => UnitChars,
        TimeUnit      => TimeUnit,
        CLK_Frequency => CLK_Freq,
        Baud_Rate     => Baud_Rate,

        Value         => Plotter_Value,
        Time          => Plotter_Time,
        Graph_Name    => Plotter_Graph_Name,
        ValueUnit     => Plotter_ValueUnit,
        Send          => Plotter_Send,
        Busy          => Plotter_Busy,
        TX            => TX,
    );
    
    SIGNAL UART_Interface_RX_Busy       : STD_LOGIC := '0';
    SIGNAL UART_Interface_RX_Data       : STD_LOGIC_VECTOR (8-1 DOWNTO 0) := (others => '0');
    NewComponent UART_Interface
    (
        CLK_Frequency => CLK_Freq,
        Baud_Rate     => Baud_Rate,
        OS_Rate       => 12,

        RX            => RX,
        RX_Busy       => UART_Interface_RX_Busy,
        RX_Data       => UART_Interface_RX_Data,
    );
}
