/*
    Copyright (c) 2021 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Insertion: -Right click on Logic_Analyzer.vhdp -> Add to project
               -Add NewComponent of Logic_Analyzer in your code
               -Right click the name Logic_Analyzer next to NewComponent and create the needed signal
    
    Function:  -Saves "Inputs" with the rate of CLK_Frequency/Rate_Div while Start is '1'
               -Can be verry fast if Rate_Div = 1 and you use a PLL to increase the CLK_Frequency
               -Values can be read with Address and Outputs afterwards
               -Only can save a limited amount of samples because it uses the internal RAM
 */

Component Logic_Analyzer
(
    Generic
    (
        Max_Samples    : NATURAL := 25000;    --25,000 samples
        CLK_Frequency  : NATURAL := 12000000; --12MHz
        Channels       : NATURAL := 8;
    );
    
    Rate_Div     : IN  NATURAL range 1 to CLK_Frequency := 12; --12 = CLK_Frequency/12 = 1Mio samples per second
    Samples      : IN  NATURAL range 1 to Max_Samples   := Max_Samples;  --Samples to save with offset samples
    Start_Offset : IN  NATURAL range 0 to Max_Samples   := 0;  --Number of samples that are saved before start changes to '1' to see the data before the trigger point
    
    Run          : IN  STD_LOGIC := '0'; --Saves data while Run is '1'. Read data when Full is '1'. Set Run to '0' after you read the data from the RAM
    Full         : OUT STD_LOGIC := '0'; --changes from '0' to '1' when ram is full -> Set Run to '0' after you read the data
    
    Inputs       : IN  STD_LOGIC_VECTOR(Channels-1 downto 0) := (others => '0');
    
    Address      : IN  NATURAL range 0 to Max_Samples-1 := 0;   --Read the values
    Outputs      : OUT STD_LOGIC_VECTOR(Channels-1 downto 0);
)
{
    SIGNAL sample_clk_en : STD_LOGIC := '0';
    
    SIGNAL full_reg : STD_LOGIC;
    Full <= full_reg;

    Process ()
    {
        VARIABLE div_cntr : NATURAL range 0 to CLK_Frequency := 0;
        If(div_cntr >= Rate_Div-1)
        {
            div_cntr := 0;
            sample_clk_en <= '1';
        }
        Else
        {
            sample_clk_en <= '0';
            div_cntr := div_cntr + 1;
        }
    }
    --sample_clk <= CLK when sample_clk_en = '1' else '0';
    
    --Samples routieren -> nach trigger restliche samples speicher und start merkem -> speichern stoppen und warten dass ausgelesen wird -> routieren starten
    
    TYPE lao_ram_type IS ARRAY (0 to Max_Samples-1) OF STD_LOGIC_VECTOR(Channels-1 downto 0);
    SIGNAL lao_ram   : lao_ram_type;
    
    Process ()
    {
        VARIABLE in_addr      : NATURAL range 0 to Max_Samples := 0;
        SIGNAL   ram_addr     : NATURAL range 0 to Max_Samples := 0;
        SIGNAL   start_addr   : NATURAL range 0 to Max_Samples := 0;
        VARIABLE copy_start   : BOOLEAN := true;
        If(Run = '0')
        {
            full_reg   <= '0';
            copy_start := true;
            
            If(sample_clk_en = '1')
            {
                lao_ram(in_addr) <= Inputs;
                If(in_addr < Max_Samples-1)
                {
                    in_addr := in_addr + 1;
                }
                Else
                {
                    in_addr := 0;
                }
            }
            
            
            start_addr  <= (in_addr-Start_Offset) mod Max_Samples;
        }
        Else
        {
            
            If(copy_start or in_addr /= (start_addr + Samples) mod Max_Samples)
            {
                If(sample_clk_en = '1')
                {
                    copy_start := false;
                    
                    lao_ram(in_addr) <= Inputs;
                    If(in_addr < Max_Samples-1)
                    {
                        in_addr := in_addr + 1;
                    }
                    Else
                    {
                        in_addr := 0;
                    }
                }
            }
            Else
            {
                full_reg <= '1';
                VARIABLE out_addr : NATURAL range 0 to Max_Samples := 0;
                SIGNAL out_addr_sig : NATURAL range 0 to Max_Samples := 0;
                out_addr := (Address + start_addr) mod Max_Samples;
                Outputs <= lao_ram(out_addr);
                out_addr_sig <= out_addr;
            }
        }
        
        ram_addr    <= in_addr;
    }
    
}