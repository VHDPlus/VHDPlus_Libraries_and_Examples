/*
    Name: Single-Port RAM
    Rev: 1.0
    Creator: Leon Beier
    Date: 27.08.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Description: This component allows save Data in the internal block memory
    
    Insertion:   -Right click on Single-Port_ROM.vhdp -> Add to project
                 -Add NewComponent of Single_Port_ROM in your code
                 -Set Data to the string (bit vector) you want to save
                 -Right click the name Single_Port_ROM next to NewComponent and create the needed signals
    
    Function:    Read:  -Set Address to the position of the Data to read
                        -Wait one cycle and read the Data with Data_OUT (Step{... <= Data_OUT;})
 */

Component Single_Port_ROM
(
    Include();
    Generic
    (
        Data    : STD_LOGIC_VECTOR := x"524f4d204578616d706c65";    --"ROM Example"
        LWidth  : NATURAL := 256; --Number of bytes
    );
    Length   : OUT NATURAL range 0 to LWidth := Data'LENGTH/8;
    Address  : in  natural range 0 to LWidth-1 := 0;
    Data_OUT : out std_logic_vector(7 downto 0)  --Data at given Address
)
{
    constant width    : NATURAL := Data'LENGTH/8;
    constant data_buf : STD_LOGIC_VECTOR (Data'LENGTH-1 downto 0) := Data;
    type memory_t is array(width-1 downto 0) of std_logic_vector(7 downto 0);
    
    Function init_rom
    (
        return memory_t;
    )
    {
        variable tmp : memory_t := (others => (others => '0'));
        For (addr_pos in 0 to width-1)
        {
            tmp((width-1)-addr_pos) := data_buf((addr_pos+1)*8-1 downto (addr_pos)*8);
        }
        return tmp;
    }
    
    constant rom : memory_t := init_rom;
    
    Data_OUT <= rom(Address);
}