/*
    Name: Binary to BCD
    Rev: 1.0
    Creator: Leon Beier
    Date: 20.08.2019

	This file is a derivation of the implementation found at: https://www.digikey.com/eewiki/pages/viewpage.action?pageId=60030986
	
	Important: -You need to add BinaryToBcdDigit.vhdp too
			   -Bits limit the biggest number to convert and Digits have to be set depending on Bits
	           -Every number has 4 bits in the BCD output BCD(3 downto 0) is the last digit (3 for 123)
	
    Insertion: -Right click on BinaryToBcd.vhdp and BinaryToBcdDigit.vhdp -> Add to project
			   -Add NewComponent of BinaryToBcd in your code
			   -Set Bits depending on the maximum number to convert (Bits = 8 -> maximum is 2^8-1 = 255)
			   -Set Digits depending on Bits
			    Bits   Digits
				1-3    1 
				4-6    2
				7-9    3
				10-13  4
				14-16  5
				17-19  6
				20-23  7
				24-26  8
				27-29  9
				30-32  10
			   -Remove Reset or connect it to a signal or input
			   -Right click the name BinaryToBcd next to NewComponent and create the needed signals
	
    Function:  -Set Binary to the number to convert (Binary <= STD_LOGIC_VECTOR(TO_UNSIGNED(<natural>, Bits));)
               -Set Enable from '0' to '1'
               -Wait until busy changes from '1' to '0'
               -Read the digits from BCD (123 -> BCD(11 downto 8) => 1, BCD(7 downto 4) => 2, BCD(3 downto 0) => 3)
	
    Example:   IntToString
*/

Component BinaryToBcd
(
	Include();
	Generic(
		Bits	: INTEGER := 16;							--size of the binary input numbers in bits
		Digits	: INTEGER := 5;								--number of BCD digits to convert to
	);
	Reset	: IN  STD_LOGIC := '0';							--active high reset
	Enable	: IN  STD_LOGIC := '0';							--latches in new binary number and starts conversion
	Binary	: IN  STD_LOGIC_VECTOR(Bits-1 DOWNTO 0) := (others => '0');		--binary number to convert
	Busy	: OUT STD_LOGIC := '0';							--indicates conversion in progress
	BCD		: OUT STD_LOGIC_VECTOR(Digits*4-1 DOWNTO 0) := (others => '0');	--resulting BCD number
)
{
	AttributeDeclaration
	{
		TYPE	machine IS(idle, convert);										--needed states
		SIGNAL	state     			:  machine;									--state machine
		SIGNAL	binary_reg			:	STD_LOGIC_VECTOR(Bits-1 DOWNTO 0);		--latched in binary number
		SIGNAL	bcd_reg				:	STD_LOGIC_VECTOR(Digits*4-1 DOWNTO 0);	--bcd result register
		SIGNAL	converter_ena		:	STD_LOGIC;
		SIGNAL	converter_inputs	:	STD_LOGIC_VECTOR(Digits DOWNTO 0);		--inputs into each BCD single digit converter
		
		VHDL
		{
			--binary to BCD single digit converter component
			COMPONENT BinaryToBcdDigit IS
				PORT(
					CLK		: IN		STD_LOGIC;
					Reset	: IN		STD_LOGIC;
					Enable	: IN		STD_LOGIC;
					Binary	: IN		STD_LOGIC;
					C_Out	: BUFFER	STD_LOGIC;
					BCD		: BUFFER	STD_LOGIC_VECTOR(3 DOWNTO 0));
			END COMPONENT BinaryToBcdDigit;
		}
	}
	
	VHDL
	{
		--instantiate the converter logic for the specified number of digits
		bcd_digits: FOR i IN 1 to Digits GENERATE
			digit_0: BinaryToBcdDigit
			PORT MAP (
				CLK, 
				Reset, 
				converter_ena, 
				converter_inputs(i-1), 
				converter_inputs(i), 
				bcd_reg(i*4-1 DOWNTO i*4-4)
			); 
		END GENERATE;
	}
	
	Process
	(
		VARIABLE bit_count :	INTEGER RANGE 0 TO Bits+1 := 0;  --counts the binary bits shifted into the converters
	)
	{
		if(Reset = '1')
		{
			bit_count := 0;								--reset bit counter
			Busy <= '1';								--indicate not available
			converter_ena <= '0';						--disable the converter
			BCD <= (OTHERS => '0');						--clear BCD result port
			state <= idle;								--reset state machine
		}
		else
		{
			case(state)
			{
				when(idle)
				{
					if(Enable = '1')
					{
						Busy <= '1';					--indicate conversion in progress
						converter_ena <= '1';			--enable the converter
						binary_reg <= Binary;			--latch in binary number for conversion
						bit_count := 0;					--reset bit counter
						state <= convert;				--go to convert state
					}
					else
					{
						Busy <= '0';					--indicate available
						converter_ena <= '0';			--disable the converter
						state <= idle;					--remain in idle state
					}
				}
				when(convert)
				{
					if(bit_count < Bits+1)
					{
						bit_count := bit_count + 1;								--increment bit counter
						converter_inputs(0) <= binary_reg(Bits-1);				--shift next bit into converter
						binary_reg <= binary_reg(Bits-2 DOWNTO 0) & '0';		--shift binary number register
						state <= convert;										--remain in convert state
					}
					else
					{
						Busy <= '0';											--indicate conversion is complete
						converter_ena <= '0';									--disable the converter
						BCD <= bcd_reg;											--output result
						state <= idle;											--return to idle state
					}
				}
			}
		}
	}
}