/*
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Insertion: -Right click on SDRAM_Interface.vhdp -> Add to project
               -Right click on SDRAM_Interface.qsys -> Add to project
               -Add NewComponent of SDRAM_Interface in your code
               -Right click the name SDRAM_Interface next to NewComponent and create the needed signal
    
    Function:  -You can read or write a 16bit word with the Write_SDRAM or Read_SDRAM function
               -See the Intel Avalon Interface Specifications sheet for more information on how to use the SDRAM component
 */

Component SDRAM_Interface
(
    Reset                 : IN    std_logic                     := '1';
    CLK_150_Out           : OUT   std_logic;                                        -- 50MHz Clock Output
    
    Address               : IN    std_logic_vector(21 downto 0) := (others => '0'); -- Data Address
    Write_Enable          : IN    std_logic                     := '0';             -- Enable Write
    Write_Data            : IN    std_logic_vector(15 downto 0) := (others => '0'); -- Data to Write
    Read_Enable           : IN    std_logic                     := '0';             -- Enable Write
    Read_Data             : OUT   std_logic_vector(15 downto 0) := (others => '0'); -- Data to Write
    Read_Valid            : OUT   std_logic                     := '0';             -- Read Data Calid
    Busy                  : OUT   std_logic                     := '0';             -- Read/Write Busy
    
    sdram_addr            : out   std_logic_vector(11 downto 0);
    sdram_ba              : out   std_logic_vector(1 downto 0);
    sdram_cas_n           : out   std_logic;
    sdram_cke             : out   std_logic := '1';  --NOT USED WITH CORE MAX10
    sdram_cs_n            : out   std_logic := '0';  --NOT USED WITH CORE MAX10
    sdram_dq              : inout std_logic_vector(15 downto 0) := (others => '0');
    sdram_dqm             : out   std_logic_vector(1 downto 0);
    sdram_ras_n           : out   std_logic;
    sdram_we_n            : out   std_logic;
    sdram_clk             : out   std_logic;
)
{
    SIGNAL reset_reset_n : STD_LOGIC;
    reset_reset_n <= NOT Reset;
    
    sdram_s_address <= Address;
    sdram_s_write_n <= NOT Write_Enable;
    sdram_s_writedata <= Write_Data;
    sdram_s_read_n <= NOT Read_Enable;
    Read_Data <= sdram_s_readdata;
    Read_Valid <= sdram_s_readdatavalid;
    Busy <= sdram_s_waitrequest;
    
    CLK_150_Out <= CLK_150;
    
    AttributeDeclaration
    {
        VHDL
        {
            component SDRAM_Controller is
            port (
                sdram_addr            : out   std_logic_vector(11 downto 0);                    -- addr
                sdram_ba              : out   std_logic_vector(1 downto 0);                     -- ba
                sdram_cas_n           : out   std_logic;                                        -- cas_n
                sdram_cke             : out   std_logic;                                        -- cke
                sdram_cs_n            : out   std_logic;                                        -- cs_n
                sdram_dq              : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
                sdram_dqm             : out   std_logic_vector(1 downto 0);                     -- dqm
                sdram_ras_n           : out   std_logic;                                        -- ras_n
                sdram_we_n            : out   std_logic;                                        -- we_n
                
                sdram_s_address       : in    std_logic_vector(21 downto 0) := (others => 'X'); -- address
                sdram_s_byteenable_n  : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable_n
                sdram_s_chipselect    : in    std_logic                     := 'X';             -- chipselect
                sdram_s_writedata     : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
                sdram_s_read_n        : in    std_logic                     := 'X';             -- read_n
                sdram_s_write_n       : in    std_logic                     := 'X';             -- write_n
                sdram_s_readdata      : out   std_logic_vector(15 downto 0);                    -- readdata
                sdram_s_readdatavalid : out   std_logic;                                        -- readdatavalid
                sdram_s_waitrequest   : out   std_logic;                                        -- waitrequest
                
                reset_reset_n         : in    std_logic                     := 'X';             -- reset_n
                clk_in_clk            : in    std_logic                     := 'X'              -- clk
            );
            end component SDRAM_Controller;
        }
    }
    
    SIGNAL sdram_s_address       : std_logic_vector(21 downto 0) := (others => '0'); -- address
    SIGNAL sdram_s_byteenable_n  : std_logic_vector(1 downto 0)  := (others => '0'); -- byteenable_n
    SIGNAL sdram_s_chipselect    : std_logic                     := '1';             -- chipselect
    SIGNAL sdram_s_writedata     : std_logic_vector(15 downto 0) := (others => '0'); -- writedata
    SIGNAL sdram_s_read_n        : std_logic                     := '1';             -- read_n
    SIGNAL sdram_s_write_n       : std_logic                     := '1';             -- write_n
    SIGNAL sdram_s_readdata      : std_logic_vector(15 downto 0);                    -- readdata
    SIGNAL sdram_s_readdatavalid : std_logic;                                        -- readdatavalid
    SIGNAL sdram_s_waitrequest   : std_logic;                                        -- waitrequest
    
    SeqFunction Write_SDRAM
    (
        Data_In      : STD_LOGIC_VECTOR(15 downto 0);
        Address_In   : NATURAL;
        
        Address      : STD_LOGIC_VECTOR;
        Write_Enable : STD_LOGIC;
        Write_Data   : STD_LOGIC_VECTOR(15 downto 0);
        Busy         : STD_LOGIC;
    )
    {
        Write_Enable <= '1';
        Address <= STD_LOGIC_VECTOR(TO_UNSIGNED(Address_In, Address'LENGTH));
        Write_Data <= Data_In;
        While(Busy = '1') {}
        Write_Enable <= '0';
    }
    
    SeqFunction Read_SDRAM
    (
        Data_Out     : STD_LOGIC_VECTOR(15 downto 0);
        Address_In   : NATURAL;
        
        Address      : STD_LOGIC_VECTOR;
        Read_Enable  : STD_LOGIC;
        Read_Data    : STD_LOGIC_VECTOR(15 downto 0);
        Busy         : STD_LOGIC;
    )
    {
        Read_Enable <= '1';
        Address <= STD_LOGIC_VECTOR(TO_UNSIGNED(Address_In, Address'LENGTH));
        While(Busy = '1') {}
        Data_Out <= Read_Data;
        Read_Enable <= '0';
    }
    
    VHDL
    {
        u0 : component SDRAM_Controller
        port map (
            sdram_addr            => sdram_addr,            --   sdram.addr
            sdram_ba              => sdram_ba,              --        .ba
            sdram_cas_n           => sdram_cas_n,           --        .cas_n
            sdram_cke             => sdram_cke,             --        .cke
            sdram_cs_n            => sdram_cs_n,            --        .cs_n
            sdram_dq              => sdram_dq,              --        .dq
            sdram_dqm             => sdram_dqm,             --        .dqm
            sdram_ras_n           => sdram_ras_n,           --        .ras_n
            sdram_we_n            => sdram_we_n,            --        .we_n
            
            sdram_s_address       => sdram_s_address,       -- sdram_s.address
            sdram_s_byteenable_n  => sdram_s_byteenable_n,  --        .byteenable_n
            sdram_s_chipselect    => sdram_s_chipselect,    --        .chipselect
            sdram_s_writedata     => sdram_s_writedata,     --        .writedata
            sdram_s_read_n        => sdram_s_read_n,        --        .read_n
            sdram_s_write_n       => sdram_s_write_n,       --        .write_n
            sdram_s_readdata      => sdram_s_readdata,      --        .readdata
            sdram_s_readdatavalid => sdram_s_readdatavalid, --        .readdatavalid
            sdram_s_waitrequest   => sdram_s_waitrequest,   --        .waitrequest
            
            reset_reset_n         => reset_reset_n,
            clk_in_clk            => CLK_150
        );
    }
    
    SIGNAL CLK_150     : STD_LOGIC;
    NewComponent SDRAM_PLL
    (
        inclk0 => CLK,
        c0     => CLK_150,
        c1     => sdram_clk,
    );
    
    Connections
    {
        sdram_addr[0]  => SDRAM_ADD_1,
        sdram_addr[1]  => SDRAM_ADD_2,
        sdram_addr[2]  => SDRAM_ADD_3,
        sdram_addr[3]  => SDRAM_ADD_4,
        sdram_addr[4]  => SDRAM_ADD_5,
        sdram_addr[5]  => SDRAM_ADD_6,
        sdram_addr[6]  => SDRAM_ADD_7,
        sdram_addr[7]  => SDRAM_ADD_8,
        sdram_addr[8]  => SDRAM_ADD_9,
        sdram_addr[9]  => SDRAM_ADD_10,
        sdram_addr[10] => SDRAM_ADD_11,
        sdram_addr[11] => SDRAM_ADD_12,
        sdram_addr[12] => SDRAM_ADD_13,
        sdram_ba[0]    => SDRAM_BAN_1,
        sdram_ba[1]    => SDRAM_BAN_2,
        sdram_cas_n    => SDRAM_CAS,
        sdram_clk      => SDRAM_CLK,
        sdram_ras_n    => SDRAM_RAS,
        sdram_we_n     => SDRAM_WEN,
        sdram_dqm[0]   => SDRAM_DQM_1,
        sdram_dqm[1]   => SDRAM_DQM_2,
        sdram_dq[0]    => SDRAM_DAT_1,
        sdram_dq[1]    => SDRAM_DAT_2,
        sdram_dq[2]    => SDRAM_DAT_3,
        sdram_dq[3]    => SDRAM_DAT_4,
        sdram_dq[4]    => SDRAM_DAT_5,
        sdram_dq[5]    => SDRAM_DAT_6,
        sdram_dq[6]    => SDRAM_DAT_7,
        sdram_dq[7]    => SDRAM_DAT_8,
        sdram_dq[8]    => SDRAM_DAT_9,
        sdram_dq[9]    => SDRAM_DAT_10,
        sdram_dq[10]   => SDRAM_DAT_11,
        sdram_dq[11]   => SDRAM_DAT_12,
        sdram_dq[12]   => SDRAM_DAT_13,
        sdram_dq[13]   => SDRAM_DAT_14,
        sdram_dq[14]   => SDRAM_DAT_15,
        sdram_dq[15]   => SDRAM_DAT_16,
        
        Reset,
    }
}