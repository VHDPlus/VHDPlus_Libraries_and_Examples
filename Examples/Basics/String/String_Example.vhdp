Main
(
    led : OUT STD_LOGIC := '0';
    RX            : IN STD_LOGIC;
    TX            : OUT STD_LOGIC;
)
{
    SIGNAL UART_Interface_TX_Enable     : STD_LOGIC;
    SIGNAL UART_Interface_TX_Busy       : STD_LOGIC;
    SIGNAL UART_Interface_TX_Data       : STD_LOGIC_VECTOR (7 DOWNTO 0);
    SIGNAL UART_Interface_RX_Busy       : STD_LOGIC;
    SIGNAL UART_Interface_RX_Data       : STD_LOGIC_VECTOR (7 DOWNTO 0);
    SIGNAL UART_Interface_RX_Error      : STD_LOGIC;
    
    NewComponent UART_Interface
    (
        Baud_Rate     => 9600,
        
        RX            => RX,
        TX            => TX,
        TX_Enable     => UART_Interface_TX_Enable,
        TX_Busy       => UART_Interface_TX_Busy,
        TX_Data       => UART_Interface_TX_Data,
        RX_Busy       => UART_Interface_RX_Busy,
        RX_Data       => UART_Interface_RX_Data,
        RX_Error      => UART_Interface_RX_Error,
    );
    
    SIGNAL BinaryToBcd_Enable : STD_LOGIC;
    SIGNAL BinaryToBcd_Binary : STD_LOGIC_VECTOR (8-1 DOWNTO 0);
    SIGNAL BinaryToBcd_Busy   : STD_LOGIC;
    SIGNAL BinaryToBcd_BCD    : STD_LOGIC_VECTOR (3*4-1 DOWNTO 0);
    
    NewComponent BinaryToBcd
    (
        Bits   => 8, --receiveCount is 0 to 255
        Digits => 3, --8bit = 1 to 3 digits
        
        Enable => BinaryToBcd_Enable,
        Binary => BinaryToBcd_Binary,
        Busy   => BinaryToBcd_Busy,
        BCD    => BinaryToBcd_BCD,
    );

    Process ()
    {
        Thread
        {
            led <= '1';
            Wait(1200000);
            led <= '0';
            Wait(1200000);
        }

        Thread
        {
            SIGNAL receiveCount : NATURAL range 0 to 255 := 1;

            --Create string for received data
            SIGNAL receive_string : String_Type;
            NewFunction newString (receive_string);
            
            --Receive UART Data--
            NewFunction readString (receive_string, UART_Interface_RX_Data, UART_Interface_RX_Busy);
            ---------------------
            
            --Create string for number of received messages
            SIGNAL number_string : String_Type;
            NewFunction newString (number_string);
            
            --Convert receiveCount to String--
            NewFunction naturalToString (receiveCount, number_string, BinaryToBcd_Enable, BinaryToBcd_Busy, BinaryToBcd_Binary, BinaryToBcd_BCD);
            ----------------------------------
            
            --Combine strings
            SIGNAL transmit_string : String_Type;
            NewFunction newString (transmit_string);
            SIGNAL string_received : String_Type;
            NewFunction assignString (x"2e2052656365697665643a20", string_received); --". Received: "
            
            --receiveCount + ". Received: " = transmit string--
            NewFunction stringConcat (number_string, string_received, transmit_string);
            --transmit string + Received string = transmit string
            NewFunction stringAppend (receive_string, transmit_string);
            ---------------------------------------------------

            --Send combined string
            NewFunction printString (transmit_string, UART_Interface_TX_Data, UART_Interface_TX_Busy, UART_Interface_TX_Enable);
            
            receiveCount <= receiveCount + 1;
        }
    }
}