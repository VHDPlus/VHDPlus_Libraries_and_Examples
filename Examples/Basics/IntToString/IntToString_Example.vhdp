/*
    Name: Int to String Example
    Rev: 1.0
    Creator: Leon Beier
    Date: 20.08.2019
	Copyright (c) 2019 Protop Solutions UG. All right reserved.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of 
	this hdl code and associated documentation files (the "HDL Code"), to deal in the 
	HDL Code without restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
	HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
	subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
	WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
*/

Main
(
    rw              : OUT   STD_LOGIC;                    --read/write for lcd
    rs              : OUT   STD_LOGIC;                    --setup/data for lcd
    e               : OUT   STD_LOGIC;                    --enable for lcd
    lcd_data        : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0); --data signals for lcd
    btn             : IN    STD_LOGIC;
)
{
    
    SIGNAL testInt   : INTEGER := 0;     --integer to convert
    SIGNAL intBusy   : STD_LOGIC := '0'; --'1' while converting
    SIGNAL usedChars : NATURAL   := 0;   --Chars that are used for the number
    SIGNAL enable    : STD_LOGIC := '0'; --starts converting
    SIGNAL intString : STD_LOGIC_VECTOR (47 downto 0) := (others => '0');  --Bits are set to 16 so the number with the most digits is -32768 -> 6*8 = 48
    
    NewComponent IntTostring 
    (
        Bits       => 16,
        Digits     => 5,

        Number     => testInt,
        Num_String => intString,
        Enable     => enable,
        Used       => usedChars,
        Busy       => intBusy,
    );
    
    SIGNAL outputString : STD_LOGIC_VECTOR (127 downto 0) := (others => '0'); --Second line of display
    SIGNAL LCD_Enable   : STD_LOGIC;
    
    NewComponent LCD_Controller 
    (
        RW            => rw,
        RS            => rs,
        E             => e,
        Data          => lcd_data,
        Line1_Buffer  => x"4d65696e652057657274653a20202020",
        Line2_Buffer  => outputString,
        Enable        => LCD_Enable,
    );
    
    Process
    (
        VARIABLE state : NATURAL range 0 to 2 := 0;
        VARIABLE demo  : INTEGER := -3206;
    )
    {
        case(state)
        {
            when(0)
            {
                testInt <= demo;
                enable  <= '1';
                LCD_Enable <= '0';
                state := 1;
            }
            When(1)
            {
                If(intBusy = '1')
                {
                    state  := 2;
                    enable <= '0';
                }
            }
            when(2)
            {
                If(intBusy = '0')
                {   --"Test: " + int
                
                    --Version 1:
                    outputString (127 downto 127-47) <= x"546573743a20";    --"Wert: "
                    outputString (127-48 downto 127-47-usedChars*8) <= intString(intString'LENGTH-1 downto intString'LENGTH-(usedChars*8));
                    outputString (127-48-usedChars*8 downto 0) <= (others => '0');
                    
                    --Version 2: 
                    --outputString <= x"576572743a20" & intString & x"2020202020";
                    
                    LCD_Enable <= '1';
                }
            }
        }
    }
}