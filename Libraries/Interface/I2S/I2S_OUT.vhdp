/*
    Name: I2S OUT
    Rev: 1.0
    Creator: Leon Beier
    Date: 22.08.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of 
	this hdl code and associated documentation files (the "HDL Code"), to deal in the 
	HDL Code without restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
	HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
	subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
	WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
	
    Insertion: -Right click on I2C_OUT.vhdp -> Add to project
			   -Add NewComponent of I2S_Interface_OUT in your code
			   -Change Data_Width, Sample_Bits and BCLK_Edge depending on the device to connect 
			    (see the description next to the declarations and use the datasheet for your device)
			   -Remove Reset or connect it to a signal or input
			   -Add this to your Main I/Os and connect RX to TX and TX to RX of the device to connect (modify the names if already in use)
			    LRCLK  : IN  STD_LOGIC;
				BCLK   : IN  STD_LOGIC;
				Data   : OUT STD_LOGIC;
			   -Right click the name I2S_Interface_OUT next to NewComponent and create the needed signals
	
    Function:  -Wait for Ready = '1'
    		   -Set Data_R
    		   -Wait for Ready = '0'
    		   -Set Data_L
    		    
    Example:   I2S_Example
*/

Component I2S_Interface_OUT
(
	Generic
	(
		Data_Width 			: integer range 16 to 32 	:= 24;	--Number of data bits in a sample
    	Sample_Bits 		: integer range 16 to 32	:= 32;	--Number of bclk periods for one sample
    	BCLK_Edge			: STD_LOGIC					:= '0';	--'1' for Writing Data on rising edge and '0' for Writing Data on falling edge
	);
	Reset	: IN  STD_LOGIC									:= '0';				--Active high Reset
	LRCLK	: IN  STD_LOGIC 								:= '0';				--LRCLK output
	BCLK	: IN  STD_LOGIC 								:= '0';				--BCLK output
	Data	: OUT STD_LOGIC									:= '0';				--DATA output
	Data_L	: IN  STD_LOGIC_VECTOR(Data_Width-1 downto 0) 	:= (others => '0');	--Data to write when LRCLK is '0'
	Data_R	: IN  STD_LOGIC_VECTOR(Data_Width-1 downto 0) 	:= (others => '0');	--Data to write when LRCLK is '1'
	Ready	: OUT STD_LOGIC									:= '0';				--Goes to '0' if Data_L and DATA_R are sent
)
{

	signal zbclk					: std_logic;					--signals to synchronize BCLK
    signal zzbclk				 	: std_logic;
    signal zzzbclk 					: std_logic;
    
    signal get_edge			 		: std_logic;					--signals to indicate BCLK edges
    signal set_edge 				: std_logic;
    
    signal zlrclk					: std_logic;					--signals to synchronize LRCLK
    signal zzlrclk					: std_logic;
    signal zzzlrclk					: std_logic;
    
    signal lr_edge					: std_logic;					--signal to indicate LRCLK edges
    
    signal new_sample 				: std_logic;					--signal to indicate new sample
    signal cnt						: integer range 0 to 31 := 0;	--counts the bits received
    
    SIGNAL DATA_REG					: STD_LOGIC_VECTOR(Data_Width-1 downto 0) 	:= (others => '0');
	
	
	Process DETECT_EDGE ()		--detects positive and negative edge of BCLK
	{
		zbclk <= BCLK;
    	zzbclk <= zbclk;
        zzzbclk <= zzbclk;
        if(zzbclk = '1' and zzzbclk = '0')		--rising edge
		{
			if (BCLK_Edge = '1') 
			{
				set_edge <= '1';
			}
			else
			{
				get_edge <= '1';
			}
		}
		elsif(zzbclk = '0' and zzzbclk = '1')	--falling edge
		{
			if (BCLK_Edge = '0') 
			{
				set_edge <= '1';
			}
			else
			{
				get_edge <= '1';
			}
		}
		else
		{
			set_edge <= '0';
            get_edge <= '0';
		}
	}
	
	Process DETECT_LR_EDGE ()	--detects positive or negative edge of LRCLK
	{
		zlrclk <= LRCLK;
        zzlrclk <= zlrclk;
        zzzlrclk <= zzlrclk;
        if(zzlrclk /= zzzlrclk)
		{
			lr_edge <= '1';
		}
		else
		{
			lr_edge <= '0';
		}
	}
	
	Process DETECT_SAMPLE ()		--receives data
	{
		if(Reset = '1')			--resets cnt and READY
		{
			cnt <= 0;
            Ready <= '0';
		}
		else
		{
			if(lr_edge = '1')	--resets cnt for new sample
			{
				cnt <= 0;
			}
			
			if(get_edge = '1')	--sets bit number on get_edge
			{
				if(cnt < Sample_Bits - 1)
				{
					cnt <= cnt + 1;
				}
			}
			
			if(set_edge = '1')	--sets new_sample to '1' if counted more than DATA_WIDTH bits
			{
				if(cnt = 1)
				{
					new_sample <= '1';
					if(LRCLK = '0')			--finished with Right and starts now with Left
					{
						DATA_REG <= Data_L;
						Ready <= '1';
					}
					else
					{
						DATA_REG <= Data_R;
						Ready <= '0';
					}
				}
				elsif(cnt > Data_Width and cnt < Sample_Bits - 1)
				{
					new_sample <= '0';
				}
			}
		}
	}
	
	Process GET_DATA ()
	{
		if(set_edge = '1' and new_sample = '1' and cnt < Data_Width)
		{
			Data <= DATA_REG(Data_Width-1-cnt);
		}
	}
}