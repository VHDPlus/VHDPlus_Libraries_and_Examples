/*
    Name: I2C
    Rev: 1.0
    Creator: Leon Beier
    Date: 07.06.2019

	This file is a derivation of the implementation found at: https://www.digikey.com/eewiki/pages/viewpage.action?pageId=10125324
	
    Insertion: -Right click on I2C.vhdp -> Add to project
			   -Add NewComponent of I2C_Master_Interface in your code
			   -Remove CLK_Frequency if you use a VHDP Core and no PLL
			   -Right click the name I2C_Master_Interface next to NewComponent and create the signals
	
    Function:  -Set Address to the address of the I2C slave,
			    RW to '0' to write or '1' to read data,
			    Data_WR to the byte to send and
				Enable to '1'
			   -If Busy is set to '1', the next data can be set to send together
			   -If Busy changes to '0', Data_RD can be read
			   -Set Enable to '0' while setting the last data to send/receive to end the transaction
			   
    Example:   I2C_Array
*/

Component I2C_Master_Interface
(
	Include();
	Generic
	(
		CLK_Frequency : INTEGER := 12000000; --input clock speed from user logic in Hz
    	Bus_CLK       : INTEGER := 400000;   --speed the i2c bus (SCL) will run at in Hz
	);
	Reset     : IN     STD_LOGIC := '0';                                --active high reset
    Enable    : IN     STD_LOGIC := '0';                                --latch in command
    Address   : IN     STD_LOGIC_VECTOR(6 DOWNTO 0) := (others => '0'); --address of target slave
    RW        : IN     STD_LOGIC := '0';                                --'0' is write, '1' is read
    Data_WR   : IN     STD_LOGIC_VECTOR(7 DOWNTO 0) := (others => '0'); --data to write to slave
    Busy      : OUT    STD_LOGIC := '0';                                --indicates transaction in progress
    Data_RD   : OUT    STD_LOGIC_VECTOR(7 DOWNTO 0) := (others => '0'); --data read from slave
    Ack_Error : BUFFER STD_LOGIC := '0';                                --flag if improper acknowledge from slave
    SDA       : INOUT  STD_LOGIC := 'Z';                                --serial data output of i2c bus
    SCL       : INOUT  STD_LOGIC := 'Z';                                --serial clock output of i2c bus
)
{
	AttributeDeclaration
	{
		CONSTANT divider     :  INTEGER := (CLK_Frequency/Bus_CLK)/4; --number of clocks in 1/4 cycle of SCL
		TYPE machine IS(ready, start, command, slv_ack1, wr, rd, slv_ack2, mstr_ack, stop); --needed states
		SIGNAL state         : machine;                        --state machine
		SIGNAL data_clk      : STD_LOGIC;                      --data clock for SDA
		SIGNAL data_clk_prev : STD_LOGIC;                      --data clock during previous system clock
		SIGNAL scl_clk       : STD_LOGIC;                      --constantly running internal SCL
		SIGNAL scl_ena       : STD_LOGIC := '0';               --enables internal SCL to output
		SIGNAL sda_int       : STD_LOGIC := '1';               --internal SDA
		SIGNAL sda_ena_n     : STD_LOGIC;                      --enables internal SDA to output
		SIGNAL addr_rw       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --latched in address and read/write
		SIGNAL data_tx       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --latched in data to write to slave
		SIGNAL data_rx       : STD_LOGIC_VECTOR(7 DOWNTO 0);   --data received from slave
		SIGNAL bit_cnt       : INTEGER RANGE 0 TO 7 := 7;      --tracks bit number in transaction
		SIGNAL stretch       : STD_LOGIC := '0';               --identifies if slave is stretching SCL
	}
	
	Connections
	{
	    SDA,
		SCL,
	}
	
	--generate the timing for the bus clock (scl_clk) and the data clock (data_clk)
	Process I2C_Timing_Generator
	(
		VARIABLE count  :  INTEGER RANGE 0 TO divider*4;  	--timing for clock generation
	)
	{
		if(Reset = '1')
		{
			stretch <= '0';
      		count := 0;
		}
		else
		{
			data_clk_prev <= data_clk;          			--store previous value of data clock
			if(count = divider*4-1)       					--end of timing cycle
			{
				count := 0;                       			--reset timer
			}
			elsif(stretch = '0')          					--clock stretching from slave not detected
			{
				count := count + 1;               			--continue clock generation timing
			}
			
			case(count)
			{
				when(0 TO divider-1)           				--first 1/4 cycle of clocking
				{
					scl_clk <= '0';
          			data_clk <= '0';
				}
				when(divider TO divider*2-1)    			--second 1/4 cycle of clocking
				{
					scl_clk <= '0';
          			data_clk <= '1';
				}
				when(divider*2 TO divider*3-1)  			--third 1/4 cycle of clocking
				{
					scl_clk <= '1';                 		--release SCL
					if(SCL = '0')             				--detect if slave is stretching clock
					{
						stretch <= '1';
					}
					else
					{
						stretch <= '0';
					}
					data_clk <= '1';
				}
				when(others)                				--last 1/4 cycle of clocking
				{
					scl_clk <= '1';
          			data_clk <= '0';
				}
			}
		}
	}
	
	--state machine and writing to SDA during SCL low (data_clk rising edge)
	Process I2C_State_Machine ()
	{
		if(Reset = '1')
		{
			state <= ready;                      --return to initial state
		    Busy <= '1';                         --indicate not available
		    scl_ena <= '0';                      --sets SCL high impedance
		    sda_int <= '1';                      --sets SDA high impedance
		    Ack_Error <= '0';                    --clear acknowledge error flag
		    bit_cnt <= 7;                        --restarts data bit counter
		    Data_RD <= "00000000";               --clear data read port
		}
		else
		{
			if(data_clk = '1' AND data_clk_prev = '0') 		--data clock rising edge
			{
				case(state)
				{
					when(ready)                  			--idle state
					{
						if(Enable = '1')            		--transaction requested
						{
							Busy <= '1';                   	--flag Busy
			                addr_rw <= Address & RW;        --collect requested slave address and command
			                data_tx <= Data_WR;            	--collect requested data to write
			                state <= start;                	--go to start bit
						}
						else                       			--remain idle
						{
							Busy <= '0';                   	--unflag Busy
              				state <= ready;                	--remain idle
						}
					}
					when(start)                    			--start bit of transaction
					{
						Busy <= '1';                     	--resume Busy if continuous mode
			            sda_int <= addr_rw(bit_cnt);     	--set first address bit to bus
			            state <= command;                	--go to command
					}
					when(command)                 			--address and command byte of transaction
					{
						if(bit_cnt = 0)            			--command transmit finished
						{
							sda_int <= '1';                	--release SDA for slave acknowledge
				            bit_cnt <= 7;                  	--reset bit counter for "byte" states
				            state <= slv_ack1;             	--go to slave acknowledge (command)
						}
						else                       			--next clock cycle of command state
						{
							bit_cnt <= bit_cnt - 1;        	--keep track of transaction bits
			                sda_int <= addr_rw(bit_cnt-1); 	--write address/command bit to bus
			                state <= command;              	--continue with command
						}
					}
					when(slv_ack1)             				--slave acknowledge bit (command)
					{
						if(addr_rw(0) = '0')      			--write command
						{
							sda_int <= data_tx(bit_cnt);   	--write first bit of data
              				state <= wr;                   	--go to write byte
						}
						else                     			--read command
						{
							sda_int <= '1';                	--release SDA from incoming data
              				state <= rd;                   	--go to read byte
						}
					}
					when(wr)
					{
						Busy <= '1';                     	--resume Busy if continuous mode
						if(bit_cnt = 0)           			--write byte transmit finished
						{
							sda_int <= '1';                	--release SDA for slave acknowledge
              				bit_cnt <= 7;                  	--reset bit counter for "byte" states
              				state <= slv_ack2;             	--go to slave acknowledge (write)
						}
						else                      			--next clock cycle of write state
						{
							bit_cnt <= bit_cnt - 1;        	--keep track of transaction bits
			                sda_int <= data_tx(bit_cnt-1); 	--write next bit to bus
			                state <= wr;                   	--continue writing
						}
					}
					when(rd)                   				--read byte of transaction
					{
						Busy <= '1';                     	--resume Busy if continuous mode
						if(bit_cnt = 0)           			--read byte receive finished
						{
							if(Enable = '1' AND addr_rw = Address & RW)  --continuing with another read at same address
							{
								sda_int <= '0';             --acknowledge the byte has been received
							}
							else                         	--stopping or continuing with a write
							{
								sda_int <= '1';             --send a no-acknowledge (before stop or repeated start)
							}
							bit_cnt <= 7;                  	--reset bit counter for "byte" states
			                Data_RD <= data_rx;            	--output received data
			                state <= mstr_ack;             	--go to master acknowledge
						}
						else								--next clock cycle of read state
						{
							bit_cnt <= bit_cnt - 1;        	--keep track of transaction bits
              				state <= rd;                   	--continue reading
						}
					}
					when(slv_ack2)               			--slave acknowledge bit (write)
					{
						if(Enable = '1')              		--continue transaction
						{
							Busy <= '0';                   	--continue is accepted
			                addr_rw <= Address & RW;        --collect requested slave address and command
			                data_tx <= Data_WR;            	--collect requested data to write
							if(addr_rw = Address & RW)  	--continue transaction with another write
							{
								sda_int <= Data_WR(bit_cnt);--write first bit of data
                				state <= wr;                --go to write byte
							}
							else                         	--continue transaction with a read or new slave
							{
								state <= start;             --go to repeated start
							}
						}
						else
						{
							state <= stop;                 	--go to stop bit
						}
					}
					when(mstr_ack)                  		--master acknowledge bit after a read
					{
						if(Enable = '1')            		--continue transaction
						{
							Busy <= '0';                   	--continue is accepted and data received is available on bus
			                addr_rw <= Address & RW;        --collect requested slave address and command
			                data_tx <= Data_WR;            	--collect requested data to write
              				if(addr_rw = Address & RW)  	--continue transaction with another read
							{
								sda_int <= '1';             --release SDA from incoming data
                				state <= rd;                --go to read byte
							}
							else                   			--continue transaction with a write or new slave
							{
								state <= start;             --repeated start
							}
						}
						else                   				--complete transaction
						{
							state <= stop;                 	--go to stop bit
						}
					}
					when(stop)                     			--stop bit of transaction
					{
						Busy <= '0';                     	--unflag Busy
            			state <= ready;                  	--go to idle state
					}
				}
			}
			elsif(data_clk = '0' AND data_clk_prev = '1')  	--data clock falling edge
			{
				case(state)
				{
					when(start)
					{
						if(scl_ena = '0')              		--starting new transaction
						{
							scl_ena <= '1';                 --enable SCL output
              				Ack_Error <= '0';               --reset acknowledge error output
						}
					}
					when(slv_ack1)                    		--receiving slave acknowledge (command)
					{
						if(SDA /= '0' OR Ack_Error = '1') 	--no-acknowledge or previous no-acknowledge
						{
							Ack_Error <= '1';               --set error output if no-acknowledge
						}
					}
					when(rd)                            	--receiving slave data
					{
						data_rx(bit_cnt) <= SDA;            --receive current slave data bit
					}
					when(slv_ack2)                       	--receiving slave acknowledge (write)
					{
						if(SDA /= '0' OR Ack_Error = '1') 	--no-acknowledge or previous no-acknowledge
						{
							Ack_Error <= '1';               --set error output if no-acknowledge
						}
					}
					when(stop)
					{
						scl_ena <= '0';                     --disable SCL
					}
					when(others)
					{
						NULL;
					}
				}
			}
		}
	}
	
	VHDL
	{
		--set SDA output
		WITH state SELECT
			sda_ena_n <= data_clk_prev WHEN start,     	--generate start condition
		                 NOT data_clk_prev WHEN stop,  	--generate stop condition
		                 sda_int WHEN OTHERS;          	--set to internal SDA signal    
      
		  --set SCL and SDA outputs
		SCL <= '0' WHEN (scl_ena = '1' AND scl_clk = '0') ELSE 'Z';
		SDA <= '0' WHEN sda_ena_n = '0' ELSE 'Z';
	}
}