/*
    Name: Single-Port RAM
    Rev: 1.0
    Creator: Leon Beier
    Date: 27.08.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of 
	this hdl code and associated documentation files (the "HDL Code"), to deal in the 
	HDL Code without restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
	HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
	subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
	WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

	Description: This component allows save data in the internal block memory
	
    Insertion:   -Right click on Single-Port_RAM.vhdp -> Add to project
			     -Add NewComponent of Single_Port_RAM in your code
				 -Set Bits to the number of bits for one data block
			     -Set Width to the number of data blocks you need
			     -Right click the name Single_Port_RAM next to NewComponent and create the needed signals 
	
    Function:    Read:  -Set Write to '0'
					    -Set Address to the position of the data to read
					    -Wait one cycle and read the data with Data_OUT (Step{... <= Data_OUT;})
						
			     Write: -Set Address to the position for the data to save
				        -Set Data_IN to the data to save
						-Set Write to '1'
						-Wait one cycle to reset Write to '0' (Step{Write <= '0';})
*/

Component Single_Port_RAM
(
	Include();
	Generic
	(
		Width	: NATURAL := 256;	--Number of blocks to save
		Bits    : NATURAL := 8;		--Number of Bits for one block
	);
	Write    : in  std_logic := '0';   			--'1' to Write in RAM (don't forget to reset to prevent overwriting)
	Address  : in  natural range 0 to Width-1;
	Data_IN  : in  std_logic_vector(Bits-1 downto 0); --Data that is written into the RAM when write is '1'
	Data_OUT : out std_logic_vector(Bits-1 downto 0); --Data at given Address
)
{
	type ram_type is array (Width-1 downto 0) of std_logic_vector (Bits-1 downto 0);   
	signal RAM : ram_type;  
	
	Process()
	{
		if(Write = '1')
		{
			RAM(Address) <= Data_IN;
		}
	}
	
	Data_OUT <= RAM(Address);
}