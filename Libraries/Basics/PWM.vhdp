/*
    Name: PWM
    Rev: 1.0
    Creator: Leon Beier
    Date: 08.06.2019
   
    This file is a derivation of the implementation found at: https://www.digikey.com/eewiki/download/attachments/20939345/pwm.vhd?version=2&modificationDate=1420832390373&api=v2
	
	Description: -This Component creates an ouput signal like this:
	                        |---------| = PWM_Frequency
	                         ____      ____                                     _________
				 Duty = 50% |    |____|    | Duty = 0% |_________| Duty = 100% |         |
				 -50% Duty for Bits_Resolution = 8 -> 127/255
				 -Phases = 3 Duty = 1/3:
				   __
				  |  |_____|
				      __
				  |__|  |__|
				         __
			      |_____|  |
				 -PWM is for example usefull to change the speed of a motor
	
    Insertion:   -Right click on PWM.vhdp -> Add to project
			     -Add NewComponent of PWM_Generator in your code
			     -Remove CLK_Frequency if you use a VHDP Core and no PLL
			     -Remove or set the parameters (information next to the declaration)
			     -Right click the name PWM_Generator next to NewComponent and create the needed signals (Bits_Resolution and Phases in the declarations have to be replaced with the values you chose or you have to use a constant)
	
    Function:    1. Set Duty (for Bits_Resolution = 8 e.g. Duty <= STD_LOGIC_VECTOR(TO_UNSIGNED(255, 8));
	             2. Keep Enable '1' to be able to set the duty cycle
				 3. Use e.g. PWM_Out(0) as output for your device
	
    Example:     Motor_Controller
*/

Component PWM_Generator
(
	Include();
	Generic
	(
		CLK_Frequency   : INTEGER := 12000000;   --system clock frequency in Hz
      	PWM_Frequency   : INTEGER := 100000;     --PWM switching frequency in Hz
      	Bits_Resolution : INTEGER := 8;          --bits of resolution setting the duty cycle
      	Phases          : INTEGER := 1;          --number of equaly spaced Phases
	);
	Reset     : IN  STD_LOGIC := '0';                             --active high reset
    Enable    : IN  STD_LOGIC := '1';                             --latches in new duty cycle
    Duty      : IN  STD_LOGIC_VECTOR(Bits_Resolution-1 DOWNTO 0) := (others => '0'); --duty cycle
    PWM_Out   : OUT STD_LOGIC_VECTOR(Phases-1 DOWNTO 0) := (others => '0');          --pwm outputs
)
{
	
	AttributeDeclaration
	{
		CONSTANT  period        :  INTEGER := CLK_Frequency/PWM_Frequency;        --number of clocks in one pwm period
	    TYPE counters IS ARRAY (0 TO Phases-1) OF INTEGER RANGE 0 TO period - 1;  --data type for array of period counters
	    SIGNAL    count         :  counters := (OTHERS => 0);                     --array of period counters
	    SIGNAL    half_duty_new :  INTEGER RANGE 0 TO period/2 := 0;              --number of clocks in 1/2 duty cycle
	    TYPE half_duties IS ARRAY (0 TO Phases-1) OF INTEGER RANGE 0 TO period/2; --data type for array of half duty values
	    SIGNAL    half_duty     :  half_duties := (OTHERS => 0);                  --array of half duty values (for each phase)
	}
	
	Connections
	{
	    PWM_Out,
	}
	
	Process PWM_Generator_Process ()
	{
		if(Reset = '1')
		{
			count <= (OTHERS => 0);                                                --clear counter
      		PWM_Out <= (OTHERS => '0');                                            --clear pwm outputs
		}
		else
		{
			if(Enable = '1')                                                   	   --latch in new duty cycle
			{
				half_duty_new <= TO_INTEGER(UNSIGNED(Duty))*period/(2**Bits_Resolution)/2; --determine clocks in 1/2 duty cycle
			}
			For(i IN 0 to Phases-1)
			{
				if(count(0) = period - 1 - i*period/Phases)                        --end of period reached
				{
					count(i) <= 0;                                                 --reset counter
          			half_duty(i) <= half_duty_new;                                 --set most recent duty cycle value
				}
				else                                                               --end of period not reached
				{
					count(i) <= count(i) + 1;                                      --increment counter
				}
			}
			For(i IN 0 to Phases-1)
			{
				if(count(i) = half_duty(i))                                   	   --phase's falling edge reached
				{
					PWM_Out(i) <= '0';                                             --deassert the pwm output
				}
				elsif(count(i) = period - half_duty(i))                      	   --phase's rising edge reached
				{
					PWM_Out(i) <= '1';                                             --assert the pwm output
				}
			}
		}
	}
}