/*
    Name: Input Synchronizer
    Rev: 1.0
    Creator: Leon Beier
    Date: 09.06.2019

	This file is a derivation of the implementation found at: http://www.lothar-miller.de/s9y/archives/41-Einsynchronisieren-von-asynchronen-Signalen.html

    Insertion: -Right click on Input_Synchronizer.vhdp -> Add to project
			   -Add NewComponent of Input_Synchronizer in your code
			   -Set Input_Number depending on the number of inputs you want to synchronize
			   -Remove Stages or set an own number of stages
			   -Connect your inputs with the instance IOs (you can write Data_In(0) => ... Data_In(1) => ...)
			   -Create signals as replacement for the inputs and connect them with Outputs
	
    Function:  -This component prevents unstable states of FPGA Inputs
*/

Component Input_Synchronizer
(
	Include();
	Generic
	(
		Input_Number    : NATURAL := 1;          --number of inputs that are synchronized
		Stages			: NATURAL := 2;			 --number of flip-flops in the synchronizer chain
	);
	Reset     : IN  STD_LOGIC := '0';                                 --active high reset
	Data_In	  : IN  STD_LOGIC_VECTOR (Input_Number-1 downto 0) := (others => '0');		  --unsynchronized Data
	Data_Out  : OUT STD_LOGIC_VECTOR (Input_Number-1 downto 0) := (others => '0');		  --synchronized Data
)
{
	TYPE Synchronizer_Array IS ARRAY (Input_Number-1 downto 0) OF STD_LOGIC_VECTOR (Stages-1 downto 0);
	SIGNAL Synchronizer_Chain : Synchronizer_Array;			  --Input_Number x Stages Array
	
	Process Synchronizer_Process ()
	{
		if(Reset = '1')
		{
			Synchronizer_Chain <= (others => (others => '0'));	  --sets all flip-flops to '0'
			Data_Out <= (others => '0');
		}
		else
		{
			For(i IN 0 to Input_Number-1)
			{
				Data_Out(i) <= Synchronizer_Chain(i)(Stages-1);	  --output equals last flip-flop in chain
				Synchronizer_Chain(i) <= Synchronizer_Chain(i)(Stages-2 downto 0) & Data_In(i);	--shifts one forward
			}
		}
	}
}