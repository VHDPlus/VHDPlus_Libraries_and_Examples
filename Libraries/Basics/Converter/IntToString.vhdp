/*
    Name: Int to String
    Rev: 1.0
    Creator: Leon Beier
    Date: 20.08.2019
	Copyright (c) 2019 Protop Solutions UG. All right reserved.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of 
	this hdl code and associated documentation files (the "HDL Code"), to deal in the 
	HDL Code without restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
	HDL Code, and to permit persons to whom the HDL Code is furnished to do so, 
	subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
	FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
	WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

	Important: -You need to add BinaryToBcd.vhdp and BinaryToBcdDigit.vhdp too
			   -Bits limit the biggest number to convert and Digits have to be set depending on Bits
	           -The created string has a fixed length so the rest ist filled with spaces (if Fill = '1') "-28468    "
	           -Every digit takes 8 bits
	
    Insertion: -Right click on IntToString.vhdp, BinaryToBcd.vhdp and BinaryToBcdDigit.vhdp -> Add to project
			   -Add NewComponent of IntToString in your code
			   -Set Bits depending on the maximum number to convert (Bits = 8 -> maximum is 2^8-1 = 255)
			   -Set Digits depending on Bits
			    Bits   Digits
				1-3    1 
				4-6    2
				7-9    3
				10-13  4
				14-16  5
				17-19  6
				20-23  7
				24-26  8
				27-29  9
				30-32  10
			   -Remove Fill or set it to '1' to replace the remaining chars with spaces
			   -Right click the name IntToString next to NewComponent and create the needed signals
	
    Function:  -Set Number to the integer to convert
               -Set Enable from '0' to '1'
               -Wait until Busy changes from '1' to '0'
               -Read the number from Num_String 
                Num_String(Num_String'LENGTH-1 downto Num_String'LENGTH-(Used*8)) is just the number with Used*8 as length
                Num_String(Num_String'LENGTH-1 downto Num_String'LENGTH-7) is the first char (1 for 123) and Num_String(7 downto 0) the last char
	
    Example:   IntToString_Example
*/

Component IntTostring
(
	Generic(
		Bits	: INTEGER := 24;								--size of the binary input numbers in bits
		Digits	: INTEGER := 7;									--number of BCD digits to convert to
		Fill	: STD_LOGIC := '0';								--fills string with spaces after number if '1'
	);
	Number		: IN  INTEGER   := 0;							--Integer to convert
	Num_String	: OUT STD_LOGIC_VECTOR ((Digits+1)*8-1 downto 0) := (others => '0'); --String to create
	Enable		: IN  STD_LOGIC := '0';							--Rising edge starts converting
	Used		: OUT NATURAL   := 0;							--chars that are used for the int
	Busy		: OUT STD_LOGIC := '0';                       	--'1' while converting
)
{
	AttributeDeclaration
	{
		SIGNAL reset  : STD_LOGIC := '0';							--Component signals
		SIGNAL ena : STD_LOGIC := '0';
		SIGNAL binary : STD_LOGIC_VECTOR(Bits-1 DOWNTO 0);
		SIGNAL busyB  : STD_LOGIC;
		SIGNAL bcd 	  : STD_LOGIC_VECTOR(Digits*4-1 DOWNTO 0);
		SIGNAL char	   : NATURAL range 0 to 11 := 0;
		
		SIGNAL sBuf	   : STD_LOGIC_VECTOR (Num_String'LENGTH-1 downto 0) := (others => '0');
		
		TYPE   stateTypes IS(idle, waiting1, waiting2, create);		--needed states
		SIGNAL state :  stateTypes;									--state machine
	}
	
	NewComponent BinaryToBcd 
	(
		Bits   => Bits,
		Digits => digits,
		
		Reset  => reset,
		Enable => ena,
		Binary => binary,
		Busy   => busyB,
		BCD    => bcd,
	);
	
	Process
	(
		VARIABLE ena_prev  : STD_LOGIC := '0';
		VARIABLE usedBuf   : NATURAL := 0;
		VARIABLE startBit  : NATURAL range 0 to Digits*4-1 := 0;
		VARIABLE intStart  : STD_LOGIC := '0';
	)
	{
		Case(state)
		{
			When(idle)
			{
				if(Enable = '1' AND ena_prev = '0')		--waits for enable
				{
					if(Number < 0)		--adds "-" if negative
					{
						sBuf(sBuf'LENGTH-1 downto sBuf'LENGTH-8) <= x"2d";
						char <= 1;
					}
					else
					{
						char <= 0;
					}
					
					usedBuf := 0;			--resets signals
					startBit := Digits*4-1;	
					intStart := '0';
					
					binary <= STD_LOGIC_VECTOR(TO_SIGNED(abs(Number), Bits));	--starts BinaryToBcd
					ena    <= '1';
					
					state <= waiting1;		--goes to next step
					Busy <= '1';			--sets busy to '1'
				}
				else
				{
					Busy <= '0';
				}
				ena_prev := Enable;
			}
			When(waiting1)
			{
				If(busyB = '1')
				{
					state <= waiting2;
				}
			}
			When(waiting2)
			{
				ena <= '0';
				if(busyB = '0')			--waits while busy is '1'
				{
					state <= create;
				}
			}
			When(create)
			{
				if(startBit > 0)		--creates string
				{
					--goes through all digits creates without Zeros at the beginning
					if(char < (sBuf'LENGTH/8) AND (bcd(startBit downto startBit-3) /= "0000" OR intStart = '1'))
					{
						intStart := '1';
						--inserts char in part of sBuf
						sBuf(sBuf'LENGTH-(char*8)-1 downto sBuf'LENGTH-(char*8)-8) <= STD_LOGIC_VECTOR(TO_UNSIGNED(TO_INTEGER(UNSIGNED(bcd(startBit downto startBit-3)))+48, 8));
						char <= char + 1;
					}
					
					--goes to next digit
					if(startBit > 3)
					{
						startBit := startBit-4;
					}
					else
					{
						startBit := 0;
					}
				}
				else
				{
					if(char < (sBuf'LENGTH/8) AND Fill = '1')	--adds spaces after the Number to fill the string
					{
						if(usedBuf = 0)
						{
							usedBuf := char;	--saves how many chars are used
						}
						sBuf(Num_String'LENGTH-(char*8)-1 downto Num_String'LENGTH-(char*8)-8) <= x"20";	--adds space
						char <= char + 1;
					}
					else
					{
						Num_String     <= sBuf;			    --returns string
						If(usedBuf = 0)
						{
							Used  <= char;			--used
						}
						Else
						{
							Used  <= usedBuf;
						}
						state <= idle;		        --goes to idle
						Busy  <= '0';		        --and sets busy to '0'
					}
				}
			}
		}
	}
}