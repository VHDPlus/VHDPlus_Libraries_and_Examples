Component Serial_Plotter_Interface
(
    Generic
    (
        UseTime         : BOOLEAN     := false;
        NameChars       : NATURAL     := 16;
        UnitChars       : NATURAL     := 3;
        CLK_Frequency   : INTEGER     := 12000000;    --frequency of system clock in Hertz
        Baud_Rate       : INTEGER     := 115200;      --data link baud rate in bits/second
    );
    Value      : IN  INTEGER := 0;
    Time       : IN  INTEGER := 0;
    Graph_Name : IN  STD_LOGIC_VECTOR(NameChars*8-1 downto 0) := (others => '0');
    ValueUnit  : IN  STD_LOGIC_VECTOR(UnitChars*8-1 downto 0) := (others => '0');
    TimeUnit   : IN  STD_LOGIC_VECTOR(UnitChars*8-1 downto 0) := (others => '0');
    
    Send       : IN  STD_LOGIC := '0';
    Busy       : OUT STD_LOGIC := '0';
    
    TX         : OUT STD_LOGIC;
)
{
    Process ()
    {
        Thread
        {
            While(Send = '0'){}
            Busy <= '1';
            NewFunction newString (messageStr);
            messageStr.Length <= 0;
            
            --Add graph name
            NewFunction constStringAppend (Graph_Name, NameChars, messageStr);
            if(messageStr.Length > 0)
            {
                NewFunction charAppend (s":", messageStr);
            }
            
            --Add value
            VARIABLE myValue : NATURAL;
            If(Value < 0)
            {
                NewFunction charAppend (s"-", messageStr);
            }
            myValue := abs(Value);
            NewFunction newString (valueStr);
            NewFunction naturalToStringInst (myValue, valueStr, bcdEna, bcdBus, bcdBin, bcdDec);
            NewFunction stringAppend (valueStr, messageStr);
            NewFunction constStringAppend (ValueUnit, UnitChars, messageStr);
            
            --Add time
            If(UseTime)
            {
                NewFunction charAppend (s"/", messageStr);
                If(Time < 0)
                {
                    NewFunction charAppend (s"-", messageStr);
                }
                myValue := abs(Time);
                NewFunction naturalToString (myValue, valueStr, bcdEna, bcdBus, bcdBin, bcdDec);
                NewFunction stringAppend (valueStr, messageStr);
                NewFunction constStringAppend (TimeUnit, UnitChars, messageStr);
            }
            NewFunction charAppend (s"\n", messageStr);
            
            NewFunction printString (messageStr, UART_Interface_TX_Data, UART_Interface_TX_Busy, UART_Interface_TX_Enable);
            
            Busy <= '0';
            While(Send = '1'){}
        }
    }

    SeqFunction constStringAppend
    (
        iString      : STD_LOGIC_VECTOR;
        iStringChars : NATURAL;
        oString      : String_Type;
    )
    {
        oString.Write <= '1';
        For(VARIABLE i : INTEGER range 0 to iStringChars := 0; i < iStringChars; i := i + 1)
        {
            VARIABLE myChar : STD_LOGIC_VECTOR(7 downto 0);
            myChar := iString((iStringChars-i)*8-1 downto (iStringChars-(i+1))*8);
            if(myChar /= x"00")
            {
                oString.Address <= oString.Length;
                oString.Data_IN <= myChar;
                oString.Length  <= oString.Length+1;
            }
            Else
            {
                i := iStringChars-1;
            }
        }
        oString.Write <= '0';
    }
    
    SIGNAL UART_Interface_TX_Enable     : STD_LOGIC := '0';
    SIGNAL UART_Interface_TX_Busy       : STD_LOGIC := '0';
    SIGNAL UART_Interface_TX_Data       : STD_LOGIC_VECTOR (8-1 DOWNTO 0) := (others => '0');
    NewComponent UART_Interface
    (
        CLK_Frequency => CLK_Frequency,
        Baud_Rate     => Baud_Rate,
        OS_Rate       => 12,
        D_Width       => 8,
        Parity        => 0,
        Parity_EO     => '0',

        TX            => TX,
        TX_Enable     => UART_Interface_TX_Enable,
        TX_Busy       => UART_Interface_TX_Busy,
        TX_Data       => UART_Interface_TX_Data,
    );
}