/*
    Copyright (c) 2021 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Insertion: -Right click on Logic_Analyzer_SDRAM.vhdp -> Add to project
               -Add NewComponent of Logic_Analyzer_SDRAM in your code
               -Right click the name Logic_Analyzer_SDRAM next to NewComponent and create the needed signal
    
    Function:  -Saves "Inputs" with the rate of 150MHz/Rate_Div while Run is '1'
               -Is limited because of the SDRAM speed, but can save a lot of samples
               -Values can be read with Address and Outputs afterwards
 */

Component Fast_Logic_Analyzer_SDRAM
(
    Generic
    (
        Max_Samples    : NATURAL := 3000000; --3Mio samples
        Buffer_Size    : NATURAL := 10000;   --Samples before trigger
        Channels       : NATURAL range 1 to 16 := 16;
    );
    
    CLK_150     : OUT STD_LOGIC;
    
    Rate_Div     : IN  NATURAL range 1 to 150000000 := 150; --150MHz clock/150 = 1Mio samples per second
    Samples      : IN  NATURAL range 1 to Max_Samples   := Max_Samples;  --Samples to save with offset samples
    Start_Offset : IN  NATURAL range 0 to Buffer_Size   := 0;  --Number of samples that are saved before start changes to '1' to see the data before the trigger point
    
    Run         : IN  STD_LOGIC := '0'; --Saves data while Run is '1'
    Full        : OUT STD_LOGIC := '0'; --changes from '0' to '1' when ram is full -> Set Run to '0'
    
    Inputs      : IN  STD_LOGIC_VECTOR(Channels-1 downto 0) := (others => '0');
    
    Address     : IN  NATURAL range 0 to Max_Samples := 0;   --Read the values
    Outputs     : OUT STD_LOGIC_VECTOR(15 downto 0); --Takes some cycles at 150MHz to read (No problem with the 12MHz base clock)
    
    sdram_addr  : OUT std_logic_vector (11 downto 0);
    sdram_ba    : OUT std_logic_vector (1 downto 0);
    sdram_cas_n : OUT std_logic;
    sdram_dq    : INOUT std_logic_vector (15 downto 0) := (others => '0');
    sdram_dqm   : OUT std_logic_vector (1 downto 0);
    sdram_ras_n : OUT std_logic;
    sdram_we_n  : OUT std_logic;
    sdram_cke   : OUT std_logic := '1';
    sdram_cs_n  : OUT std_logic := '0';
    sdram_clk   : OUT std_logic;
)
{
    CLK_150 <= SDRAM_Interface_CLK_150_Out;
    
    SIGNAL sample_clk_en : STD_LOGIC := '0';

    Process ()
    {
        If(rising_edge(SDRAM_Interface_CLK_150_Out))
        {
            VARIABLE div_cntr : NATURAL range 0 to 150000000 := 0;
            If(div_cntr >= Rate_Div-1)
            {
                div_cntr := 0;
                sample_clk_en <= '1';
            }
            Else
            {
                sample_clk_en <= '0';
                div_cntr := div_cntr + 1;
            }
        }
    }
    
    CONSTANT sub_steps    : NATURAL := 16/Channels;
    TYPE lao_ram_type IS ARRAY (0 to (Buffer_Size/sub_steps)-1) OF STD_LOGIC_VECTOR(15 downto 0);
    SIGNAL lao_ram   : lao_ram_type;
    SIGNAL ram_addr     : NATURAL range 0 to Buffer_Size := 0;
    SIGNAL in_data : STD_LOGIC_VECTOR(15 downto 0);
    Process ()
    {
        If(rising_edge(SDRAM_Interface_CLK_150_Out))
        {
            lao_ram(ram_addr) <= in_data;
        }
    }
    
    SIGNAL out_addr : NATURAL range 0 to Max_Samples := 0;
    SIGNAL out_data : STD_LOGIC_VECTOR(15 downto 0);
    out_data <= lao_ram(out_addr);
    
    Process ()
    {
        If(rising_edge(SDRAM_Interface_CLK_150_Out))
        {
            VARIABLE in_addr      : NATURAL range 0 to Buffer_Size := 0;
            VARIABLE in_data_reg  : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
            SIGNAL   start_addr   : NATURAL range 0 to Buffer_Size := 0;
            VARIABLE step_r       : NATURAL range 0 to sub_steps   := 0;
            step_r := in_addr mod sub_steps;
            
            If(sample_clk_en = '1')
            {
                in_data_reg(((step_r + 1)*Channels)-1 downto step_r*Channels) := Inputs;
                
                If(step_r = sub_steps-1)
                {
                    ram_addr    <= in_addr/sub_steps;
                    in_data     <= in_data_reg;
                }
                
                If(in_addr < Buffer_Size-1)
                {
                    in_addr := in_addr + 1;
                }
                Else
                {
                    in_addr := 0;
                }
            }
            
            If(Run = '0')
            {
                start_addr  <= (in_addr-Start_Offset) mod Buffer_Size;
            }
        }
    }
    
    SIGNAL sdram_sample_clk_en : STD_LOGIC := '0';

    Generate (if sub_steps > 1)
    {
        Process ()
        {
            If(rising_edge(SDRAM_Interface_CLK_150_Out))
            {
                VARIABLE div_cntr : NATURAL range 0 to sub_steps-1 := 0;
                sdram_sample_clk_en <= '0';
                If(sample_clk_en = '1')
                {
                    If(div_cntr = sub_steps-1)
                    {
                        div_cntr := 0;
                        sdram_sample_clk_en <= '1';
                    }
                    Else
                    {
                        div_cntr := div_cntr + 1;
                    }
                }
            }
        }
    }
    Generate (if sub_steps = 1)
    {
        sdram_sample_clk_en <= sample_clk_en;
    }
    
    Process ()
    {
        If(rising_edge(SDRAM_Interface_CLK_150_Out))
        {
            VARIABLE sdram_run : BOOLEAN := false;
            VARIABLE start     : BOOLEAN := true;
            VARIABLE run_reg   : STD_LOGIC := '0';
            VARIABLE read      : BOOLEAN := true;
            VARIABLE Complete_in_addr : NATURAL range 0 to Max_Samples := 0;
            
            If(Run /= run_reg)
            {
                sdram_run := false;
                Complete_in_addr := 0;
                start     := true;
                If(Run = '0')
                {
                    read := true;
                    Full <= '0';
                }
                Else
                {
                    read := false;
                }
            }
            
            If(read)
            {
                VARIABLE addr_reg : NATURAL range 0 to Max_Samples := Max_Samples;
                SDRAM_Interface_Write_Enable <= '0';
                If(sdram_run)
                {
                    If(SDRAM_Interface_Busy = '0' AND SDRAM_Interface_Read_Valid = '1')
                    {
                        Outputs <= SDRAM_Interface_Read_Data;
                        SDRAM_Interface_Read_Enable <= '0';
                        sdram_run := false;
                    }
                }
                Elsif(Address /= addr_reg)
                {
                    addr_reg := Address;
                    SDRAM_Interface_Address <= STD_LOGIC_VECTOR(TO_UNSIGNED(Address, SDRAM_Interface_Address'LENGTH));
                    SDRAM_Interface_Read_Enable <= '1';
                    sdram_run := true;
                }
            }
            Else
            {
                SDRAM_Interface_Read_Enable <= '0';
                If(sdram_run)
                {
                    If(SDRAM_Interface_Busy = '0')
                    {
                        SDRAM_Interface_Write_Enable <= '1';
                        SDRAM_Interface_Write_Data   <= out_data;
                        SDRAM_Interface_Address      <= STD_LOGIC_VECTOR(TO_UNSIGNED(Complete_in_addr, SDRAM_Interface_Address'LENGTH));
                        sdram_run        := false;
                    }
                }
                Elsif(sdram_sample_clk_en = '1')
                {
                    If(Complete_in_addr < Samples/sub_steps)
                    {
                        If(start)
                        {
                            out_addr <= start_addr/sub_steps;
                            start    := false;
                        }
                        Else
                        {
                            If(out_addr < Buffer_Size/sub_steps-1)
                            {
                                out_addr <= out_addr + 1;
                            }
                            Else
                            {
                                out_addr <= 0;
                            }
                            Complete_in_addr := Complete_in_addr + 1;
                        }
                        sdram_run := true;
                    }
                    Else
                    {
                        Full <= '1';
                        addr_reg := Max_Samples;
                        read := true;
                    }
                    SDRAM_Interface_Write_Enable <= '0';
                }
            }
            
            run_reg := Run;
        }
    }
    
    Connections
    {
        sdram_addr,
        sdram_ba,
        sdram_cas_n,
        sdram_clk,
        sdram_ras_n,
        sdram_we_n,
        sdram_dqm,
        sdram_dq,
    }
    
    SIGNAL SDRAM_Interface_CLK_150_Out  : std_logic;
    SIGNAL SDRAM_Interface_Address      : std_logic_vector (21 downto 0) := (others => '0');
    SIGNAL SDRAM_Interface_Write_Enable : std_logic := '0';
    SIGNAL SDRAM_Interface_Write_Data   : std_logic_vector (15 downto 0) := (others => '0');
    SIGNAL SDRAM_Interface_Read_Enable  : std_logic := '0';
    SIGNAL SDRAM_Interface_Read_Data    : std_logic_vector (15 downto 0) := (others => '0');
    SIGNAL SDRAM_Interface_Read_Valid   : std_logic := '0';
    SIGNAL SDRAM_Interface_Busy         : std_logic := '0';
    NewComponent SDRAM_Interface
    (
        Sim          => false,
        
        Reset        => '0',
        CLK_150_Out  =>SDRAM_Interface_CLK_150_Out,
        Address      =>SDRAM_Interface_Address,
        Write_Enable =>SDRAM_Interface_Write_Enable,
        Write_Data   =>SDRAM_Interface_Write_Data,
        Read_Enable  =>SDRAM_Interface_Read_Enable,
        Read_Data    =>SDRAM_Interface_Read_Data,
        Read_Valid   =>SDRAM_Interface_Read_Valid,
        Busy         =>SDRAM_Interface_Busy,
        sdram_addr   =>sdram_addr,
        sdram_ba     =>sdram_ba,
        sdram_cas_n  =>sdram_cas_n,
        sdram_cke    =>sdram_cke,
        sdram_cs_n   =>sdram_cs_n,
        sdram_dq     =>sdram_dq,
        sdram_dqm    =>sdram_dqm,
        sdram_ras_n  =>sdram_ras_n,
        sdram_we_n   =>sdram_we_n,
        sdram_clk    =>sdram_clk,
    );
    
}