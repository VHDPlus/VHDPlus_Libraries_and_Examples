/*
    Name: CRT Controller
    Rev: 1.0
    Creator: Leon Beier
    Date: 06.06.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Description: This component takes a VGA 24bit RAM interface for image data and creates an video stream with 25MHz pixel clk
 */

Component VS_Converter
(
    Include
    (
        Image_Data_Package.all,
    );
    --Camera stream input
    iStream     : IN     rgb_stream;

    --Video stream output
    VS_PCLK     : OUT    STD_LOGIC;
    VS_SCLK     : OUT    STD_LOGIC;
    VS_R        : OUT    STD_LOGIC_VECTOR (7 downto 0);
    VS_G        : OUT    STD_LOGIC_VECTOR (7 downto 0);
    VS_B        : OUT    STD_LOGIC_VECTOR (7 downto 0);
    VS_HS       : OUT    STD_LOGIC;
    VS_VS       : OUT    STD_LOGIC;
    VS_DE       : OUT    STD_LOGIC;
)
{
    VS_PCLK <= PLL_c0;
    VS_SCLK <= PLL_c1;
    
    SIGNAL PLL_c0     : STD_LOGIC;
    SIGNAL PLL_c1     : STD_LOGIC;
    NewComponent VS_PLL
    (
        inclk0 => CLK,
        c0     => PLL_c0, --28MHz
        c1     => PLL_c1, --280MHz
    );

    CONSTANT porchHF : NATURAL := Image_Width; --start of horizntal front porch
    CONSTANT syncH   : NATURAL := Image_Width+20; --start of horizontal sync
    CONSTANT porchHB : NATURAL := Image_Width+120; --start of horizontal back porch
    CONSTANT maxH    : NATURAL := 1896; --total length of line
    
    CONSTANT porchVF : NATURAL := Image_Height; --start of vertical front porch
    CONSTANT syncV   : NATURAL := Image_Height+10; --start of vertical sync
    CONSTANT porchVB : NATURAL := Image_Height+15; --start of vertical back porch
    CONSTANT maxV    : NATURAL := 984; --total rows
    
    SIGNAL xCountReg : INTEGER range 0 to maxH := 0;
    SIGNAL yCountReg : INTEGER range 0 to maxV := 0;

    Process ()
    {
        If(rising_edge(PLL_c0))
        {
            VARIABLE xCount : INTEGER range 0 to maxH := 0;
            VARIABLE yCount : INTEGER range 0 to maxV := 0;
            If(xCount < maxH)
            {
                xCount := xCount + 1;
            }
            
            VARIABLE Col_Reg : NATURAL range 0 to Image_Width-1 := 0;
            If(iStream.Column < Col_Reg OR xCount > maxH)
            {
                xCount := 0;
                If(yCount < maxV)
                {
                    yCount := yCount + 1;
                }
            }
            Col_Reg := iStream.Column;
            
            VARIABLE Row_Reg : NATURAL range 0 to Image_Height-1 := 0;
            If(iStream.Row < Row_Reg)
            {
                yCount := 0;
            }
            Row_Reg := iStream.Row;
            
            --Enable '1' while in display area
            If(xCount < porchHF AND yCount < porchVF)
            {
                VS_DE <= '1';

                --Set pixel data
                VS_R <= iStream.R;
                VS_G <= iStream.G;
                VS_B <= iStream.B;
            }
            Else
            {
                VS_DE <= '0';
                --Check for HS
                If(xCount >= syncH AND xCount < porchHB)
                {
                    VS_HS <= '0';
                }
                Else
                {
                    VS_HS <= '1';
                }
                --Check for VS
                If(yCount >= syncV AND yCount < porchVB)
                {
                    VS_VS <= '0';
                }
                Else
                {
                    VS_VS <= '1';
                }
            }
            
            xCountReg <= xCount;
            yCountReg <= yCount;
        }
    }
}