/*
    Name: LCD
    Rev: 1.0
    Creator: Leon Beier
    Date: 07.06.2019

	This file is a derivation of the implementation found at: https://www.digikey.com/eewiki/download/attachments/4096079/lcd_controller.vhd?version=3&modificationDate=1339616593283&api=v2
	
	Important: -To display numbers, use Data/IntToString
	           -The display has 2 rows with 16 chars. 
			    Every char you don't use should be replaced with x"20" to clear the chars that were displayed before.
				Examples to set the text: Line1_Buffer (127 downto 127-47) <= [STD_LOGIC_VECTOR(47 downto 0)]
				                          Line1_Buffer <= [STD_LOGIC_VECTOR(127 downto 0)]
										  Line1_Buffer <= [STD_LOGIC_VECTOR(63 downto 0)] & [STD_LOGIC_VECTOR(63 downto 0)]
	
    Insertion: -Right click on LCD.vhdp -> Add to project
			   -Add NewComponent of LCD_Controller in your code
			   -Remove CLK_Frequency if you use a VHDP Core and no PLL
			   -Add this to your Main IOs and connect them to the LCD and the instance (modify the names if already in use)
			    LCD_RW       : OUT   STD_LOGIC := '0';  --read/write for lcd
				LCD_RS       : OUT   STD_LOGIC := '0';  --setup/data for lcd
				LCD_E        : OUT   STD_LOGIC := '0';  --enable for lcd
				LCD_Data     : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0); --data signals for lcd
			   -Right click the name LCD_Controller next to NewComponent and create the signals
	
    Function:  -Set Line1_Buffer and Line2_Buffer and the Display will update automaticaly
	           -With Reset the Display can be initialized again
	
    Example:   LCD_Example
*/

Component LCD_Controller
(
	Generic
	(
		CLK_Frequency	: NATURAL := 12000000;
	);
	
	Reset        : IN    STD_LOGIC := '0';  --active low reinitializes lcd
	
	RW           : OUT   STD_LOGIC := '0';  --read/write for lcd
	RS           : OUT   STD_LOGIC := '0';  --setup/data for lcd
	E            : OUT   STD_LOGIC := '0';  --enable for lcd
	Data         : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0) := (others => '0'); --data signals for lcd
	
	Line1_Buffer : IN STD_LOGIC_VECTOR(127 downto 0) := (others => '0');  -- Data for the top line of the LCD
	Line2_Buffer : IN STD_LOGIC_VECTOR(127 downto 0) := (others => '0');  -- Data for the bottom line of the LCD
	Enable		 : IN STD_LOGIC := '0';
)
{
	AttributeDeclaration
	{
		TYPE CONTROL IS(power_up, initialize, RESETLINE, line1, line2, send, waitForEnable);
		SIGNAL    state       : CONTROL;
		CONSTANT  freq        : INTEGER := CLK_Frequency/1000000; --system clock frequency in MHz
		--CONSTANT  freq       : INTEGER := 1; --system clock frequency in MHz
		SIGNAL 	ptr     	  : natural range 0 to 16 := 15; -- To keep track of what character we are up to
		SIGNAL 	line		  : STD_LOGIC := '1';
	}
	
	Process
	(
		VARIABLE clk_count : INTEGER := 0; --event counter for timing
		VARIABLE l_en	   : STD_LOGIC := '0';
	)
	{
		If(Reset = '1')
		{
			state <= power_up;
		}
		Else
		{
			Case(state)
			{
				When(waitForEnable)
				{
					RS <= '0';
	            	RW <= '0';
	            	Data <= "00000000";
					E <= '0';
					
					If(l_en = '0' AND Enable = '1')
					{
						state <= resetline;
					}
					l_en := Enable;
				}
				--wait 50 ms to ensure Vdd has risen and required LCD wait is met
				When(power_up)
				{
					if(clk_count < (50000 * freq))
					--If(clk_count < 10)
					{
						clk_count := clk_count + 1;
						state <= power_up;
						
						RS <= '0';
						RW <= '0';
						Data <= "00110000";
					}
					else
					{
						clk_count := 0;
						/*
						RS <= '0';
						RW <= '0';
						Data <= "00110000";
						*/
						state <= initialize;
					}
				}
				--cycle through initialization sequence 
				When(initialize)
				{
					clk_count := clk_count + 1;
					if(clk_count < (10 * freq))		--function set
					{
						Data <= "00111100";      --2-line mode, display on
						--Data <= "00110100";    --1-line mode, display on
						--Data <= "00110000";    --1-line mdoe, display off
						--Data <= "00111000";    --2-line mode, display off
						E <= '1';
						state <= initialize;
					}
					elsif (clk_count < (60 * freq))	--wait 50 us
					{
						Data <= "00000000";
						E <= '0';
						state <= initialize;
					}
					elsif(clk_count < (70 * freq))	--display on/off control
					{
						Data <= "00001100";      --display on, cursor off, blink off
						--Data <= "00001101";    --display on, cursor off, blink on
						--Data <= "00001110";    --display on, cursor on, blink off
						--Data <= "00001111";    --display on, cursor on, blink on
						--Data <= "00001000";    --display off, cursor off, blink off
						--Data <= "00001001";    --display off, cursor off, blink on
						--Data <= "00001010";    --display off, cursor on, blink off
						--Data <= "00001011";    --display off, cursor on, blink on            
						E <= '1';
						state <= initialize;
					}
					elsif(clk_count < (120 * freq))	--wait 50 us
					{
						Data <= "00000000";
						E <= '0';
						state <= initialize;
					}
					elsif(clk_count < (130 * freq))	--display clear
					{
						Data <= "00000001";
						E <= '1';
						state <= initialize;
					}
					elsif(clk_count < (2130 * freq)) --wait 2 ms
					{
						Data <= "00000000";
						E <= '0';
						state <= initialize;
					}
					elsif(clk_count < (2140 * freq)) --entry mode set
					{
						Data <= "00000110";      --increment mode, entire shift off
						--Data <= "00000111";    --increment mode, entire shift on
						--Data <= "00000100";    --decrement mode, entire shift off
						--Data <= "00000101";    --decrement mode, entire shift on
						E <= '1';
						state <= initialize;
					}
					elsif(clk_count < (2200 * freq)) --wait 60 us
					{
						Data <= "00000000";
						E <= '0';
						state <= initialize;
					}
					else							 --initialization complete
					{
						clk_count := 0;
						state <= RESETLINE;
					}
				}
				when(resetline)
				{
					ptr <= 16;
					if(line = '1')
					{
						Data <= "10000000";
	            		RS <= '0';
	            		RW <= '0';
	            		clk_count := 0; 
	            		state <= send;
					}
					else
					{
						Data <= "11000000";
	            		RS <= '0';
	            		RW <= '0';
	            		clk_count := 0; 
	            		state <= send;
					}
				}
				when(line1)
				{
					line <= '1';
					Data <= Line1_Buffer(ptr*8 + 7 downto ptr*8);
	            	RS <= '1';
	            	RW <= '0';
	            	clk_count := 0; 
					line <= '1';
	            	state <= send;
				}
				when(line2)
				{
					line <= '0';
					Data <= Line2_Buffer(ptr*8 + 7 downto ptr*8);
	            	RS <= '1';
	            	RW <= '0';
	            	clk_count := 0;            
	            	state <= send;
				}
				--send instruction to lcd  
				when(send)
				{
					if(clk_count < (50 * freq))			--do not exit for 50us
					{
						if(clk_count < freq)			--negative enable
						{
							E <= '0';
						}
						elsif(clk_count < (14 * freq))	--positive enable half-cycle
						{
							E <= '1';
						}
						elsif(clk_count < (27 * freq))	--negative enable half-cycle
						{
							E <= '0';
						}
						clk_count := clk_count + 1;
						state <= send;
					}
					else
					{
						clk_count := 0;
						if(line = '1')
						{
							if(ptr = 0)
							{
								line <= '0';
								state <= resetline;
							}
							else
							{
								ptr <= ptr - 1;
								state <= line1;
							}
						}
						else
						{
							if(ptr = 0)
							{
								line <= '1';
								state <= waitForEnable;
							}
							else
							{
								ptr <= ptr - 1;
								state <= line2;
							}
						}
					}
				}
			}
		}
	}
}