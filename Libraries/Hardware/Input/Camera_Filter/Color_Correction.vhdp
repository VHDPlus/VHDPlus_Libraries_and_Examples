Component Color_Correction_Filter
(
    Generic
    (
        R_Multiplier : NATURAL := 1;
        R_Divider    : NATURAL := 1;
        R_Add        : INTEGER := 0;
        
        G_Multiplier : NATURAL := 1;
        G_Divider    : NATURAL := 1;
        G_Add        : INTEGER := 0;
        
        B_Multiplier : NATURAL := 1;
        B_Divider    : NATURAL := 1;
        B_Add        : INTEGER := 0;
    );
    
    iPixel_R   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_G   : IN STD_LOGIC_VECTOR (7 downto 0);
    iPixel_B   : IN STD_LOGIC_VECTOR (7 downto 0);
    
    oPixel_R   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_G   : OUT STD_LOGIC_VECTOR (7 downto 0);
    oPixel_B   : OUT STD_LOGIC_VECTOR (7 downto 0);
)
{
    
    SIGNAL pixel_buf_r : STD_LOGIC_VECTOR(8 downto 0);
    SIGNAL pixel_buf_g : STD_LOGIC_VECTOR(8 downto 0);
    SIGNAL pixel_buf_b : STD_LOGIC_VECTOR(8 downto 0);
    pixel_buf_r <= STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_R))*R_Multiplier)/R_Divider + R_Add, pixel_buf_r'LENGTH));
    pixel_buf_g <= STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_G))*G_Multiplier)/G_Divider + G_Add, pixel_buf_g'LENGTH));
    pixel_buf_b <= STD_LOGIC_VECTOR(TO_UNSIGNED((TO_INTEGER(UNSIGNED(iPixel_B))*B_Multiplier)/B_Divider + B_Add, pixel_buf_b'LENGTH));
    oPixel_R <= pixel_buf_r(7 downto 0) when pixel_buf_r(8) = '0' else (others => '1');
    oPixel_G <= pixel_buf_g(7 downto 0) when pixel_buf_g(8) = '0' else (others => '1');
    oPixel_B <= pixel_buf_b(7 downto 0) when pixel_buf_b(8) = '0' else (others => '1');
    
}