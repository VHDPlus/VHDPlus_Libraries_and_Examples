/*
    Name: CNN Normalization
    Rev: 1.0
    Creator: Leon Beier
    Date: 12.09.2022
    Copyright (c) 2022 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    Description: -This component applies normalization to the input data
    
    Insertion:   -Specify the paramters with the constants in th CNN_Data file
                 -Connect the input data and stream signal with the input or previous layer
 */

Component CNN_Normalization
(
    Include
    (
        IEEE.STD_LOGIC_1164.ALL,
        IEEE.numeric_std.all,
        IEEE.MATH_REAL.all,
        CNN_Config_Package.all,
    );
    Generic
    (
        Input_Values   : NATURAL := 8;  --Number of Filters in previous layer or 3 for RGB input
        G_Offset       : INTEGER := 0;  --Offset of decimal point of Gamma
        B_Offset       : INTEGER := 0;  --Offset of decimal point of Beta
        M_Offset       : INTEGER := 0;  --Offset of decimal point of Mean
        S_Offset       : INTEGER := 0;  --Offset of decimal point of Std
        Input_Cycles   : NATURAL := 1;  --Filter Cycles of previous convolution
        --Multicycle     : BOOLEAN := true; --Calculates the values in multiple cycles for higher clock speeds
        Parameters     : CNN_Parameters_T; --Gamma, Beta, Mean, Std
    );
    iStream : IN  CNN_Stream_T;
    iData   : IN  CNN_Values_T(Input_Values/Input_Cycles-1 downto 0);
    
    oStream : OUT CNN_Stream_T;
    oData   : OUT CNN_Values_T(Input_Values/Input_Cycles-1 downto 0) := (others => 0);
)
{
    oStream.Data_CLK <= iStream.Data_CLK;
    
    type buf1_t is array (natural range <>) of SIGNED(CNN_Value_Resolution+1 downto 0);
    type buf2_t is array (natural range <>) of SIGNED(CNN_Value_Resolution+G_Offset downto 0);
    type buf3_t is array (natural range <>) of SIGNED(CNN_Value_Resolution+G_Offset+S_Offset downto 0);
    SIGNAL buf1  : buf1_t(Input_Values/Input_Cycles-1 downto 0) := (others => (others => '0'));
    SIGNAL buf2  : buf2_t(Input_Values/Input_Cycles-1 downto 0) := (others => (others => '0'));
    SIGNAL buf3  : buf3_t(Input_Values/Input_Cycles-1 downto 0) := (others => (others => '0'));
    
    type Stream_t is array (2 downto 0) of CNN_Stream_t;
    SIGNAL Stream_Reg : Stream_t;
    
    Process()
    {
        If(rising_edge(iStream.Data_CLK))
        {
            For(input in 0 to Input_Values/Input_Cycles-1)
            {
                --gamma * (batch - self.moving_mean) / sqrt(self.moving_var+epsilon) + beta
                VARIABLE gamma : CNN_Parameter_T := 0;
                VARIABLE beta  : CNN_Parameter_T := 0;
                VARIABLE mean  : CNN_Parameter_T := 0;
                VARIABLE var   : CNN_Parameter_T := 0;
                
                VARIABLE buf : SIGNED(CNN_Value_Resolution+G_Offset+S_Offset downto 0) := (others => '0');

                gamma := Parameters(0, input+Stream_Reg(0).Filter);
                beta  := Parameters(1, input+Stream_Reg(2).Filter);
                mean  := Parameters(2, input+iStream.Filter);
                var   := Parameters(3, input+Stream_Reg(1).Filter);
                
                If(M_Offset >= 0) { buf1(input) <= to_signed(iData(input), CNN_Value_Resolution+2) - resize(shift_left(to_signed(mean, CNN_Parameter_Resolution+M_Offset), M_Offset), CNN_Value_Resolution+2); }
                Else              { buf1(input) <= to_signed(iData(input), CNN_Value_Resolution+2) - resize(shift_right(to_signed(mean, CNN_Parameter_Resolution), abs(M_Offset)), CNN_Value_Resolution+2); }
                buf2(input) <= resize(shift_right(to_signed(gamma, CNN_Parameter_Resolution+CNN_Value_Resolution+2) * resize(buf1(input), CNN_Parameter_Resolution+CNN_Value_Resolution+2), CNN_Parameter_Resolution-G_Offset-1), CNN_Value_Resolution+G_Offset+1);
                buf3(input) <= resize(shift_right(to_signed(var, CNN_Parameter_Resolution+CNN_Value_Resolution+G_Offset+1) * resize(buf2(input), CNN_Parameter_Resolution+CNN_Value_Resolution+G_Offset+1), CNN_Parameter_Resolution-S_Offset-1), CNN_Value_Resolution+G_Offset+S_Offset+1);
                If(B_Offset >= 0) { buf := buf3(input) + resize(shift_left (to_signed(beta, CNN_Parameter_Resolution+B_Offset), B_Offset), CNN_Value_Resolution+G_Offset+S_Offset+1); }
                Else              { buf := buf3(input) + resize(shift_right(to_signed(beta, CNN_Parameter_Resolution), abs(B_Offset)), CNN_Value_Resolution+G_Offset+S_Offset+1); }
                If(buf >= 2**(CNN_Value_Resolution))
                {
                    oData(input) <= 2**(CNN_Value_Resolution)-1;
                }
                Elsif(buf <= (-1)*(2**(CNN_Value_Resolution)))
                {
                    oData(input) <= (-1)*(2**(CNN_Value_Resolution))+1;
                }
                Else
                {
                    oData(input) <= to_integer(buf);
                }
            }
            
            oStream.Column     <= Stream_Reg(2).Column;
            oStream.Row        <= Stream_Reg(2).Row;
            oStream.Filter     <= Stream_Reg(2).Filter;
            oStream.Data_Valid <= Stream_Reg(2).Data_Valid;
            
            Stream_Reg <= Stream_Reg(1 downto 0) & iStream;
        }
        
    }
}