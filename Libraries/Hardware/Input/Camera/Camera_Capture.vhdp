/*
    Name: Camera Capture
    Rev: 1.0
    Creator: Leon Beier
    Date: 30.12.2019
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal in the
    HDL Code without restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.
    
    Description: -This component takes video data (pixel + column/row) and saves it in the RAM. The data can be accessed parallely
                 -With Compession you can set the resolution to save and with Width the color depth, so you can save RAM
                 -If Full_Image is true, the resolution is decreased and if Full_Image is false, the resolution stays the same, but
                  the area to output is reduced
                 -If RGB is false, only the R value is saved
 */

Component Camera_Capture
(
    Include
    (
        Image_Data_Package.all,
    );
    Generic
    (
        Compression : NATURAL := 3;  --640/Complression Columns and 480/Compression Rows are saved
        Width       : NATURAL := 4;  --number of bits for R,G and B
        Full_Image  : BOOLEAN := true; --if false, on
        RGB         : BOOLEAN := true;
        CLK_Edge    : BOOLEAN := true; --true = rising edge
    );

    --Camera data
    iStream     : IN     rgb_stream;

    --RAM Output interface
    Read_Column : IN     NATURAL range 0 to 639 := 0;
    Read_Row    : IN     NATURAL range 0 to 479 := 0;
    Read_Data   : OUT    STD_LOGIC_VECTOR(23 downto 0) := (others => '0');
)
{
    CONSTANT xWidth : NATURAL := 639/Compression;
    CONSTANT yWidth : NATURAL := 479/Compression;

    TYPE column_type IS ARRAY (xWidth-1 downto 0) OF STD_LOGIC_VECTOR((Width)-1 downto 0);
    TYPE frame_type IS ARRAY (yWidth-1 downto 0) OF column_type;
    SIGNAL image_r : frame_type;
    SIGNAL image_g : frame_type;
    SIGNAL image_b : frame_type;

    SIGNAL RAM_Out_Col  : NATURAL range 0 to xWidth-1 := 0;
    SIGNAL RAM_Out_Row  : NATURAL range 0 to yWidth-1 := 0;
    SIGNAL RAM_Data_Out : STD_LOGIC_VECTOR((Width*3)-1 downto 0) := (others => '0');
    
    SIGNAL Column_buf      : NATURAL range 0 to 639 := 0;
    SIGNAL Row_buf         : NATURAL range 0 to 479 := 0;
    SIGNAL Pixel_R_buf     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    SIGNAL Pixel_G_buf     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    SIGNAL Pixel_B_buf     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');

    RAM_Out_Col <= Read_Column/Compression;
    RAM_Out_Row <= Read_Row/Compression;
    
    RAM_Data_Out <= image_r(RAM_Out_Row)(RAM_Out_Col) & image_g(RAM_Out_Row)(RAM_Out_Col) & image_b(RAM_Out_Row)(RAM_Out_Col);

    Read_Data(23 downto 24-Width) <= RAM_Data_Out((Width*3)-1 downto Width*2);
    Read_Data(15 downto 16-Width) <= RAM_Data_Out((Width*2)-1 downto Width) when RGB else RAM_Data_Out((Width*3)-1 downto Width*2);
    Read_Data(7  downto 8-Width)  <= RAM_Data_Out((Width)-1   downto 0) when RGB else RAM_Data_Out((Width*3)-1 downto Width*2);
    
    SIGNAL New_Pixel_Buf : STD_LOGIC;
    New_Pixel_Buf <= iStream.New_Pixel when CLK_Edge else NOT iStream.New_Pixel;
    
    Process Pixel_Capture
    (
        VARIABLE skip_row  : NATURAL range 0 to Compression-1 := 0;
        VARIABLE skip_col  : NATURAL range 0 to Compression-1 := 0;
        VARIABLE Col_prev  : NATURAL range 0 to Image_Width-1 := 0;
        VARIABLE Row_prev  : NATURAL range 0 to Image_Height-1 := 0;
    )
    {
        If(rising_edge(New_Pixel_Buf))
        {
            Column_buf <= iStream.Column * (640/Image_Width);
            Row_buf    <= iStream.Row * (480/Image_Height);
            Pixel_R_buf <= iStream.R;
            Pixel_G_buf <= iStream.G;
            Pixel_B_buf <= iStream.B;
            
            If(Row_prev /= Row_buf)
            {
                Row_prev := Row_buf;
                If(skip_row < Compression-1 AND Row_buf > 0)
                {
                    skip_row := skip_row + 1;
                }
                Else
                {
                    skip_row := 0;
                }
            }
            If(Col_prev /= Column_buf)
            {
                Col_prev := Column_buf;
                If(skip_col < Compression-1 AND Column_buf > 0)
                {
                    skip_col := skip_col + 1;
                }
                Else
                {
                    skip_col := 0;
                }
            }
            VARIABLE RAM_Data_In_R  : STD_LOGIC_VECTOR((Width)-1 downto 0) := (others => '0');
            VARIABLE RAM_Data_In_G  : STD_LOGIC_VECTOR((Width)-1 downto 0) := (others => '0');
            VARIABLE RAM_Data_In_B  : STD_LOGIC_VECTOR((Width)-1 downto 0) := (others => '0');
            VARIABLE RAM_Addr_Col : NATURAL range 0 to xWidth-1 := 0;
            VARIABLE RAM_Addr_Row : NATURAL range 0 to yWidth-1 := 0;
            If(Full_Image)
            {
                If(skip_row = Compression-1 AND skip_col = Compression/2)
                {
                    RAM_Data_In_R := Pixel_R_buf(7 downto 8-Width);
                    RAM_Data_In_G := Pixel_G_buf(7 downto 8-Width);
                    RAM_Data_In_B := Pixel_B_buf(7 downto 8-Width);
                    RAM_Addr_Row := Row_buf/Compression;
                    RAM_Addr_Col := Column_buf/Compression;
                }
            }
            Else
            {
                If(Row_buf < 480/Compression AND Column_buf < 640/Compression)
                {
                    RAM_Data_In_R := Pixel_R_buf(7 downto 8-Width);
                    RAM_Data_In_G := Pixel_G_buf(7 downto 8-Width);
                    RAM_Data_In_B := Pixel_B_buf(7 downto 8-Width);
                    RAM_Addr_Row := Row_buf;
                    RAM_Addr_Col := Column_buf;
                }
            }
            image_r(RAM_Addr_Row)(RAM_Addr_Col) <= RAM_Data_In_R;
            If(RGB)
            {
                image_g(RAM_Addr_Row)(RAM_Addr_Col) <= RAM_Data_In_G;
                image_b(RAM_Addr_Row)(RAM_Addr_Col) <= RAM_Data_In_B;
            }
        }
    }
}